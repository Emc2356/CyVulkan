# WARNING: auto generated code, do not edit directly

from libc.stdint cimport int32_t, uint8_t, uint32_t, uint64_t
from libc.stddef cimport wchar_t

cdef extern from "<vulkan/vulkan.h>" nogil:
    uint32_t VK_MAKE_API_VERSION(uint32_t variant, uint32_t major, uint32_t minor, uint32_t patch)
    uint32_t VK_MAKE_VERSION(uint32_t major, uint32_t minor, uint32_t patch)
    uint32_t VK_API_VERSION_VARIANT(int version)
    uint32_t VK_API_VERSION_MAJOR(int version)
    uint32_t VK_API_VERSION_MINOR(int version)
    uint32_t VK_API_VERSION_PATCH(int version)
    uint32_t VK_VERSION_MAJOR(int version)
    uint32_t VK_VERSION_MINOR(int version)
    uint32_t VK_VERSION_PATCH(int version)
    ctypedef struct AHardwareBuffer:
        pass
    ctypedef struct wl_display:
        pass
    ctypedef struct wl_surface:
        pass
    ctypedef struct ANativeWindow:
        pass
    
    int VK_VERSION_1_0
    int VK_USE_64_BIT_PTR_DEFINES
    int VK_NULL_HANDLE
    int VK_API_VERSION_1_0
    int VK_HEADER_VERSION
    int VK_HEADER_VERSION_COMPLETE
    int VK_UUID_SIZE
    int VK_ATTACHMENT_UNUSED
    int VK_FALSE
    int VK_LOD_CLAMP_NONE
    int VK_QUEUE_FAMILY_IGNORED
    int VK_REMAINING_ARRAY_LAYERS
    int VK_REMAINING_MIP_LEVELS
    int VK_SUBPASS_EXTERNAL
    int VK_TRUE
    int VK_WHOLE_SIZE
    int VK_MAX_MEMORY_TYPES
    int VK_MAX_MEMORY_HEAPS
    int VK_MAX_PHYSICAL_DEVICE_NAME_SIZE
    int VK_MAX_EXTENSION_NAME_SIZE
    int VK_MAX_DESCRIPTION_SIZE
    int VK_VERSION_1_1
    int VK_API_VERSION_1_1
    int VK_MAX_DEVICE_GROUP_SIZE
    int VK_LUID_SIZE
    int VK_QUEUE_FAMILY_EXTERNAL
    int VK_VERSION_1_2
    int VK_API_VERSION_1_2
    int VK_MAX_DRIVER_NAME_SIZE
    int VK_MAX_DRIVER_INFO_SIZE
    int VK_VERSION_1_3
    int VK_API_VERSION_1_3
    int VK_KHR_surface
    int VK_KHR_SURFACE_SPEC_VERSION
    char* VK_KHR_SURFACE_EXTENSION_NAME
    int VK_KHR_swapchain
    int VK_KHR_SWAPCHAIN_SPEC_VERSION
    char* VK_KHR_SWAPCHAIN_EXTENSION_NAME
    int VK_KHR_display
    int VK_KHR_DISPLAY_SPEC_VERSION
    char* VK_KHR_DISPLAY_EXTENSION_NAME
    int VK_KHR_display_swapchain
    int VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION
    char* VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME
    int VK_KHR_sampler_mirror_clamp_to_edge
    int VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION
    char* VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME
    int VK_KHR_dynamic_rendering
    int VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION
    char* VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME
    int VK_KHR_multiview
    int VK_KHR_MULTIVIEW_SPEC_VERSION
    char* VK_KHR_MULTIVIEW_EXTENSION_NAME
    int VK_KHR_get_physical_device_properties2
    int VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION
    char* VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME
    int VK_KHR_device_group
    int VK_KHR_DEVICE_GROUP_SPEC_VERSION
    char* VK_KHR_DEVICE_GROUP_EXTENSION_NAME
    int VK_KHR_shader_draw_parameters
    int VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION
    char* VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME
    int VK_KHR_maintenance1
    int VK_KHR_MAINTENANCE_1_SPEC_VERSION
    char* VK_KHR_MAINTENANCE_1_EXTENSION_NAME
    int VK_KHR_MAINTENANCE1_SPEC_VERSION
    int VK_KHR_MAINTENANCE1_EXTENSION_NAME
    int VK_KHR_device_group_creation
    int VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION
    char* VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME
    int VK_MAX_DEVICE_GROUP_SIZE_KHR
    int VK_KHR_external_memory_capabilities
    int VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION
    char* VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME
    int VK_LUID_SIZE_KHR
    int VK_KHR_external_memory
    int VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION
    char* VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME
    int VK_QUEUE_FAMILY_EXTERNAL_KHR
    int VK_KHR_external_memory_fd
    int VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION
    char* VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME
    int VK_KHR_external_semaphore_capabilities
    int VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION
    char* VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME
    int VK_KHR_external_semaphore
    int VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION
    char* VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME
    int VK_KHR_external_semaphore_fd
    int VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION
    char* VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME
    int VK_KHR_push_descriptor
    int VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION
    char* VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME
    int VK_KHR_shader_float16_int8
    int VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION
    char* VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME
    int VK_KHR_16bit_storage
    int VK_KHR_16BIT_STORAGE_SPEC_VERSION
    char* VK_KHR_16BIT_STORAGE_EXTENSION_NAME
    int VK_KHR_incremental_present
    int VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION
    char* VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME
    int VK_KHR_descriptor_update_template
    int VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION
    char* VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME
    int VK_KHR_imageless_framebuffer
    int VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION
    char* VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME
    int VK_KHR_create_renderpass2
    int VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION
    char* VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME
    int VK_KHR_shared_presentable_image
    int VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION
    char* VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME
    int VK_KHR_external_fence_capabilities
    int VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION
    char* VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME
    int VK_KHR_external_fence
    int VK_KHR_EXTERNAL_FENCE_SPEC_VERSION
    char* VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME
    int VK_KHR_external_fence_fd
    int VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION
    char* VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME
    int VK_KHR_performance_query
    int VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION
    char* VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME
    int VK_KHR_maintenance2
    int VK_KHR_MAINTENANCE_2_SPEC_VERSION
    char* VK_KHR_MAINTENANCE_2_EXTENSION_NAME
    int VK_KHR_MAINTENANCE2_SPEC_VERSION
    int VK_KHR_MAINTENANCE2_EXTENSION_NAME
    int VK_KHR_get_surface_capabilities2
    int VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION
    char* VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME
    int VK_KHR_variable_pointers
    int VK_KHR_VARIABLE_POINTERS_SPEC_VERSION
    char* VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME
    int VK_KHR_get_display_properties2
    int VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION
    char* VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME
    int VK_KHR_dedicated_allocation
    int VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION
    char* VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME
    int VK_KHR_storage_buffer_storage_class
    int VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION
    char* VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME
    int VK_KHR_relaxed_block_layout
    int VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION
    char* VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME
    int VK_KHR_get_memory_requirements2
    int VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION
    char* VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME
    int VK_KHR_image_format_list
    int VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION
    char* VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME
    int VK_KHR_sampler_ycbcr_conversion
    int VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION
    char* VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME
    int VK_KHR_bind_memory2
    int VK_KHR_BIND_MEMORY_2_SPEC_VERSION
    char* VK_KHR_BIND_MEMORY_2_EXTENSION_NAME
    int VK_KHR_maintenance3
    int VK_KHR_MAINTENANCE_3_SPEC_VERSION
    char* VK_KHR_MAINTENANCE_3_EXTENSION_NAME
    int VK_KHR_MAINTENANCE3_SPEC_VERSION
    int VK_KHR_MAINTENANCE3_EXTENSION_NAME
    int VK_KHR_draw_indirect_count
    int VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION
    char* VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME
    int VK_KHR_shader_subgroup_extended_types
    int VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION
    char* VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME
    int VK_KHR_8bit_storage
    int VK_KHR_8BIT_STORAGE_SPEC_VERSION
    char* VK_KHR_8BIT_STORAGE_EXTENSION_NAME
    int VK_KHR_shader_atomic_int64
    int VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION
    char* VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME
    int VK_KHR_shader_clock
    int VK_KHR_SHADER_CLOCK_SPEC_VERSION
    char* VK_KHR_SHADER_CLOCK_EXTENSION_NAME
    int VK_KHR_global_priority
    int VK_MAX_GLOBAL_PRIORITY_SIZE_KHR
    int VK_KHR_GLOBAL_PRIORITY_SPEC_VERSION
    char* VK_KHR_GLOBAL_PRIORITY_EXTENSION_NAME
    int VK_KHR_driver_properties
    int VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION
    char* VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME
    int VK_MAX_DRIVER_NAME_SIZE_KHR
    int VK_MAX_DRIVER_INFO_SIZE_KHR
    int VK_KHR_shader_float_controls
    int VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION
    char* VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME
    int VK_KHR_depth_stencil_resolve
    int VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION
    char* VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME
    int VK_KHR_swapchain_mutable_format
    int VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION
    char* VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME
    int VK_KHR_timeline_semaphore
    int VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION
    char* VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME
    int VK_KHR_vulkan_memory_model
    int VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION
    char* VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME
    int VK_KHR_shader_terminate_invocation
    int VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION
    char* VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME
    int VK_KHR_fragment_shading_rate
    int VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION
    char* VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME
    int VK_KHR_spirv_1_4
    int VK_KHR_SPIRV_1_4_SPEC_VERSION
    char* VK_KHR_SPIRV_1_4_EXTENSION_NAME
    int VK_KHR_surface_protected_capabilities
    int VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION
    char* VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME
    int VK_KHR_separate_depth_stencil_layouts
    int VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION
    char* VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME
    int VK_KHR_present_wait
    int VK_KHR_PRESENT_WAIT_SPEC_VERSION
    char* VK_KHR_PRESENT_WAIT_EXTENSION_NAME
    int VK_KHR_uniform_buffer_standard_layout
    int VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION
    char* VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME
    int VK_KHR_buffer_device_address
    int VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION
    char* VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME
    int VK_KHR_deferred_host_operations
    int VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION
    char* VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME
    int VK_KHR_pipeline_executable_properties
    int VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION
    char* VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME
    int VK_KHR_shader_integer_dot_product
    int VK_KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION
    char* VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME
    int VK_KHR_pipeline_library
    int VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION
    char* VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME
    int VK_KHR_shader_non_semantic_info
    int VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION
    char* VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME
    int VK_KHR_present_id
    int VK_KHR_PRESENT_ID_SPEC_VERSION
    char* VK_KHR_PRESENT_ID_EXTENSION_NAME
    int VK_KHR_synchronization2
    int VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION
    char* VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME
    int VK_KHR_shader_subgroup_uniform_control_flow
    int VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION
    char* VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME
    int VK_KHR_zero_initialize_workgroup_memory
    int VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION
    char* VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME
    int VK_KHR_workgroup_memory_explicit_layout
    int VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION
    char* VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME
    int VK_KHR_copy_commands2
    int VK_KHR_COPY_COMMANDS_2_SPEC_VERSION
    char* VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME
    int VK_KHR_format_feature_flags2
    int VK_KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION
    char* VK_KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME
    int VK_KHR_maintenance4
    int VK_KHR_MAINTENANCE_4_SPEC_VERSION
    char* VK_KHR_MAINTENANCE_4_EXTENSION_NAME
    int VK_EXT_debug_report
    int VK_EXT_DEBUG_REPORT_SPEC_VERSION
    char* VK_EXT_DEBUG_REPORT_EXTENSION_NAME
    int VK_NV_glsl_shader
    int VK_NV_GLSL_SHADER_SPEC_VERSION
    char* VK_NV_GLSL_SHADER_EXTENSION_NAME
    int VK_EXT_depth_range_unrestricted
    int VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION
    char* VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME
    int VK_IMG_filter_cubic
    int VK_IMG_FILTER_CUBIC_SPEC_VERSION
    char* VK_IMG_FILTER_CUBIC_EXTENSION_NAME
    int VK_AMD_rasterization_order
    int VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION
    char* VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME
    int VK_AMD_shader_trinary_minmax
    int VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION
    char* VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME
    int VK_AMD_shader_explicit_vertex_parameter
    int VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION
    char* VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME
    int VK_EXT_debug_marker
    int VK_EXT_DEBUG_MARKER_SPEC_VERSION
    char* VK_EXT_DEBUG_MARKER_EXTENSION_NAME
    int VK_AMD_gcn_shader
    int VK_AMD_GCN_SHADER_SPEC_VERSION
    char* VK_AMD_GCN_SHADER_EXTENSION_NAME
    int VK_NV_dedicated_allocation
    int VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION
    char* VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME
    int VK_EXT_transform_feedback
    int VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION
    char* VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME
    int VK_NVX_binary_import
    int VK_NVX_BINARY_IMPORT_SPEC_VERSION
    char* VK_NVX_BINARY_IMPORT_EXTENSION_NAME
    int VK_NVX_image_view_handle
    int VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION
    char* VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME
    int VK_AMD_draw_indirect_count
    int VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION
    char* VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME
    int VK_AMD_negative_viewport_height
    int VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION
    char* VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME
    int VK_AMD_gpu_shader_half_float
    int VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION
    char* VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME
    int VK_AMD_shader_ballot
    int VK_AMD_SHADER_BALLOT_SPEC_VERSION
    char* VK_AMD_SHADER_BALLOT_EXTENSION_NAME
    int VK_AMD_texture_gather_bias_lod
    int VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION
    char* VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME
    int VK_AMD_shader_info
    int VK_AMD_SHADER_INFO_SPEC_VERSION
    char* VK_AMD_SHADER_INFO_EXTENSION_NAME
    int VK_AMD_shader_image_load_store_lod
    int VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION
    char* VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME
    int VK_NV_corner_sampled_image
    int VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION
    char* VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME
    int VK_IMG_format_pvrtc
    int VK_IMG_FORMAT_PVRTC_SPEC_VERSION
    char* VK_IMG_FORMAT_PVRTC_EXTENSION_NAME
    int VK_NV_external_memory_capabilities
    int VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION
    char* VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME
    int VK_NV_external_memory
    int VK_NV_EXTERNAL_MEMORY_SPEC_VERSION
    char* VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME
    int VK_EXT_validation_flags
    int VK_EXT_VALIDATION_FLAGS_SPEC_VERSION
    char* VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME
    int VK_EXT_shader_subgroup_ballot
    int VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION
    char* VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME
    int VK_EXT_shader_subgroup_vote
    int VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION
    char* VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME
    int VK_EXT_texture_compression_astc_hdr
    int VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION
    char* VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME
    int VK_EXT_astc_decode_mode
    int VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION
    char* VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME
    int VK_EXT_conditional_rendering
    int VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION
    char* VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME
    int VK_NV_clip_space_w_scaling
    int VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION
    char* VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME
    int VK_EXT_direct_mode_display
    int VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION
    char* VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME
    int VK_EXT_display_surface_counter
    int VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION
    char* VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME
    int VK_EXT_display_control
    int VK_EXT_DISPLAY_CONTROL_SPEC_VERSION
    char* VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME
    int VK_GOOGLE_display_timing
    int VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION
    char* VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME
    int VK_NV_sample_mask_override_coverage
    int VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION
    char* VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME
    int VK_NV_geometry_shader_passthrough
    int VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION
    char* VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME
    int VK_NV_viewport_array2
    int VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION
    char* VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME
    int VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION
    int VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME
    int VK_NVX_multiview_per_view_attributes
    int VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION
    char* VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME
    int VK_NV_viewport_swizzle
    int VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION
    char* VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME
    int VK_EXT_discard_rectangles
    int VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION
    char* VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME
    int VK_EXT_conservative_rasterization
    int VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION
    char* VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME
    int VK_EXT_depth_clip_enable
    int VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION
    char* VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME
    int VK_EXT_swapchain_colorspace
    int VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION
    char* VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME
    int VK_EXT_hdr_metadata
    int VK_EXT_HDR_METADATA_SPEC_VERSION
    char* VK_EXT_HDR_METADATA_EXTENSION_NAME
    int VK_EXT_external_memory_dma_buf
    int VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION
    char* VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME
    int VK_EXT_queue_family_foreign
    int VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION
    char* VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME
    int VK_QUEUE_FAMILY_FOREIGN_EXT
    int VK_EXT_debug_utils
    int VK_EXT_DEBUG_UTILS_SPEC_VERSION
    char* VK_EXT_DEBUG_UTILS_EXTENSION_NAME
    int VK_EXT_sampler_filter_minmax
    int VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION
    char* VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME
    int VK_AMD_gpu_shader_int16
    int VK_AMD_GPU_SHADER_INT16_SPEC_VERSION
    char* VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME
    int VK_AMD_mixed_attachment_samples
    int VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION
    char* VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME
    int VK_AMD_shader_fragment_mask
    int VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION
    char* VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME
    int VK_EXT_inline_uniform_block
    int VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION
    char* VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME
    int VK_EXT_shader_stencil_export
    int VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION
    char* VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME
    int VK_EXT_sample_locations
    int VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION
    char* VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME
    int VK_EXT_blend_operation_advanced
    int VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION
    char* VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME
    int VK_NV_fragment_coverage_to_color
    int VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION
    char* VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME
    int VK_NV_framebuffer_mixed_samples
    int VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION
    char* VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME
    int VK_NV_fill_rectangle
    int VK_NV_FILL_RECTANGLE_SPEC_VERSION
    char* VK_NV_FILL_RECTANGLE_EXTENSION_NAME
    int VK_NV_shader_sm_builtins
    int VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION
    char* VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME
    int VK_EXT_post_depth_coverage
    int VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION
    char* VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME
    int VK_EXT_image_drm_format_modifier
    int VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION
    char* VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME
    int VK_EXT_validation_cache
    int VK_EXT_VALIDATION_CACHE_SPEC_VERSION
    char* VK_EXT_VALIDATION_CACHE_EXTENSION_NAME
    int VK_EXT_descriptor_indexing
    int VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION
    char* VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME
    int VK_EXT_shader_viewport_index_layer
    int VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION
    char* VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME
    int VK_NV_shading_rate_image
    int VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION
    char* VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME
    int VK_NV_ray_tracing
    int VK_NV_RAY_TRACING_SPEC_VERSION
    char* VK_NV_RAY_TRACING_EXTENSION_NAME
    int VK_SHADER_UNUSED_KHR
    int VK_SHADER_UNUSED_NV
    int VK_NV_representative_fragment_test
    int VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION
    char* VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME
    int VK_EXT_filter_cubic
    int VK_EXT_FILTER_CUBIC_SPEC_VERSION
    char* VK_EXT_FILTER_CUBIC_EXTENSION_NAME
    int VK_QCOM_render_pass_shader_resolve
    int VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION
    char* VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME
    int VK_EXT_global_priority
    int VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION
    char* VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME
    int VK_EXT_external_memory_host
    int VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION
    char* VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME
    int VK_AMD_buffer_marker
    int VK_AMD_BUFFER_MARKER_SPEC_VERSION
    char* VK_AMD_BUFFER_MARKER_EXTENSION_NAME
    int VK_AMD_pipeline_compiler_control
    int VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION
    char* VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME
    int VK_EXT_calibrated_timestamps
    int VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION
    char* VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME
    int VK_AMD_shader_core_properties
    int VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION
    char* VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME
    int VK_AMD_memory_overallocation_behavior
    int VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION
    char* VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME
    int VK_EXT_vertex_attribute_divisor
    int VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION
    char* VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME
    int VK_EXT_pipeline_creation_feedback
    int VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION
    char* VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME
    int VK_NV_shader_subgroup_partitioned
    int VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION
    char* VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME
    int VK_NV_compute_shader_derivatives
    int VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION
    char* VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME
    int VK_NV_mesh_shader
    int VK_NV_MESH_SHADER_SPEC_VERSION
    char* VK_NV_MESH_SHADER_EXTENSION_NAME
    int VK_NV_fragment_shader_barycentric
    int VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION
    char* VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME
    int VK_NV_shader_image_footprint
    int VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION
    char* VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME
    int VK_NV_scissor_exclusive
    int VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION
    char* VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME
    int VK_NV_device_diagnostic_checkpoints
    int VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION
    char* VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME
    int VK_INTEL_shader_integer_functions2
    int VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION
    char* VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME
    int VK_INTEL_performance_query
    int VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION
    char* VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME
    int VK_EXT_pci_bus_info
    int VK_EXT_PCI_BUS_INFO_SPEC_VERSION
    char* VK_EXT_PCI_BUS_INFO_EXTENSION_NAME
    int VK_AMD_display_native_hdr
    int VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION
    char* VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME
    int VK_EXT_fragment_density_map
    int VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION
    char* VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME
    int VK_EXT_scalar_block_layout
    int VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION
    char* VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME
    int VK_GOOGLE_hlsl_functionality1
    int VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION
    char* VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME
    int VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION
    int VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME
    int VK_GOOGLE_decorate_string
    int VK_GOOGLE_DECORATE_STRING_SPEC_VERSION
    char* VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME
    int VK_EXT_subgroup_size_control
    int VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION
    char* VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME
    int VK_AMD_shader_core_properties2
    int VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION
    char* VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME
    int VK_AMD_device_coherent_memory
    int VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION
    char* VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME
    int VK_EXT_shader_image_atomic_int64
    int VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION
    char* VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME
    int VK_EXT_memory_budget
    int VK_EXT_MEMORY_BUDGET_SPEC_VERSION
    char* VK_EXT_MEMORY_BUDGET_EXTENSION_NAME
    int VK_EXT_memory_priority
    int VK_EXT_MEMORY_PRIORITY_SPEC_VERSION
    char* VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME
    int VK_NV_dedicated_allocation_image_aliasing
    int VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION
    char* VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME
    int VK_EXT_buffer_device_address
    int VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION
    char* VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME
    int VK_EXT_tooling_info
    int VK_EXT_TOOLING_INFO_SPEC_VERSION
    char* VK_EXT_TOOLING_INFO_EXTENSION_NAME
    int VK_EXT_separate_stencil_usage
    int VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION
    char* VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME
    int VK_EXT_validation_features
    int VK_EXT_VALIDATION_FEATURES_SPEC_VERSION
    char* VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME
    int VK_NV_cooperative_matrix
    int VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION
    char* VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME
    int VK_NV_coverage_reduction_mode
    int VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION
    char* VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME
    int VK_EXT_fragment_shader_interlock
    int VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION
    char* VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME
    int VK_EXT_ycbcr_image_arrays
    int VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION
    char* VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME
    int VK_EXT_provoking_vertex
    int VK_EXT_PROVOKING_VERTEX_SPEC_VERSION
    char* VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME
    int VK_EXT_headless_surface
    int VK_EXT_HEADLESS_SURFACE_SPEC_VERSION
    char* VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME
    int VK_EXT_line_rasterization
    int VK_EXT_LINE_RASTERIZATION_SPEC_VERSION
    char* VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME
    int VK_EXT_shader_atomic_float
    int VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION
    char* VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME
    int VK_EXT_host_query_reset
    int VK_EXT_HOST_QUERY_RESET_SPEC_VERSION
    char* VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME
    int VK_EXT_index_type_uint8
    int VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION
    char* VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME
    int VK_EXT_extended_dynamic_state
    int VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION
    char* VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME
    int VK_EXT_shader_atomic_float2
    int VK_EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION
    char* VK_EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME
    int VK_EXT_shader_demote_to_helper_invocation
    int VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION
    char* VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME
    int VK_NV_device_generated_commands
    int VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION
    char* VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME
    int VK_NV_inherited_viewport_scissor
    int VK_NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION
    char* VK_NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME
    int VK_EXT_texel_buffer_alignment
    int VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION
    char* VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME
    int VK_QCOM_render_pass_transform
    int VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION
    char* VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME
    int VK_EXT_device_memory_report
    int VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION
    char* VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME
    int VK_EXT_acquire_drm_display
    int VK_EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION
    char* VK_EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME
    int VK_EXT_robustness2
    int VK_EXT_ROBUSTNESS_2_SPEC_VERSION
    char* VK_EXT_ROBUSTNESS_2_EXTENSION_NAME
    int VK_EXT_custom_border_color
    int VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION
    char* VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME
    int VK_GOOGLE_user_type
    int VK_GOOGLE_USER_TYPE_SPEC_VERSION
    char* VK_GOOGLE_USER_TYPE_EXTENSION_NAME
    int VK_EXT_private_data
    int VK_EXT_PRIVATE_DATA_SPEC_VERSION
    char* VK_EXT_PRIVATE_DATA_EXTENSION_NAME
    int VK_EXT_pipeline_creation_cache_control
    int VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION
    char* VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME
    int VK_NV_device_diagnostics_config
    int VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION
    char* VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME
    int VK_QCOM_render_pass_store_ops
    int VK_QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION
    char* VK_QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME
    int VK_NV_fragment_shading_rate_enums
    int VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION
    char* VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME
    int VK_NV_ray_tracing_motion_blur
    int VK_NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION
    char* VK_NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME
    int VK_EXT_ycbcr_2plane_444_formats
    int VK_EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION
    char* VK_EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME
    int VK_EXT_fragment_density_map2
    int VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION
    char* VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME
    int VK_QCOM_rotated_copy_commands
    int VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION
    char* VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME
    int VK_EXT_image_robustness
    int VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION
    char* VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME
    int VK_EXT_4444_formats
    int VK_EXT_4444_FORMATS_SPEC_VERSION
    char* VK_EXT_4444_FORMATS_EXTENSION_NAME
    int VK_ARM_rasterization_order_attachment_access
    int VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION
    char* VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME
    int VK_EXT_rgba10x6_formats
    int VK_EXT_RGBA10X6_FORMATS_SPEC_VERSION
    char* VK_EXT_RGBA10X6_FORMATS_EXTENSION_NAME
    int VK_NV_acquire_winrt_display
    int VK_NV_ACQUIRE_WINRT_DISPLAY_SPEC_VERSION
    char* VK_NV_ACQUIRE_WINRT_DISPLAY_EXTENSION_NAME
    int VK_VALVE_mutable_descriptor_type
    int VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION
    char* VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME
    int VK_EXT_vertex_input_dynamic_state
    int VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION
    char* VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME
    int VK_EXT_physical_device_drm
    int VK_EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION
    char* VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME
    int VK_EXT_depth_clip_control
    int VK_EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION
    char* VK_EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME
    int VK_EXT_primitive_topology_list_restart
    int VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION
    char* VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME
    int VK_HUAWEI_subpass_shading
    int VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION
    char* VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME
    int VK_HUAWEI_invocation_mask
    int VK_HUAWEI_INVOCATION_MASK_SPEC_VERSION
    char* VK_HUAWEI_INVOCATION_MASK_EXTENSION_NAME
    int VK_NV_external_memory_rdma
    int VK_NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION
    char* VK_NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME
    int VK_EXT_extended_dynamic_state2
    int VK_EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION
    char* VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME
    int VK_EXT_color_write_enable
    int VK_EXT_COLOR_WRITE_ENABLE_SPEC_VERSION
    char* VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME
    int VK_EXT_global_priority_query
    int VK_EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION
    char* VK_EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME
    int VK_MAX_GLOBAL_PRIORITY_SIZE_EXT
    int VK_EXT_image_view_min_lod
    int VK_EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION
    char* VK_EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME
    int VK_EXT_multi_draw
    int VK_EXT_MULTI_DRAW_SPEC_VERSION
    char* VK_EXT_MULTI_DRAW_EXTENSION_NAME
    int VK_EXT_load_store_op_none
    int VK_EXT_LOAD_STORE_OP_NONE_SPEC_VERSION
    char* VK_EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME
    int VK_EXT_border_color_swizzle
    int VK_EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION
    char* VK_EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME
    int VK_EXT_pageable_device_local_memory
    int VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION
    char* VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME
    int VK_QCOM_fragment_density_map_offset
    int VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION
    char* VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME
    int VK_NV_linear_color_attachment
    int VK_NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION
    char* VK_NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME
    int VK_GOOGLE_surfaceless_query
    int VK_GOOGLE_SURFACELESS_QUERY_SPEC_VERSION
    char* VK_GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME
    int VK_KHR_acceleration_structure
    int VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION
    char* VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME
    int VK_KHR_ray_tracing_pipeline
    int VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION
    char* VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME
    int VK_KHR_ray_query
    int VK_KHR_RAY_QUERY_SPEC_VERSION
    char* VK_KHR_RAY_QUERY_EXTENSION_NAME
    ctypedef int va_list;
    ctypedef struct Display:
        pass
    ctypedef unsigned long XID;
    ctypedef unsigned long VisualID;
    ctypedef XID Window;
    ctypedef void* MirEGLNativeWindowType;
    ctypedef void* MirEGLNativeDisplayType;
    ctypedef struct MirConnection:
        pass
    ctypedef struct MirSurface:
        pass
    ctypedef struct MirSurfaceSpec:
        pass
    ctypedef struct MirScreencast:
        pass
    ctypedef struct MirPromptSession:
        pass
    ctypedef struct MirBufferStream:
        pass
    ctypedef struct MirPersistentId:
        pass
    ctypedef struct MirBlob:
        pass
    ctypedef struct MirDisplayConfig:
        pass
    ctypedef struct xcb_connection_t:
        pass
    ctypedef uint32_t xcb_window_t;
    ctypedef uint32_t xcb_visualid_t;
    ctypedef struct ANativeWindow:
        pass
    ctypedef void *PVOID;
    ctypedef PVOID HANDLE;
    ctypedef HANDLE HINSTANCE;
    ctypedef HANDLE HWND;
    ctypedef unsigned long DWORD;
    ctypedef void *LPVOID;
    ctypedef wchar_t WCHAR;
    ctypedef  WCHAR *LPCWSTR;
    ctypedef struct SECURITY_ATTRIBUTES:
        DWORD nLength
        LPVOID lpSecurityDescriptor
        int bInheritHandle
    ctypedef uint32_t VkFlags;
    ctypedef uint32_t VkBool32;
    ctypedef uint64_t VkDeviceSize;
    ctypedef uint32_t VkSampleMask;
    ctypedef struct VkInstance:
        pass
    ctypedef struct VkPhysicalDevice:
        pass
    ctypedef struct VkDevice:
        pass
    ctypedef struct VkQueue:
        pass
    ctypedef struct VkSemaphore:
        pass
    ctypedef struct VkCommandBuffer:
        pass
    ctypedef struct VkFence:
        pass
    ctypedef struct VkDeviceMemory:
        pass
    ctypedef struct VkBuffer:
        pass
    ctypedef struct VkImage:
        pass
    ctypedef struct VkEvent:
        pass
    ctypedef struct VkQueryPool:
        pass
    ctypedef struct VkBufferView:
        pass
    ctypedef struct VkImageView:
        pass
    ctypedef struct VkShaderModule:
        pass
    ctypedef struct VkPipelineCache:
        pass
    ctypedef struct VkPipelineLayout:
        pass
    ctypedef struct VkRenderPass:
        pass
    ctypedef struct VkPipeline:
        pass
    ctypedef struct VkDescriptorSetLayout:
        pass
    ctypedef struct VkSampler:
        pass
    ctypedef struct VkDescriptorPool:
        pass
    ctypedef struct VkDescriptorSet:
        pass
    ctypedef struct VkFramebuffer:
        pass
    ctypedef struct VkCommandPool:
        pass
    cdef enum VkPipelineCacheHeaderVersion:
        VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1
        VK_PIPELINE_CACHE_HEADER_VERSION_BEGIN_RANGE = VK_PIPELINE_CACHE_HEADER_VERSION_ONE
        VK_PIPELINE_CACHE_HEADER_VERSION_END_RANGE = VK_PIPELINE_CACHE_HEADER_VERSION_ONE
        VK_PIPELINE_CACHE_HEADER_VERSION_RANGE_SIZE = (VK_PIPELINE_CACHE_HEADER_VERSION_ONE - VK_PIPELINE_CACHE_HEADER_VERSION_ONE + 1)
        VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkResult:
        VK_SUCCESS = 0
        VK_NOT_READY = 1
        VK_TIMEOUT = 2
        VK_EVENT_SET = 3
        VK_EVENT_RESET = 4
        VK_INCOMPLETE = 5
        VK_ERROR_OUT_OF_HOST_MEMORY = -1
        VK_ERROR_OUT_OF_DEVICE_MEMORY = -2
        VK_ERROR_INITIALIZATION_FAILED = -3
        VK_ERROR_DEVICE_LOST = -4
        VK_ERROR_MEMORY_MAP_FAILED = -5
        VK_ERROR_LAYER_NOT_PRESENT = -6
        VK_ERROR_EXTENSION_NOT_PRESENT = -7
        VK_ERROR_FEATURE_NOT_PRESENT = -8
        VK_ERROR_INCOMPATIBLE_DRIVER = -9
        VK_ERROR_TOO_MANY_OBJECTS = -10
        VK_ERROR_FORMAT_NOT_SUPPORTED = -11
        VK_ERROR_FRAGMENTED_POOL = -12
        VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000
        VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003
        VK_ERROR_SURFACE_LOST_KHR = -1000000000
        VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001
        VK_SUBOPTIMAL_KHR = 1000001003
        VK_ERROR_OUT_OF_DATE_KHR = -1000001004
        VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001
        VK_ERROR_VALIDATION_FAILED_EXT = -1000011001
        VK_ERROR_INVALID_SHADER_NV = -1000012000
        VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000
        VK_ERROR_FRAGMENTATION_EXT = -1000161000
        VK_ERROR_NOT_PERMITTED_EXT = -1000174001
        VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = -1000244000
        VK_ERROR_OUT_OF_POOL_MEMORY_KHR = VK_ERROR_OUT_OF_POOL_MEMORY
        VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = VK_ERROR_INVALID_EXTERNAL_HANDLE
        VK_RESULT_BEGIN_RANGE = VK_ERROR_FRAGMENTED_POOL
        VK_RESULT_END_RANGE = VK_INCOMPLETE
        VK_RESULT_RANGE_SIZE = (VK_INCOMPLETE - VK_ERROR_FRAGMENTED_POOL + 1)
        VK_RESULT_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkStructureType:
        VK_STRUCTURE_TYPE_APPLICATION_INFO = 0
        VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1
        VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2
        VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3
        VK_STRUCTURE_TYPE_SUBMIT_INFO = 4
        VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5
        VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6
        VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7
        VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8
        VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9
        VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10
        VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11
        VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12
        VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13
        VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14
        VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15
        VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16
        VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17
        VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18
        VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19
        VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20
        VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21
        VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22
        VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23
        VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24
        VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25
        VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26
        VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27
        VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28
        VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29
        VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30
        VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31
        VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32
        VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33
        VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34
        VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35
        VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36
        VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37
        VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38
        VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39
        VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40
        VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41
        VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42
        VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43
        VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44
        VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45
        VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46
        VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47
        VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000
        VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000
        VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000
        VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000
        VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001
        VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000
        VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003
        VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004
        VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005
        VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006
        VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013
        VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000
        VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001
        VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000
        VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001
        VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002
        VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003
        VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001
        VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002
        VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004
        VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006
        VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000
        VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001
        VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002
        VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003
        VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = 1000120000
        VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002
        VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003
        VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000
        VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001
        VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002
        VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004
        VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005
        VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000
        VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002
        VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004
        VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000
        VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001
        VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000
        VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001
        VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000
        VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000
        VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000
        VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = 1000063000
        VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000
        VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001
        VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007
        VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008
        VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009
        VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010
        VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011
        VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012
        VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000
        VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001
        VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000
        VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000
        VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000
        VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000
        VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000
        VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000
        VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000
        VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000
        VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000
        VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001
        VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002
        VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000
        VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001
        VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001
        VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002
        VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000
        VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000
        VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001
        VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000
        VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001
        VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000
        VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000
        VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000
        VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001
        VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000
        VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001
        VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002
        VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003
        VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000
        VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001
        VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002
        VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000
        VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000
        VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001
        VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002
        VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003
        VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000
        VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000
        VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001
        VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = 1000082000
        VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000
        VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX = 1000086000
        VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX = 1000086001
        VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX = 1000086002
        VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX = 1000086003
        VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX = 1000086004
        VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX = 1000086005
        VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000
        VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000
        VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000
        VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001
        VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002
        VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003
        VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000
        VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000
        VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000
        VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001
        VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000
        VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = 1000109000
        VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = 1000109001
        VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = 1000109002
        VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = 1000109003
        VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = 1000109004
        VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = 1000109005
        VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = 1000109006
        VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000
        VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000
        VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001
        VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002
        VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000
        VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000
        VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001
        VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002
        VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000
        VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001
        VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002
        VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003
        VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004
        VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000
        VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000
        VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000
        VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001
        VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002
        VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003
        VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004
        VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000
        VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001
        VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002
        VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003
        VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004
        VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = 1000130000
        VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = 1000130001
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001
        VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002
        VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003
        VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000
        VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001
        VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003
        VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004
        VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = 1000147000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001
        VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002
        VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000
        VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000
        VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000
        VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158001
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002
        VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003
        VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004
        VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005
        VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000
        VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001
        VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = 1000161000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = 1000161001
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = 1000161002
        VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = 1000161003
        VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = 1000161004
        VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002
        VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005
        VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000
        VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001
        VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003
        VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004
        VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005
        VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006
        VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007
        VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009
        VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011
        VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000
        VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000
        VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001
        VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = 1000177000
        VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000
        VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = 1000180000
        VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000
        VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000
        VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = 1000196000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = 1000197000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = 1000199000
        VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = 1000199001
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000
        VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002
        VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000
        VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = 1000211000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000
        VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001
        VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = 1000221000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000
        VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = 1000244000
        VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = 1000244001
        VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002
        VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = 1000246000
        VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000
        VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT
        VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2
        VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2
        VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2
        VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2
        VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2
        VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO
        VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO
        VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO
        VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO
        VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO
        VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO
        VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES
        VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO
        VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO
        VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES
        VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO
        VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO
        VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO
        VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES
        VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES
        VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO
        VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO
        VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES
        VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES
        VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO
        VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO
        VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES
        VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS
        VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO
        VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2
        VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2
        VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2
        VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2
        VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2
        VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO
        VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO
        VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO
        VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES
        VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES
        VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO
        VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES
        VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT
        VK_STRUCTURE_TYPE_BEGIN_RANGE = VK_STRUCTURE_TYPE_APPLICATION_INFO
        VK_STRUCTURE_TYPE_END_RANGE = VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO
        VK_STRUCTURE_TYPE_RANGE_SIZE = (VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO - VK_STRUCTURE_TYPE_APPLICATION_INFO + 1)
        VK_STRUCTURE_TYPE_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkSystemAllocationScope:
        VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0
        VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1
        VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2
        VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3
        VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4
        VK_SYSTEM_ALLOCATION_SCOPE_BEGIN_RANGE = VK_SYSTEM_ALLOCATION_SCOPE_COMMAND
        VK_SYSTEM_ALLOCATION_SCOPE_END_RANGE = VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE
        VK_SYSTEM_ALLOCATION_SCOPE_RANGE_SIZE = (VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE - VK_SYSTEM_ALLOCATION_SCOPE_COMMAND + 1)
        VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkInternalAllocationType:
        VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0
        VK_INTERNAL_ALLOCATION_TYPE_BEGIN_RANGE = VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE
        VK_INTERNAL_ALLOCATION_TYPE_END_RANGE = VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE
        VK_INTERNAL_ALLOCATION_TYPE_RANGE_SIZE = (VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE - VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE + 1)
        VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkFormat:
        VK_FORMAT_UNDEFINED = 0
        VK_FORMAT_R4G4_UNORM_PACK8 = 1
        VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2
        VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3
        VK_FORMAT_R5G6B5_UNORM_PACK16 = 4
        VK_FORMAT_B5G6R5_UNORM_PACK16 = 5
        VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6
        VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7
        VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8
        VK_FORMAT_R8_UNORM = 9
        VK_FORMAT_R8_SNORM = 10
        VK_FORMAT_R8_USCALED = 11
        VK_FORMAT_R8_SSCALED = 12
        VK_FORMAT_R8_UINT = 13
        VK_FORMAT_R8_SINT = 14
        VK_FORMAT_R8_SRGB = 15
        VK_FORMAT_R8G8_UNORM = 16
        VK_FORMAT_R8G8_SNORM = 17
        VK_FORMAT_R8G8_USCALED = 18
        VK_FORMAT_R8G8_SSCALED = 19
        VK_FORMAT_R8G8_UINT = 20
        VK_FORMAT_R8G8_SINT = 21
        VK_FORMAT_R8G8_SRGB = 22
        VK_FORMAT_R8G8B8_UNORM = 23
        VK_FORMAT_R8G8B8_SNORM = 24
        VK_FORMAT_R8G8B8_USCALED = 25
        VK_FORMAT_R8G8B8_SSCALED = 26
        VK_FORMAT_R8G8B8_UINT = 27
        VK_FORMAT_R8G8B8_SINT = 28
        VK_FORMAT_R8G8B8_SRGB = 29
        VK_FORMAT_B8G8R8_UNORM = 30
        VK_FORMAT_B8G8R8_SNORM = 31
        VK_FORMAT_B8G8R8_USCALED = 32
        VK_FORMAT_B8G8R8_SSCALED = 33
        VK_FORMAT_B8G8R8_UINT = 34
        VK_FORMAT_B8G8R8_SINT = 35
        VK_FORMAT_B8G8R8_SRGB = 36
        VK_FORMAT_R8G8B8A8_UNORM = 37
        VK_FORMAT_R8G8B8A8_SNORM = 38
        VK_FORMAT_R8G8B8A8_USCALED = 39
        VK_FORMAT_R8G8B8A8_SSCALED = 40
        VK_FORMAT_R8G8B8A8_UINT = 41
        VK_FORMAT_R8G8B8A8_SINT = 42
        VK_FORMAT_R8G8B8A8_SRGB = 43
        VK_FORMAT_B8G8R8A8_UNORM = 44
        VK_FORMAT_B8G8R8A8_SNORM = 45
        VK_FORMAT_B8G8R8A8_USCALED = 46
        VK_FORMAT_B8G8R8A8_SSCALED = 47
        VK_FORMAT_B8G8R8A8_UINT = 48
        VK_FORMAT_B8G8R8A8_SINT = 49
        VK_FORMAT_B8G8R8A8_SRGB = 50
        VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51
        VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52
        VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53
        VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54
        VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55
        VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56
        VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57
        VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58
        VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59
        VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60
        VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61
        VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62
        VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63
        VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64
        VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65
        VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66
        VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67
        VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68
        VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69
        VK_FORMAT_R16_UNORM = 70
        VK_FORMAT_R16_SNORM = 71
        VK_FORMAT_R16_USCALED = 72
        VK_FORMAT_R16_SSCALED = 73
        VK_FORMAT_R16_UINT = 74
        VK_FORMAT_R16_SINT = 75
        VK_FORMAT_R16_SFLOAT = 76
        VK_FORMAT_R16G16_UNORM = 77
        VK_FORMAT_R16G16_SNORM = 78
        VK_FORMAT_R16G16_USCALED = 79
        VK_FORMAT_R16G16_SSCALED = 80
        VK_FORMAT_R16G16_UINT = 81
        VK_FORMAT_R16G16_SINT = 82
        VK_FORMAT_R16G16_SFLOAT = 83
        VK_FORMAT_R16G16B16_UNORM = 84
        VK_FORMAT_R16G16B16_SNORM = 85
        VK_FORMAT_R16G16B16_USCALED = 86
        VK_FORMAT_R16G16B16_SSCALED = 87
        VK_FORMAT_R16G16B16_UINT = 88
        VK_FORMAT_R16G16B16_SINT = 89
        VK_FORMAT_R16G16B16_SFLOAT = 90
        VK_FORMAT_R16G16B16A16_UNORM = 91
        VK_FORMAT_R16G16B16A16_SNORM = 92
        VK_FORMAT_R16G16B16A16_USCALED = 93
        VK_FORMAT_R16G16B16A16_SSCALED = 94
        VK_FORMAT_R16G16B16A16_UINT = 95
        VK_FORMAT_R16G16B16A16_SINT = 96
        VK_FORMAT_R16G16B16A16_SFLOAT = 97
        VK_FORMAT_R32_UINT = 98
        VK_FORMAT_R32_SINT = 99
        VK_FORMAT_R32_SFLOAT = 100
        VK_FORMAT_R32G32_UINT = 101
        VK_FORMAT_R32G32_SINT = 102
        VK_FORMAT_R32G32_SFLOAT = 103
        VK_FORMAT_R32G32B32_UINT = 104
        VK_FORMAT_R32G32B32_SINT = 105
        VK_FORMAT_R32G32B32_SFLOAT = 106
        VK_FORMAT_R32G32B32A32_UINT = 107
        VK_FORMAT_R32G32B32A32_SINT = 108
        VK_FORMAT_R32G32B32A32_SFLOAT = 109
        VK_FORMAT_R64_UINT = 110
        VK_FORMAT_R64_SINT = 111
        VK_FORMAT_R64_SFLOAT = 112
        VK_FORMAT_R64G64_UINT = 113
        VK_FORMAT_R64G64_SINT = 114
        VK_FORMAT_R64G64_SFLOAT = 115
        VK_FORMAT_R64G64B64_UINT = 116
        VK_FORMAT_R64G64B64_SINT = 117
        VK_FORMAT_R64G64B64_SFLOAT = 118
        VK_FORMAT_R64G64B64A64_UINT = 119
        VK_FORMAT_R64G64B64A64_SINT = 120
        VK_FORMAT_R64G64B64A64_SFLOAT = 121
        VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122
        VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123
        VK_FORMAT_D16_UNORM = 124
        VK_FORMAT_X8_D24_UNORM_PACK32 = 125
        VK_FORMAT_D32_SFLOAT = 126
        VK_FORMAT_S8_UINT = 127
        VK_FORMAT_D16_UNORM_S8_UINT = 128
        VK_FORMAT_D24_UNORM_S8_UINT = 129
        VK_FORMAT_D32_SFLOAT_S8_UINT = 130
        VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131
        VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132
        VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133
        VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134
        VK_FORMAT_BC2_UNORM_BLOCK = 135
        VK_FORMAT_BC2_SRGB_BLOCK = 136
        VK_FORMAT_BC3_UNORM_BLOCK = 137
        VK_FORMAT_BC3_SRGB_BLOCK = 138
        VK_FORMAT_BC4_UNORM_BLOCK = 139
        VK_FORMAT_BC4_SNORM_BLOCK = 140
        VK_FORMAT_BC5_UNORM_BLOCK = 141
        VK_FORMAT_BC5_SNORM_BLOCK = 142
        VK_FORMAT_BC6H_UFLOAT_BLOCK = 143
        VK_FORMAT_BC6H_SFLOAT_BLOCK = 144
        VK_FORMAT_BC7_UNORM_BLOCK = 145
        VK_FORMAT_BC7_SRGB_BLOCK = 146
        VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147
        VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148
        VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149
        VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150
        VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151
        VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152
        VK_FORMAT_EAC_R11_UNORM_BLOCK = 153
        VK_FORMAT_EAC_R11_SNORM_BLOCK = 154
        VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155
        VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156
        VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157
        VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158
        VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159
        VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160
        VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161
        VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162
        VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163
        VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164
        VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165
        VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166
        VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167
        VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168
        VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169
        VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170
        VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171
        VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172
        VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173
        VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174
        VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175
        VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176
        VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177
        VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178
        VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179
        VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180
        VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181
        VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182
        VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183
        VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184
        VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000
        VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001
        VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002
        VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003
        VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004
        VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005
        VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006
        VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007
        VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008
        VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009
        VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010
        VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011
        VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012
        VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013
        VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014
        VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015
        VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016
        VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017
        VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018
        VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019
        VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020
        VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021
        VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022
        VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023
        VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024
        VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025
        VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026
        VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027
        VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028
        VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029
        VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030
        VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031
        VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032
        VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033
        VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000
        VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001
        VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002
        VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003
        VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004
        VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005
        VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006
        VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007
        VK_FORMAT_G8B8G8R8_422_UNORM_KHR = VK_FORMAT_G8B8G8R8_422_UNORM
        VK_FORMAT_B8G8R8G8_422_UNORM_KHR = VK_FORMAT_B8G8R8G8_422_UNORM
        VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM
        VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM
        VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM
        VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_422_UNORM
        VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM
        VK_FORMAT_R10X6_UNORM_PACK16_KHR = VK_FORMAT_R10X6_UNORM_PACK16
        VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = VK_FORMAT_R10X6G10X6_UNORM_2PACK16
        VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16
        VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16
        VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16
        VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16
        VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16
        VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16
        VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16
        VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16
        VK_FORMAT_R12X4_UNORM_PACK16_KHR = VK_FORMAT_R12X4_UNORM_PACK16
        VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = VK_FORMAT_R12X4G12X4_UNORM_2PACK16
        VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16
        VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16
        VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16
        VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16
        VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16
        VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16
        VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16
        VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16
        VK_FORMAT_G16B16G16R16_422_UNORM_KHR = VK_FORMAT_G16B16G16R16_422_UNORM
        VK_FORMAT_B16G16R16G16_422_UNORM_KHR = VK_FORMAT_B16G16R16G16_422_UNORM
        VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM
        VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_420_UNORM
        VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM
        VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_422_UNORM
        VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM
        VK_FORMAT_BEGIN_RANGE = VK_FORMAT_UNDEFINED
        VK_FORMAT_END_RANGE = VK_FORMAT_ASTC_12x12_SRGB_BLOCK
        VK_FORMAT_RANGE_SIZE = (VK_FORMAT_ASTC_12x12_SRGB_BLOCK - VK_FORMAT_UNDEFINED + 1)
        VK_FORMAT_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkImageType:
        VK_IMAGE_TYPE_1D = 0
        VK_IMAGE_TYPE_2D = 1
        VK_IMAGE_TYPE_3D = 2
        VK_IMAGE_TYPE_BEGIN_RANGE = VK_IMAGE_TYPE_1D
        VK_IMAGE_TYPE_END_RANGE = VK_IMAGE_TYPE_3D
        VK_IMAGE_TYPE_RANGE_SIZE = (VK_IMAGE_TYPE_3D - VK_IMAGE_TYPE_1D + 1)
        VK_IMAGE_TYPE_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkImageTiling:
        VK_IMAGE_TILING_OPTIMAL = 0
        VK_IMAGE_TILING_LINEAR = 1
        VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000
        VK_IMAGE_TILING_BEGIN_RANGE = VK_IMAGE_TILING_OPTIMAL
        VK_IMAGE_TILING_END_RANGE = VK_IMAGE_TILING_LINEAR
        VK_IMAGE_TILING_RANGE_SIZE = (VK_IMAGE_TILING_LINEAR - VK_IMAGE_TILING_OPTIMAL + 1)
        VK_IMAGE_TILING_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkPhysicalDeviceType:
        VK_PHYSICAL_DEVICE_TYPE_OTHER = 0
        VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1
        VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2
        VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3
        VK_PHYSICAL_DEVICE_TYPE_CPU = 4
        VK_PHYSICAL_DEVICE_TYPE_BEGIN_RANGE = VK_PHYSICAL_DEVICE_TYPE_OTHER
        VK_PHYSICAL_DEVICE_TYPE_END_RANGE = VK_PHYSICAL_DEVICE_TYPE_CPU
        VK_PHYSICAL_DEVICE_TYPE_RANGE_SIZE = (VK_PHYSICAL_DEVICE_TYPE_CPU - VK_PHYSICAL_DEVICE_TYPE_OTHER + 1)
        VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkQueryType:
        VK_QUERY_TYPE_OCCLUSION = 0
        VK_QUERY_TYPE_PIPELINE_STATISTICS = 1
        VK_QUERY_TYPE_TIMESTAMP = 2
        VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004
        VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000
        VK_QUERY_TYPE_BEGIN_RANGE = VK_QUERY_TYPE_OCCLUSION
        VK_QUERY_TYPE_END_RANGE = VK_QUERY_TYPE_TIMESTAMP
        VK_QUERY_TYPE_RANGE_SIZE = (VK_QUERY_TYPE_TIMESTAMP - VK_QUERY_TYPE_OCCLUSION + 1)
        VK_QUERY_TYPE_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkSharingMode:
        VK_SHARING_MODE_EXCLUSIVE = 0
        VK_SHARING_MODE_CONCURRENT = 1
        VK_SHARING_MODE_BEGIN_RANGE = VK_SHARING_MODE_EXCLUSIVE
        VK_SHARING_MODE_END_RANGE = VK_SHARING_MODE_CONCURRENT
        VK_SHARING_MODE_RANGE_SIZE = (VK_SHARING_MODE_CONCURRENT - VK_SHARING_MODE_EXCLUSIVE + 1)
        VK_SHARING_MODE_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkImageLayout:
        VK_IMAGE_LAYOUT_UNDEFINED = 0
        VK_IMAGE_LAYOUT_GENERAL = 1
        VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2
        VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3
        VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4
        VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5
        VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6
        VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7
        VK_IMAGE_LAYOUT_PREINITIALIZED = 8
        VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000
        VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001
        VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002
        VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000
        VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003
        VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000
        VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL
        VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL
        VK_IMAGE_LAYOUT_BEGIN_RANGE = VK_IMAGE_LAYOUT_UNDEFINED
        VK_IMAGE_LAYOUT_END_RANGE = VK_IMAGE_LAYOUT_PREINITIALIZED
        VK_IMAGE_LAYOUT_RANGE_SIZE = (VK_IMAGE_LAYOUT_PREINITIALIZED - VK_IMAGE_LAYOUT_UNDEFINED + 1)
        VK_IMAGE_LAYOUT_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkImageViewType:
        VK_IMAGE_VIEW_TYPE_1D = 0
        VK_IMAGE_VIEW_TYPE_2D = 1
        VK_IMAGE_VIEW_TYPE_3D = 2
        VK_IMAGE_VIEW_TYPE_CUBE = 3
        VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4
        VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5
        VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6
        VK_IMAGE_VIEW_TYPE_BEGIN_RANGE = VK_IMAGE_VIEW_TYPE_1D
        VK_IMAGE_VIEW_TYPE_END_RANGE = VK_IMAGE_VIEW_TYPE_CUBE_ARRAY
        VK_IMAGE_VIEW_TYPE_RANGE_SIZE = (VK_IMAGE_VIEW_TYPE_CUBE_ARRAY - VK_IMAGE_VIEW_TYPE_1D + 1)
        VK_IMAGE_VIEW_TYPE_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkComponentSwizzle:
        VK_COMPONENT_SWIZZLE_IDENTITY = 0
        VK_COMPONENT_SWIZZLE_ZERO = 1
        VK_COMPONENT_SWIZZLE_ONE = 2
        VK_COMPONENT_SWIZZLE_R = 3
        VK_COMPONENT_SWIZZLE_G = 4
        VK_COMPONENT_SWIZZLE_B = 5
        VK_COMPONENT_SWIZZLE_A = 6
        VK_COMPONENT_SWIZZLE_BEGIN_RANGE = VK_COMPONENT_SWIZZLE_IDENTITY
        VK_COMPONENT_SWIZZLE_END_RANGE = VK_COMPONENT_SWIZZLE_A
        VK_COMPONENT_SWIZZLE_RANGE_SIZE = (VK_COMPONENT_SWIZZLE_A - VK_COMPONENT_SWIZZLE_IDENTITY + 1)
        VK_COMPONENT_SWIZZLE_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkVertexInputRate:
        VK_VERTEX_INPUT_RATE_VERTEX = 0
        VK_VERTEX_INPUT_RATE_INSTANCE = 1
        VK_VERTEX_INPUT_RATE_BEGIN_RANGE = VK_VERTEX_INPUT_RATE_VERTEX
        VK_VERTEX_INPUT_RATE_END_RANGE = VK_VERTEX_INPUT_RATE_INSTANCE
        VK_VERTEX_INPUT_RATE_RANGE_SIZE = (VK_VERTEX_INPUT_RATE_INSTANCE - VK_VERTEX_INPUT_RATE_VERTEX + 1)
        VK_VERTEX_INPUT_RATE_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkPrimitiveTopology:
        VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0
        VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1
        VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2
        VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3
        VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4
        VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5
        VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6
        VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7
        VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8
        VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9
        VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10
        VK_PRIMITIVE_TOPOLOGY_BEGIN_RANGE = VK_PRIMITIVE_TOPOLOGY_POINT_LIST
        VK_PRIMITIVE_TOPOLOGY_END_RANGE = VK_PRIMITIVE_TOPOLOGY_PATCH_LIST
        VK_PRIMITIVE_TOPOLOGY_RANGE_SIZE = (VK_PRIMITIVE_TOPOLOGY_PATCH_LIST - VK_PRIMITIVE_TOPOLOGY_POINT_LIST + 1)
        VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkPolygonMode:
        VK_POLYGON_MODE_FILL = 0
        VK_POLYGON_MODE_LINE = 1
        VK_POLYGON_MODE_POINT = 2
        VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000
        VK_POLYGON_MODE_BEGIN_RANGE = VK_POLYGON_MODE_FILL
        VK_POLYGON_MODE_END_RANGE = VK_POLYGON_MODE_POINT
        VK_POLYGON_MODE_RANGE_SIZE = (VK_POLYGON_MODE_POINT - VK_POLYGON_MODE_FILL + 1)
        VK_POLYGON_MODE_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkFrontFace:
        VK_FRONT_FACE_COUNTER_CLOCKWISE = 0
        VK_FRONT_FACE_CLOCKWISE = 1
        VK_FRONT_FACE_BEGIN_RANGE = VK_FRONT_FACE_COUNTER_CLOCKWISE
        VK_FRONT_FACE_END_RANGE = VK_FRONT_FACE_CLOCKWISE
        VK_FRONT_FACE_RANGE_SIZE = (VK_FRONT_FACE_CLOCKWISE - VK_FRONT_FACE_COUNTER_CLOCKWISE + 1)
        VK_FRONT_FACE_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkCompareOp:
        VK_COMPARE_OP_NEVER = 0
        VK_COMPARE_OP_LESS = 1
        VK_COMPARE_OP_EQUAL = 2
        VK_COMPARE_OP_LESS_OR_EQUAL = 3
        VK_COMPARE_OP_GREATER = 4
        VK_COMPARE_OP_NOT_EQUAL = 5
        VK_COMPARE_OP_GREATER_OR_EQUAL = 6
        VK_COMPARE_OP_ALWAYS = 7
        VK_COMPARE_OP_BEGIN_RANGE = VK_COMPARE_OP_NEVER
        VK_COMPARE_OP_END_RANGE = VK_COMPARE_OP_ALWAYS
        VK_COMPARE_OP_RANGE_SIZE = (VK_COMPARE_OP_ALWAYS - VK_COMPARE_OP_NEVER + 1)
        VK_COMPARE_OP_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkStencilOp:
        VK_STENCIL_OP_KEEP = 0
        VK_STENCIL_OP_ZERO = 1
        VK_STENCIL_OP_REPLACE = 2
        VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3
        VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4
        VK_STENCIL_OP_INVERT = 5
        VK_STENCIL_OP_INCREMENT_AND_WRAP = 6
        VK_STENCIL_OP_DECREMENT_AND_WRAP = 7
        VK_STENCIL_OP_BEGIN_RANGE = VK_STENCIL_OP_KEEP
        VK_STENCIL_OP_END_RANGE = VK_STENCIL_OP_DECREMENT_AND_WRAP
        VK_STENCIL_OP_RANGE_SIZE = (VK_STENCIL_OP_DECREMENT_AND_WRAP - VK_STENCIL_OP_KEEP + 1)
        VK_STENCIL_OP_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkLogicOp:
        VK_LOGIC_OP_CLEAR = 0
        VK_LOGIC_OP_AND = 1
        VK_LOGIC_OP_AND_REVERSE = 2
        VK_LOGIC_OP_COPY = 3
        VK_LOGIC_OP_AND_INVERTED = 4
        VK_LOGIC_OP_NO_OP = 5
        VK_LOGIC_OP_XOR = 6
        VK_LOGIC_OP_OR = 7
        VK_LOGIC_OP_NOR = 8
        VK_LOGIC_OP_EQUIVALENT = 9
        VK_LOGIC_OP_INVERT = 10
        VK_LOGIC_OP_OR_REVERSE = 11
        VK_LOGIC_OP_COPY_INVERTED = 12
        VK_LOGIC_OP_OR_INVERTED = 13
        VK_LOGIC_OP_NAND = 14
        VK_LOGIC_OP_SET = 15
        VK_LOGIC_OP_BEGIN_RANGE = VK_LOGIC_OP_CLEAR
        VK_LOGIC_OP_END_RANGE = VK_LOGIC_OP_SET
        VK_LOGIC_OP_RANGE_SIZE = (VK_LOGIC_OP_SET - VK_LOGIC_OP_CLEAR + 1)
        VK_LOGIC_OP_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkBlendFactor:
        VK_BLEND_FACTOR_ZERO = 0
        VK_BLEND_FACTOR_ONE = 1
        VK_BLEND_FACTOR_SRC_COLOR = 2
        VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3
        VK_BLEND_FACTOR_DST_COLOR = 4
        VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5
        VK_BLEND_FACTOR_SRC_ALPHA = 6
        VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7
        VK_BLEND_FACTOR_DST_ALPHA = 8
        VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9
        VK_BLEND_FACTOR_CONSTANT_COLOR = 10
        VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11
        VK_BLEND_FACTOR_CONSTANT_ALPHA = 12
        VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13
        VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14
        VK_BLEND_FACTOR_SRC1_COLOR = 15
        VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16
        VK_BLEND_FACTOR_SRC1_ALPHA = 17
        VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18
        VK_BLEND_FACTOR_BEGIN_RANGE = VK_BLEND_FACTOR_ZERO
        VK_BLEND_FACTOR_END_RANGE = VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA
        VK_BLEND_FACTOR_RANGE_SIZE = (VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA - VK_BLEND_FACTOR_ZERO + 1)
        VK_BLEND_FACTOR_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkBlendOp:
        VK_BLEND_OP_ADD = 0
        VK_BLEND_OP_SUBTRACT = 1
        VK_BLEND_OP_REVERSE_SUBTRACT = 2
        VK_BLEND_OP_MIN = 3
        VK_BLEND_OP_MAX = 4
        VK_BLEND_OP_ZERO_EXT = 1000148000
        VK_BLEND_OP_SRC_EXT = 1000148001
        VK_BLEND_OP_DST_EXT = 1000148002
        VK_BLEND_OP_SRC_OVER_EXT = 1000148003
        VK_BLEND_OP_DST_OVER_EXT = 1000148004
        VK_BLEND_OP_SRC_IN_EXT = 1000148005
        VK_BLEND_OP_DST_IN_EXT = 1000148006
        VK_BLEND_OP_SRC_OUT_EXT = 1000148007
        VK_BLEND_OP_DST_OUT_EXT = 1000148008
        VK_BLEND_OP_SRC_ATOP_EXT = 1000148009
        VK_BLEND_OP_DST_ATOP_EXT = 1000148010
        VK_BLEND_OP_XOR_EXT = 1000148011
        VK_BLEND_OP_MULTIPLY_EXT = 1000148012
        VK_BLEND_OP_SCREEN_EXT = 1000148013
        VK_BLEND_OP_OVERLAY_EXT = 1000148014
        VK_BLEND_OP_DARKEN_EXT = 1000148015
        VK_BLEND_OP_LIGHTEN_EXT = 1000148016
        VK_BLEND_OP_COLORDODGE_EXT = 1000148017
        VK_BLEND_OP_COLORBURN_EXT = 1000148018
        VK_BLEND_OP_HARDLIGHT_EXT = 1000148019
        VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020
        VK_BLEND_OP_DIFFERENCE_EXT = 1000148021
        VK_BLEND_OP_EXCLUSION_EXT = 1000148022
        VK_BLEND_OP_INVERT_EXT = 1000148023
        VK_BLEND_OP_INVERT_RGB_EXT = 1000148024
        VK_BLEND_OP_LINEARDODGE_EXT = 1000148025
        VK_BLEND_OP_LINEARBURN_EXT = 1000148026
        VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027
        VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028
        VK_BLEND_OP_PINLIGHT_EXT = 1000148029
        VK_BLEND_OP_HARDMIX_EXT = 1000148030
        VK_BLEND_OP_HSL_HUE_EXT = 1000148031
        VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032
        VK_BLEND_OP_HSL_COLOR_EXT = 1000148033
        VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034
        VK_BLEND_OP_PLUS_EXT = 1000148035
        VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036
        VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037
        VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038
        VK_BLEND_OP_MINUS_EXT = 1000148039
        VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040
        VK_BLEND_OP_CONTRAST_EXT = 1000148041
        VK_BLEND_OP_INVERT_OVG_EXT = 1000148042
        VK_BLEND_OP_RED_EXT = 1000148043
        VK_BLEND_OP_GREEN_EXT = 1000148044
        VK_BLEND_OP_BLUE_EXT = 1000148045
        VK_BLEND_OP_BEGIN_RANGE = VK_BLEND_OP_ADD
        VK_BLEND_OP_END_RANGE = VK_BLEND_OP_MAX
        VK_BLEND_OP_RANGE_SIZE = (VK_BLEND_OP_MAX - VK_BLEND_OP_ADD + 1)
        VK_BLEND_OP_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkDynamicState:
        VK_DYNAMIC_STATE_VIEWPORT = 0
        VK_DYNAMIC_STATE_SCISSOR = 1
        VK_DYNAMIC_STATE_LINE_WIDTH = 2
        VK_DYNAMIC_STATE_DEPTH_BIAS = 3
        VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4
        VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5
        VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6
        VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7
        VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8
        VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000
        VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000
        VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000
        VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004
        VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006
        VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001
        VK_DYNAMIC_STATE_BEGIN_RANGE = VK_DYNAMIC_STATE_VIEWPORT
        VK_DYNAMIC_STATE_END_RANGE = VK_DYNAMIC_STATE_STENCIL_REFERENCE
        VK_DYNAMIC_STATE_RANGE_SIZE = (VK_DYNAMIC_STATE_STENCIL_REFERENCE - VK_DYNAMIC_STATE_VIEWPORT + 1)
        VK_DYNAMIC_STATE_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkFilter:
        VK_FILTER_NEAREST = 0
        VK_FILTER_LINEAR = 1
        VK_FILTER_CUBIC_EXT = 1000015000
        VK_FILTER_BEGIN_RANGE = VK_FILTER_NEAREST
        VK_FILTER_END_RANGE = VK_FILTER_LINEAR
        VK_FILTER_RANGE_SIZE = (VK_FILTER_LINEAR - VK_FILTER_NEAREST + 1)
        VK_FILTER_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkSamplerMipmapMode:
        VK_SAMPLER_MIPMAP_MODE_NEAREST = 0
        VK_SAMPLER_MIPMAP_MODE_LINEAR = 1
        VK_SAMPLER_MIPMAP_MODE_BEGIN_RANGE = VK_SAMPLER_MIPMAP_MODE_NEAREST
        VK_SAMPLER_MIPMAP_MODE_END_RANGE = VK_SAMPLER_MIPMAP_MODE_LINEAR
        VK_SAMPLER_MIPMAP_MODE_RANGE_SIZE = (VK_SAMPLER_MIPMAP_MODE_LINEAR - VK_SAMPLER_MIPMAP_MODE_NEAREST + 1)
        VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkSamplerAddressMode:
        VK_SAMPLER_ADDRESS_MODE_REPEAT = 0
        VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1
        VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2
        VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3
        VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4
        VK_SAMPLER_ADDRESS_MODE_BEGIN_RANGE = VK_SAMPLER_ADDRESS_MODE_REPEAT
        VK_SAMPLER_ADDRESS_MODE_END_RANGE = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER
        VK_SAMPLER_ADDRESS_MODE_RANGE_SIZE = (VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER - VK_SAMPLER_ADDRESS_MODE_REPEAT + 1)
        VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkBorderColor:
        VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0
        VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1
        VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2
        VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3
        VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4
        VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5
        VK_BORDER_COLOR_BEGIN_RANGE = VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK
        VK_BORDER_COLOR_END_RANGE = VK_BORDER_COLOR_INT_OPAQUE_WHITE
        VK_BORDER_COLOR_RANGE_SIZE = (VK_BORDER_COLOR_INT_OPAQUE_WHITE - VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK + 1)
        VK_BORDER_COLOR_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkDescriptorType:
        VK_DESCRIPTOR_TYPE_SAMPLER = 0
        VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1
        VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2
        VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3
        VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4
        VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5
        VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6
        VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7
        VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8
        VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9
        VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10
        VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000
        VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000
        VK_DESCRIPTOR_TYPE_BEGIN_RANGE = VK_DESCRIPTOR_TYPE_SAMPLER
        VK_DESCRIPTOR_TYPE_END_RANGE = VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT
        VK_DESCRIPTOR_TYPE_RANGE_SIZE = (VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT - VK_DESCRIPTOR_TYPE_SAMPLER + 1)
        VK_DESCRIPTOR_TYPE_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkAttachmentLoadOp:
        VK_ATTACHMENT_LOAD_OP_LOAD = 0
        VK_ATTACHMENT_LOAD_OP_CLEAR = 1
        VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2
        VK_ATTACHMENT_LOAD_OP_BEGIN_RANGE = VK_ATTACHMENT_LOAD_OP_LOAD
        VK_ATTACHMENT_LOAD_OP_END_RANGE = VK_ATTACHMENT_LOAD_OP_DONT_CARE
        VK_ATTACHMENT_LOAD_OP_RANGE_SIZE = (VK_ATTACHMENT_LOAD_OP_DONT_CARE - VK_ATTACHMENT_LOAD_OP_LOAD + 1)
        VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkAttachmentStoreOp:
        VK_ATTACHMENT_STORE_OP_STORE = 0
        VK_ATTACHMENT_STORE_OP_DONT_CARE = 1
        VK_ATTACHMENT_STORE_OP_BEGIN_RANGE = VK_ATTACHMENT_STORE_OP_STORE
        VK_ATTACHMENT_STORE_OP_END_RANGE = VK_ATTACHMENT_STORE_OP_DONT_CARE
        VK_ATTACHMENT_STORE_OP_RANGE_SIZE = (VK_ATTACHMENT_STORE_OP_DONT_CARE - VK_ATTACHMENT_STORE_OP_STORE + 1)
        VK_ATTACHMENT_STORE_OP_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkPipelineBindPoint:
        VK_PIPELINE_BIND_POINT_GRAPHICS = 0
        VK_PIPELINE_BIND_POINT_COMPUTE = 1
        VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = 1000165000
        VK_PIPELINE_BIND_POINT_BEGIN_RANGE = VK_PIPELINE_BIND_POINT_GRAPHICS
        VK_PIPELINE_BIND_POINT_END_RANGE = VK_PIPELINE_BIND_POINT_COMPUTE
        VK_PIPELINE_BIND_POINT_RANGE_SIZE = (VK_PIPELINE_BIND_POINT_COMPUTE - VK_PIPELINE_BIND_POINT_GRAPHICS + 1)
        VK_PIPELINE_BIND_POINT_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkCommandBufferLevel:
        VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0
        VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1
        VK_COMMAND_BUFFER_LEVEL_BEGIN_RANGE = VK_COMMAND_BUFFER_LEVEL_PRIMARY
        VK_COMMAND_BUFFER_LEVEL_END_RANGE = VK_COMMAND_BUFFER_LEVEL_SECONDARY
        VK_COMMAND_BUFFER_LEVEL_RANGE_SIZE = (VK_COMMAND_BUFFER_LEVEL_SECONDARY - VK_COMMAND_BUFFER_LEVEL_PRIMARY + 1)
        VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkIndexType:
        VK_INDEX_TYPE_UINT16 = 0
        VK_INDEX_TYPE_UINT32 = 1
        VK_INDEX_TYPE_NONE_NV = 1000165000
        VK_INDEX_TYPE_BEGIN_RANGE = VK_INDEX_TYPE_UINT16
        VK_INDEX_TYPE_END_RANGE = VK_INDEX_TYPE_UINT32
        VK_INDEX_TYPE_RANGE_SIZE = (VK_INDEX_TYPE_UINT32 - VK_INDEX_TYPE_UINT16 + 1)
        VK_INDEX_TYPE_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkSubpassContents:
        VK_SUBPASS_CONTENTS_INLINE = 0
        VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1
        VK_SUBPASS_CONTENTS_BEGIN_RANGE = VK_SUBPASS_CONTENTS_INLINE
        VK_SUBPASS_CONTENTS_END_RANGE = VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS
        VK_SUBPASS_CONTENTS_RANGE_SIZE = (VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS - VK_SUBPASS_CONTENTS_INLINE + 1)
        VK_SUBPASS_CONTENTS_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkObjectType:
        VK_OBJECT_TYPE_UNKNOWN = 0
        VK_OBJECT_TYPE_INSTANCE = 1
        VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2
        VK_OBJECT_TYPE_DEVICE = 3
        VK_OBJECT_TYPE_QUEUE = 4
        VK_OBJECT_TYPE_SEMAPHORE = 5
        VK_OBJECT_TYPE_COMMAND_BUFFER = 6
        VK_OBJECT_TYPE_FENCE = 7
        VK_OBJECT_TYPE_DEVICE_MEMORY = 8
        VK_OBJECT_TYPE_BUFFER = 9
        VK_OBJECT_TYPE_IMAGE = 10
        VK_OBJECT_TYPE_EVENT = 11
        VK_OBJECT_TYPE_QUERY_POOL = 12
        VK_OBJECT_TYPE_BUFFER_VIEW = 13
        VK_OBJECT_TYPE_IMAGE_VIEW = 14
        VK_OBJECT_TYPE_SHADER_MODULE = 15
        VK_OBJECT_TYPE_PIPELINE_CACHE = 16
        VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17
        VK_OBJECT_TYPE_RENDER_PASS = 18
        VK_OBJECT_TYPE_PIPELINE = 19
        VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20
        VK_OBJECT_TYPE_SAMPLER = 21
        VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22
        VK_OBJECT_TYPE_DESCRIPTOR_SET = 23
        VK_OBJECT_TYPE_FRAMEBUFFER = 24
        VK_OBJECT_TYPE_COMMAND_POOL = 25
        VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000
        VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000
        VK_OBJECT_TYPE_SURFACE_KHR = 1000000000
        VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000
        VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000
        VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001
        VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000
        VK_OBJECT_TYPE_OBJECT_TABLE_NVX = 1000086000
        VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX = 1000086001
        VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000
        VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000
        VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000
        VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE
        VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION
        VK_OBJECT_TYPE_BEGIN_RANGE = VK_OBJECT_TYPE_UNKNOWN
        VK_OBJECT_TYPE_END_RANGE = VK_OBJECT_TYPE_COMMAND_POOL
        VK_OBJECT_TYPE_RANGE_SIZE = (VK_OBJECT_TYPE_COMMAND_POOL - VK_OBJECT_TYPE_UNKNOWN + 1)
        VK_OBJECT_TYPE_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkVendorId:
        VK_VENDOR_ID_VIV = 0x10001
        VK_VENDOR_ID_VSI = 0x10002
        VK_VENDOR_ID_KAZAN = 0x10003
        VK_VENDOR_ID_BEGIN_RANGE = VK_VENDOR_ID_VIV
        VK_VENDOR_ID_END_RANGE = VK_VENDOR_ID_KAZAN
        VK_VENDOR_ID_RANGE_SIZE = (VK_VENDOR_ID_KAZAN - VK_VENDOR_ID_VIV + 1)
        VK_VENDOR_ID_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkInstanceCreateFlags;
    cdef enum VkFormatFeatureFlagBits:
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 0x00000001
        VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 0x00000002
        VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 0x00000004
        VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000008
        VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 0x00000010
        VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 0x00000020
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 0x00000040
        VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 0x00000080
        VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 0x00000100
        VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000200
        VK_FORMAT_FEATURE_BLIT_SRC_BIT = 0x00000400
        VK_FORMAT_FEATURE_BLIT_DST_BIT = 0x00000800
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 0x00001000
        VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 0x00004000
        VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 0x00008000
        VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 0x00020000
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 0x00040000
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 0x00080000
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 0x00100000
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 0x00200000
        VK_FORMAT_FEATURE_DISJOINT_BIT = 0x00400000
        VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 0x00800000
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 0x00002000
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = 0x00010000
        VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x01000000
        VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_SRC_BIT
        VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_DST_BIT
        VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT
        VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = VK_FORMAT_FEATURE_DISJOINT_BIT
        VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT
        VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkFormatFeatureFlags;
    cdef enum VkImageUsageFlagBits:
        VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 0x00000001
        VK_IMAGE_USAGE_TRANSFER_DST_BIT = 0x00000002
        VK_IMAGE_USAGE_SAMPLED_BIT = 0x00000004
        VK_IMAGE_USAGE_STORAGE_BIT = 0x00000008
        VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 0x00000010
        VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000020
        VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 0x00000040
        VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 0x00000080
        VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 0x00000100
        VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x00000200
        VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkImageUsageFlags;
    cdef enum VkImageCreateFlagBits:
        VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 0x00000001
        VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002
        VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 0x00000004
        VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 0x00000008
        VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 0x00000010
        VK_IMAGE_CREATE_ALIAS_BIT = 0x00000400
        VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 0x00000040
        VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 0x00000020
        VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 0x00000080
        VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 0x00000100
        VK_IMAGE_CREATE_PROTECTED_BIT = 0x00000800
        VK_IMAGE_CREATE_DISJOINT_BIT = 0x00000200
        VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 0x00002000
        VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 0x00001000
        VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 0x00004000
        VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT
        VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT
        VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT
        VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = VK_IMAGE_CREATE_EXTENDED_USAGE_BIT
        VK_IMAGE_CREATE_DISJOINT_BIT_KHR = VK_IMAGE_CREATE_DISJOINT_BIT
        VK_IMAGE_CREATE_ALIAS_BIT_KHR = VK_IMAGE_CREATE_ALIAS_BIT
        VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkImageCreateFlags;
    cdef enum VkSampleCountFlagBits:
        VK_SAMPLE_COUNT_1_BIT = 0x00000001
        VK_SAMPLE_COUNT_2_BIT = 0x00000002
        VK_SAMPLE_COUNT_4_BIT = 0x00000004
        VK_SAMPLE_COUNT_8_BIT = 0x00000008
        VK_SAMPLE_COUNT_16_BIT = 0x00000010
        VK_SAMPLE_COUNT_32_BIT = 0x00000020
        VK_SAMPLE_COUNT_64_BIT = 0x00000040
        VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkSampleCountFlags;
    cdef enum VkQueueFlagBits:
        VK_QUEUE_GRAPHICS_BIT = 0x00000001
        VK_QUEUE_COMPUTE_BIT = 0x00000002
        VK_QUEUE_TRANSFER_BIT = 0x00000004
        VK_QUEUE_SPARSE_BINDING_BIT = 0x00000008
        VK_QUEUE_PROTECTED_BIT = 0x00000010
        VK_QUEUE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkQueueFlags;
    cdef enum VkMemoryPropertyFlagBits:
        VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 0x00000001
        VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 0x00000002
        VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 0x00000004
        VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 0x00000008
        VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 0x00000010
        VK_MEMORY_PROPERTY_PROTECTED_BIT = 0x00000020
        VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkMemoryPropertyFlags;
    cdef enum VkMemoryHeapFlagBits:
        VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 0x00000001
        VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 0x00000002
        VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = VK_MEMORY_HEAP_MULTI_INSTANCE_BIT
        VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkMemoryHeapFlags;
    ctypedef VkFlags VkDeviceCreateFlags;
    cdef enum VkDeviceQueueCreateFlagBits:
        VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 0x00000001
        VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkDeviceQueueCreateFlags;
    cdef enum VkPipelineStageFlagBits:
        VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 0x00000001
        VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 0x00000002
        VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 0x00000004
        VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 0x00000008
        VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 0x00000010
        VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020
        VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 0x00000040
        VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 0x00000080
        VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 0x00000100
        VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 0x00000200
        VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400
        VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 0x00000800
        VK_PIPELINE_STAGE_TRANSFER_BIT = 0x00001000
        VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 0x00002000
        VK_PIPELINE_STAGE_HOST_BIT = 0x00004000
        VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 0x00008000
        VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 0x00010000
        VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 0x01000000
        VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 0x00040000
        VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX = 0x00020000
        VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 0x00400000
        VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = 0x00200000
        VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 0x02000000
        VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 0x00080000
        VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 0x00100000
        VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 0x00800000
        VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkPipelineStageFlags;
    ctypedef VkFlags VkMemoryMapFlags;
    cdef enum VkImageAspectFlagBits:
        VK_IMAGE_ASPECT_COLOR_BIT = 0x00000001
        VK_IMAGE_ASPECT_DEPTH_BIT = 0x00000002
        VK_IMAGE_ASPECT_STENCIL_BIT = 0x00000004
        VK_IMAGE_ASPECT_METADATA_BIT = 0x00000008
        VK_IMAGE_ASPECT_PLANE_0_BIT = 0x00000010
        VK_IMAGE_ASPECT_PLANE_1_BIT = 0x00000020
        VK_IMAGE_ASPECT_PLANE_2_BIT = 0x00000040
        VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 0x00000080
        VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 0x00000100
        VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 0x00000200
        VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 0x00000400
        VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = VK_IMAGE_ASPECT_PLANE_0_BIT
        VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = VK_IMAGE_ASPECT_PLANE_1_BIT
        VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = VK_IMAGE_ASPECT_PLANE_2_BIT
        VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkImageAspectFlags;
    cdef enum VkSparseImageFormatFlagBits:
        VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 0x00000001
        VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 0x00000002
        VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 0x00000004
        VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkSparseImageFormatFlags;
    cdef enum VkSparseMemoryBindFlagBits:
        VK_SPARSE_MEMORY_BIND_METADATA_BIT = 0x00000001
        VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkSparseMemoryBindFlags;
    cdef enum VkFenceCreateFlagBits:
        VK_FENCE_CREATE_SIGNALED_BIT = 0x00000001
        VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkFenceCreateFlags;
    ctypedef VkFlags VkSemaphoreCreateFlags;
    ctypedef VkFlags VkEventCreateFlags;
    ctypedef VkFlags VkQueryPoolCreateFlags;
    cdef enum VkQueryPipelineStatisticFlagBits:
        VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 0x00000001
        VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 0x00000002
        VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 0x00000004
        VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 0x00000008
        VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 0x00000010
        VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 0x00000020
        VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 0x00000040
        VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 0x00000080
        VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 0x00000100
        VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 0x00000200
        VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 0x00000400
        VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkQueryPipelineStatisticFlags;
    cdef enum VkQueryResultFlagBits:
        VK_QUERY_RESULT_64_BIT = 0x00000001
        VK_QUERY_RESULT_WAIT_BIT = 0x00000002
        VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 0x00000004
        VK_QUERY_RESULT_PARTIAL_BIT = 0x00000008
        VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkQueryResultFlags;
    cdef enum VkBufferCreateFlagBits:
        VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 0x00000001
        VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002
        VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 0x00000004
        VK_BUFFER_CREATE_PROTECTED_BIT = 0x00000008
        VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 0x00000010
        VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkBufferCreateFlags;
    cdef enum VkBufferUsageFlagBits:
        VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 0x00000001
        VK_BUFFER_USAGE_TRANSFER_DST_BIT = 0x00000002
        VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000004
        VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 0x00000008
        VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 0x00000010
        VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 0x00000020
        VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 0x00000040
        VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 0x00000080
        VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 0x00000100
        VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 0x00000800
        VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 0x00001000
        VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 0x00000200
        VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = 0x00000400
        VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = 0x00020000
        VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkBufferUsageFlags;
    ctypedef VkFlags VkBufferViewCreateFlags;
    cdef enum VkImageViewCreateFlagBits:
        VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 0x00000001
        VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkImageViewCreateFlags;
    ctypedef VkFlags VkShaderModuleCreateFlags;
    ctypedef VkFlags VkPipelineCacheCreateFlags;
    cdef enum VkPipelineCreateFlagBits:
        VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 0x00000001
        VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 0x00000002
        VK_PIPELINE_CREATE_DERIVATIVE_BIT = 0x00000004
        VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 0x00000008
        VK_PIPELINE_CREATE_DISPATCH_BASE = 0x00000010
        VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 0x00000020
        VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT
        VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = VK_PIPELINE_CREATE_DISPATCH_BASE
        VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkPipelineCreateFlags;
    ctypedef VkFlags VkPipelineShaderStageCreateFlags;
    cdef enum VkShaderStageFlagBits:
        VK_SHADER_STAGE_VERTEX_BIT = 0x00000001
        VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 0x00000002
        VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004
        VK_SHADER_STAGE_GEOMETRY_BIT = 0x00000008
        VK_SHADER_STAGE_FRAGMENT_BIT = 0x00000010
        VK_SHADER_STAGE_COMPUTE_BIT = 0x00000020
        VK_SHADER_STAGE_ALL_GRAPHICS = 0x0000001F
        VK_SHADER_STAGE_ALL = 0x7FFFFFFF
        VK_SHADER_STAGE_RAYGEN_BIT_NV = 0x00000100
        VK_SHADER_STAGE_ANY_HIT_BIT_NV = 0x00000200
        VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = 0x00000400
        VK_SHADER_STAGE_MISS_BIT_NV = 0x00000800
        VK_SHADER_STAGE_INTERSECTION_BIT_NV = 0x00001000
        VK_SHADER_STAGE_CALLABLE_BIT_NV = 0x00002000
        VK_SHADER_STAGE_TASK_BIT_NV = 0x00000040
        VK_SHADER_STAGE_MESH_BIT_NV = 0x00000080
        VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkPipelineVertexInputStateCreateFlags;
    ctypedef VkFlags VkPipelineInputAssemblyStateCreateFlags;
    ctypedef VkFlags VkPipelineTessellationStateCreateFlags;
    ctypedef VkFlags VkPipelineViewportStateCreateFlags;
    ctypedef VkFlags VkPipelineRasterizationStateCreateFlags;
    cdef enum VkCullModeFlagBits:
        VK_CULL_MODE_NONE = 0
        VK_CULL_MODE_FRONT_BIT = 0x00000001
        VK_CULL_MODE_BACK_BIT = 0x00000002
        VK_CULL_MODE_FRONT_AND_BACK = 0x00000003
        VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkCullModeFlags;
    ctypedef VkFlags VkPipelineMultisampleStateCreateFlags;
    ctypedef VkFlags VkPipelineDepthStencilStateCreateFlags;
    ctypedef VkFlags VkPipelineColorBlendStateCreateFlags;
    cdef enum VkColorComponentFlagBits:
        VK_COLOR_COMPONENT_R_BIT = 0x00000001
        VK_COLOR_COMPONENT_G_BIT = 0x00000002
        VK_COLOR_COMPONENT_B_BIT = 0x00000004
        VK_COLOR_COMPONENT_A_BIT = 0x00000008
        VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkColorComponentFlags;
    ctypedef VkFlags VkPipelineDynamicStateCreateFlags;
    ctypedef VkFlags VkPipelineLayoutCreateFlags;
    ctypedef VkFlags VkShaderStageFlags;
    cdef enum VkSamplerCreateFlagBits:
        VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 0x00000001
        VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 0x00000002
        VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkSamplerCreateFlags;
    cdef enum VkDescriptorSetLayoutCreateFlagBits:
        VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 0x00000001
        VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = 0x00000002
        VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkDescriptorSetLayoutCreateFlags;
    cdef enum VkDescriptorPoolCreateFlagBits:
        VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 0x00000001
        VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = 0x00000002
        VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkDescriptorPoolCreateFlags;
    ctypedef VkFlags VkDescriptorPoolResetFlags;
    ctypedef VkFlags VkFramebufferCreateFlags;
    ctypedef VkFlags VkRenderPassCreateFlags;
    cdef enum VkAttachmentDescriptionFlagBits:
        VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 0x00000001
        VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkAttachmentDescriptionFlags;
    cdef enum VkSubpassDescriptionFlagBits:
        VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 0x00000001
        VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 0x00000002
        VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkSubpassDescriptionFlags;
    cdef enum VkAccessFlagBits:
        VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 0x00000001
        VK_ACCESS_INDEX_READ_BIT = 0x00000002
        VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 0x00000004
        VK_ACCESS_UNIFORM_READ_BIT = 0x00000008
        VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 0x00000010
        VK_ACCESS_SHADER_READ_BIT = 0x00000020
        VK_ACCESS_SHADER_WRITE_BIT = 0x00000040
        VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 0x00000080
        VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 0x00000100
        VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200
        VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400
        VK_ACCESS_TRANSFER_READ_BIT = 0x00000800
        VK_ACCESS_TRANSFER_WRITE_BIT = 0x00001000
        VK_ACCESS_HOST_READ_BIT = 0x00002000
        VK_ACCESS_HOST_WRITE_BIT = 0x00004000
        VK_ACCESS_MEMORY_READ_BIT = 0x00008000
        VK_ACCESS_MEMORY_WRITE_BIT = 0x00010000
        VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 0x02000000
        VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 0x04000000
        VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 0x08000000
        VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 0x00100000
        VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX = 0x00020000
        VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX = 0x00040000
        VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0x00080000
        VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 0x00800000
        VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = 0x00200000
        VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 0x00400000
        VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 0x01000000
        VK_ACCESS_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkAccessFlags;
    cdef enum VkDependencyFlagBits:
        VK_DEPENDENCY_BY_REGION_BIT = 0x00000001
        VK_DEPENDENCY_DEVICE_GROUP_BIT = 0x00000004
        VK_DEPENDENCY_VIEW_LOCAL_BIT = 0x00000002
        VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = VK_DEPENDENCY_VIEW_LOCAL_BIT
        VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = VK_DEPENDENCY_DEVICE_GROUP_BIT
        VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkDependencyFlags;
    cdef enum VkCommandPoolCreateFlagBits:
        VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 0x00000001
        VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 0x00000002
        VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 0x00000004
        VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkCommandPoolCreateFlags;
    cdef enum VkCommandPoolResetFlagBits:
        VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 0x00000001
        VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkCommandPoolResetFlags;
    cdef enum VkCommandBufferUsageFlagBits:
        VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 0x00000001
        VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 0x00000002
        VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 0x00000004
        VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkCommandBufferUsageFlags;
    cdef enum VkQueryControlFlagBits:
        VK_QUERY_CONTROL_PRECISE_BIT = 0x00000001
        VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkQueryControlFlags;
    cdef enum VkCommandBufferResetFlagBits:
        VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 0x00000001
        VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkCommandBufferResetFlags;
    cdef enum VkStencilFaceFlagBits:
        VK_STENCIL_FACE_FRONT_BIT = 0x00000001
        VK_STENCIL_FACE_BACK_BIT = 0x00000002
        VK_STENCIL_FRONT_AND_BACK = 0x00000003
        VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkStencilFaceFlags;
    ctypedef struct VkApplicationInfo:
        VkStructureType sType
        void* pNext
        char* pApplicationName
        uint32_t applicationVersion
        char* pEngineName
        uint32_t engineVersion
        uint32_t apiVersion
    ctypedef struct VkInstanceCreateInfo:
        VkStructureType sType
        void* pNext
        VkInstanceCreateFlags flags
        VkApplicationInfo* pApplicationInfo
        uint32_t enabledLayerCount
        char* * ppEnabledLayerNames
        uint32_t enabledExtensionCount
        char* * ppEnabledExtensionNames
    ctypedef void* ( *PFN_vkAllocationFunction)(
        void* pUserData,
        size_t size,
        size_t alignment,
        VkSystemAllocationScope allocationScope);
    ctypedef void* ( *PFN_vkReallocationFunction)(
        void* pUserData,
        void* pOriginal,
        size_t size,
        size_t alignment,
        VkSystemAllocationScope allocationScope);
    ctypedef void ( *PFN_vkFreeFunction)(
        void* pUserData,
        void* pMemory);
    ctypedef void ( *PFN_vkInternalAllocationNotification)(
        void* pUserData,
        size_t size,
        VkInternalAllocationType allocationType,
        VkSystemAllocationScope allocationScope);
    ctypedef void ( *PFN_vkInternalFreeNotification)(
        void* pUserData,
        size_t size,
        VkInternalAllocationType allocationType,
        VkSystemAllocationScope allocationScope);
    ctypedef struct VkAllocationCallbacks:
        void* pUserData
        PFN_vkAllocationFunction pfnAllocation
        PFN_vkReallocationFunction pfnReallocation
        PFN_vkFreeFunction pfnFree
        PFN_vkInternalAllocationNotification pfnInternalAllocation
        PFN_vkInternalFreeNotification pfnInternalFree
    ctypedef struct VkPhysicalDeviceFeatures:
        VkBool32 robustBufferAccess
        VkBool32 fullDrawIndexUint32
        VkBool32 imageCubeArray
        VkBool32 independentBlend
        VkBool32 geometryShader
        VkBool32 tessellationShader
        VkBool32 sampleRateShading
        VkBool32 dualSrcBlend
        VkBool32 logicOp
        VkBool32 multiDrawIndirect
        VkBool32 drawIndirectFirstInstance
        VkBool32 depthClamp
        VkBool32 depthBiasClamp
        VkBool32 fillModeNonSolid
        VkBool32 depthBounds
        VkBool32 wideLines
        VkBool32 largePoints
        VkBool32 alphaToOne
        VkBool32 multiViewport
        VkBool32 samplerAnisotropy
        VkBool32 textureCompressionETC2
        VkBool32 textureCompressionASTC_LDR
        VkBool32 textureCompressionBC
        VkBool32 occlusionQueryPrecise
        VkBool32 pipelineStatisticsQuery
        VkBool32 vertexPipelineStoresAndAtomics
        VkBool32 fragmentStoresAndAtomics
        VkBool32 shaderTessellationAndGeometryPointSize
        VkBool32 shaderImageGatherExtended
        VkBool32 shaderStorageImageExtendedFormats
        VkBool32 shaderStorageImageMultisample
        VkBool32 shaderStorageImageReadWithoutFormat
        VkBool32 shaderStorageImageWriteWithoutFormat
        VkBool32 shaderUniformBufferArrayDynamicIndexing
        VkBool32 shaderSampledImageArrayDynamicIndexing
        VkBool32 shaderStorageBufferArrayDynamicIndexing
        VkBool32 shaderStorageImageArrayDynamicIndexing
        VkBool32 shaderClipDistance
        VkBool32 shaderCullDistance
        VkBool32 shaderFloat64
        VkBool32 shaderInt64
        VkBool32 shaderInt16
        VkBool32 shaderResourceResidency
        VkBool32 shaderResourceMinLod
        VkBool32 sparseBinding
        VkBool32 sparseResidencyBuffer
        VkBool32 sparseResidencyImage2D
        VkBool32 sparseResidencyImage3D
        VkBool32 sparseResidency2Samples
        VkBool32 sparseResidency4Samples
        VkBool32 sparseResidency8Samples
        VkBool32 sparseResidency16Samples
        VkBool32 sparseResidencyAliased
        VkBool32 variableMultisampleRate
        VkBool32 inheritedQueries
    ctypedef struct VkFormatProperties:
        VkFormatFeatureFlags linearTilingFeatures
        VkFormatFeatureFlags optimalTilingFeatures
        VkFormatFeatureFlags bufferFeatures
    ctypedef struct VkExtent3D:
        uint32_t width
        uint32_t height
        uint32_t depth
    ctypedef struct VkImageFormatProperties:
        VkExtent3D maxExtent
        uint32_t maxMipLevels
        uint32_t maxArrayLayers
        VkSampleCountFlags sampleCounts
        VkDeviceSize maxResourceSize
    ctypedef struct VkPhysicalDeviceLimits:
        uint32_t maxImageDimension1D
        uint32_t maxImageDimension2D
        uint32_t maxImageDimension3D
        uint32_t maxImageDimensionCube
        uint32_t maxImageArrayLayers
        uint32_t maxTexelBufferElements
        uint32_t maxUniformBufferRange
        uint32_t maxStorageBufferRange
        uint32_t maxPushConstantsSize
        uint32_t maxMemoryAllocationCount
        uint32_t maxSamplerAllocationCount
        VkDeviceSize bufferImageGranularity
        VkDeviceSize sparseAddressSpaceSize
        uint32_t maxBoundDescriptorSets
        uint32_t maxPerStageDescriptorSamplers
        uint32_t maxPerStageDescriptorUniformBuffers
        uint32_t maxPerStageDescriptorStorageBuffers
        uint32_t maxPerStageDescriptorSampledImages
        uint32_t maxPerStageDescriptorStorageImages
        uint32_t maxPerStageDescriptorInputAttachments
        uint32_t maxPerStageResources
        uint32_t maxDescriptorSetSamplers
        uint32_t maxDescriptorSetUniformBuffers
        uint32_t maxDescriptorSetUniformBuffersDynamic
        uint32_t maxDescriptorSetStorageBuffers
        uint32_t maxDescriptorSetStorageBuffersDynamic
        uint32_t maxDescriptorSetSampledImages
        uint32_t maxDescriptorSetStorageImages
        uint32_t maxDescriptorSetInputAttachments
        uint32_t maxVertexInputAttributes
        uint32_t maxVertexInputBindings
        uint32_t maxVertexInputAttributeOffset
        uint32_t maxVertexInputBindingStride
        uint32_t maxVertexOutputComponents
        uint32_t maxTessellationGenerationLevel
        uint32_t maxTessellationPatchSize
        uint32_t maxTessellationControlPerVertexInputComponents
        uint32_t maxTessellationControlPerVertexOutputComponents
        uint32_t maxTessellationControlPerPatchOutputComponents
        uint32_t maxTessellationControlTotalOutputComponents
        uint32_t maxTessellationEvaluationInputComponents
        uint32_t maxTessellationEvaluationOutputComponents
        uint32_t maxGeometryShaderInvocations
        uint32_t maxGeometryInputComponents
        uint32_t maxGeometryOutputComponents
        uint32_t maxGeometryOutputVertices
        uint32_t maxGeometryTotalOutputComponents
        uint32_t maxFragmentInputComponents
        uint32_t maxFragmentOutputAttachments
        uint32_t maxFragmentDualSrcAttachments
        uint32_t maxFragmentCombinedOutputResources
        uint32_t maxComputeSharedMemorySize
        uint32_t maxComputeWorkGroupCount[3]
        uint32_t maxComputeWorkGroupInvocations
        uint32_t maxComputeWorkGroupSize[3]
        uint32_t subPixelPrecisionBits
        uint32_t subTexelPrecisionBits
        uint32_t mipmapPrecisionBits
        uint32_t maxDrawIndexedIndexValue
        uint32_t maxDrawIndirectCount
        float maxSamplerLodBias
        float maxSamplerAnisotropy
        uint32_t maxViewports
        uint32_t maxViewportDimensions[2]
        float viewportBoundsRange[2]
        uint32_t viewportSubPixelBits
        size_t minMemoryMapAlignment
        VkDeviceSize minTexelBufferOffsetAlignment
        VkDeviceSize minUniformBufferOffsetAlignment
        VkDeviceSize minStorageBufferOffsetAlignment
        int32_t minTexelOffset
        uint32_t maxTexelOffset
        int32_t minTexelGatherOffset
        uint32_t maxTexelGatherOffset
        float minInterpolationOffset
        float maxInterpolationOffset
        uint32_t subPixelInterpolationOffsetBits
        uint32_t maxFramebufferWidth
        uint32_t maxFramebufferHeight
        uint32_t maxFramebufferLayers
        VkSampleCountFlags framebufferColorSampleCounts
        VkSampleCountFlags framebufferDepthSampleCounts
        VkSampleCountFlags framebufferStencilSampleCounts
        VkSampleCountFlags framebufferNoAttachmentsSampleCounts
        uint32_t maxColorAttachments
        VkSampleCountFlags sampledImageColorSampleCounts
        VkSampleCountFlags sampledImageIntegerSampleCounts
        VkSampleCountFlags sampledImageDepthSampleCounts
        VkSampleCountFlags sampledImageStencilSampleCounts
        VkSampleCountFlags storageImageSampleCounts
        uint32_t maxSampleMaskWords
        VkBool32 timestampComputeAndGraphics
        float timestampPeriod
        uint32_t maxClipDistances
        uint32_t maxCullDistances
        uint32_t maxCombinedClipAndCullDistances
        uint32_t discreteQueuePriorities
        float pointSizeRange[2]
        float lineWidthRange[2]
        float pointSizeGranularity
        float lineWidthGranularity
        VkBool32 strictLines
        VkBool32 standardSampleLocations
        VkDeviceSize optimalBufferCopyOffsetAlignment
        VkDeviceSize optimalBufferCopyRowPitchAlignment
        VkDeviceSize nonCoherentAtomSize
    ctypedef struct VkPhysicalDeviceSparseProperties:
        VkBool32 residencyStandard2DBlockShape
        VkBool32 residencyStandard2DMultisampleBlockShape
        VkBool32 residencyStandard3DBlockShape
        VkBool32 residencyAlignedMipSize
        VkBool32 residencyNonResidentStrict
    ctypedef struct VkPhysicalDeviceProperties:
        uint32_t apiVersion
        uint32_t driverVersion
        uint32_t vendorID
        uint32_t deviceID
        VkPhysicalDeviceType deviceType
        char deviceName[256]
        uint8_t pipelineCacheUUID[16]
        VkPhysicalDeviceLimits limits
        VkPhysicalDeviceSparseProperties sparseProperties
    ctypedef struct VkQueueFamilyProperties:
        VkQueueFlags queueFlags
        uint32_t queueCount
        uint32_t timestampValidBits
        VkExtent3D minImageTransferGranularity
    ctypedef struct VkMemoryType:
        VkMemoryPropertyFlags propertyFlags
        uint32_t heapIndex
    ctypedef struct VkMemoryHeap:
        VkDeviceSize size
        VkMemoryHeapFlags flags
    ctypedef struct VkPhysicalDeviceMemoryProperties:
        uint32_t memoryTypeCount
        VkMemoryType memoryTypes[32]
        uint32_t memoryHeapCount
        VkMemoryHeap memoryHeaps[16]
    ctypedef void ( *PFN_vkVoidFunction)();
    ctypedef struct VkDeviceQueueCreateInfo:
        VkStructureType sType
        void* pNext
        VkDeviceQueueCreateFlags flags
        uint32_t queueFamilyIndex
        uint32_t queueCount
        float* pQueuePriorities
    ctypedef struct VkDeviceCreateInfo:
        VkStructureType sType
        void* pNext
        VkDeviceCreateFlags flags
        uint32_t queueCreateInfoCount
        VkDeviceQueueCreateInfo* pQueueCreateInfos
        uint32_t enabledLayerCount
        char* * ppEnabledLayerNames
        uint32_t enabledExtensionCount
        char* * ppEnabledExtensionNames
        VkPhysicalDeviceFeatures* pEnabledFeatures
    ctypedef struct VkExtensionProperties:
        char extensionName[256]
        uint32_t specVersion
    ctypedef struct VkLayerProperties:
        char layerName[256]
        uint32_t specVersion
        uint32_t implementationVersion
        char description[256]
    ctypedef struct VkSubmitInfo:
        VkStructureType sType
        void* pNext
        uint32_t waitSemaphoreCount
        VkSemaphore* pWaitSemaphores
        VkPipelineStageFlags* pWaitDstStageMask
        uint32_t commandBufferCount
        VkCommandBuffer* pCommandBuffers
        uint32_t signalSemaphoreCount
        VkSemaphore* pSignalSemaphores
    ctypedef struct VkMemoryAllocateInfo:
        VkStructureType sType
        void* pNext
        VkDeviceSize allocationSize
        uint32_t memoryTypeIndex
    ctypedef struct VkMappedMemoryRange:
        VkStructureType sType
        void* pNext
        VkDeviceMemory memory
        VkDeviceSize offset
        VkDeviceSize size
    ctypedef struct VkMemoryRequirements:
        VkDeviceSize size
        VkDeviceSize alignment
        uint32_t memoryTypeBits
    ctypedef struct VkSparseImageFormatProperties:
        VkImageAspectFlags aspectMask
        VkExtent3D imageGranularity
        VkSparseImageFormatFlags flags
    ctypedef struct VkSparseImageMemoryRequirements:
        VkSparseImageFormatProperties formatProperties
        uint32_t imageMipTailFirstLod
        VkDeviceSize imageMipTailSize
        VkDeviceSize imageMipTailOffset
        VkDeviceSize imageMipTailStride
    ctypedef struct VkSparseMemoryBind:
        VkDeviceSize resourceOffset
        VkDeviceSize size
        VkDeviceMemory memory
        VkDeviceSize memoryOffset
        VkSparseMemoryBindFlags flags
    ctypedef struct VkSparseBufferMemoryBindInfo:
        VkBuffer buffer
        uint32_t bindCount
        VkSparseMemoryBind* pBinds
    ctypedef struct VkSparseImageOpaqueMemoryBindInfo:
        VkImage image
        uint32_t bindCount
        VkSparseMemoryBind* pBinds
    ctypedef struct VkImageSubresource:
        VkImageAspectFlags aspectMask
        uint32_t mipLevel
        uint32_t arrayLayer
    ctypedef struct VkOffset3D:
        int32_t x
        int32_t y
        int32_t z
    ctypedef struct VkSparseImageMemoryBind:
        VkImageSubresource subresource
        VkOffset3D offset
        VkExtent3D extent
        VkDeviceMemory memory
        VkDeviceSize memoryOffset
        VkSparseMemoryBindFlags flags
    ctypedef struct VkSparseImageMemoryBindInfo:
        VkImage image
        uint32_t bindCount
        VkSparseImageMemoryBind* pBinds
    ctypedef struct VkBindSparseInfo:
        VkStructureType sType
        void* pNext
        uint32_t waitSemaphoreCount
        VkSemaphore* pWaitSemaphores
        uint32_t bufferBindCount
        VkSparseBufferMemoryBindInfo* pBufferBinds
        uint32_t imageOpaqueBindCount
        VkSparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds
        uint32_t imageBindCount
        VkSparseImageMemoryBindInfo* pImageBinds
        uint32_t signalSemaphoreCount
        VkSemaphore* pSignalSemaphores
    ctypedef struct VkFenceCreateInfo:
        VkStructureType sType
        void* pNext
        VkFenceCreateFlags flags
    ctypedef struct VkSemaphoreCreateInfo:
        VkStructureType sType
        void* pNext
        VkSemaphoreCreateFlags flags
    ctypedef struct VkEventCreateInfo:
        VkStructureType sType
        void* pNext
        VkEventCreateFlags flags
    ctypedef struct VkQueryPoolCreateInfo:
        VkStructureType sType
        void* pNext
        VkQueryPoolCreateFlags flags
        VkQueryType queryType
        uint32_t queryCount
        VkQueryPipelineStatisticFlags pipelineStatistics
    ctypedef struct VkBufferCreateInfo:
        VkStructureType sType
        void* pNext
        VkBufferCreateFlags flags
        VkDeviceSize size
        VkBufferUsageFlags usage
        VkSharingMode sharingMode
        uint32_t queueFamilyIndexCount
        uint32_t* pQueueFamilyIndices
    ctypedef struct VkBufferViewCreateInfo:
        VkStructureType sType
        void* pNext
        VkBufferViewCreateFlags flags
        VkBuffer buffer
        VkFormat format
        VkDeviceSize offset
        VkDeviceSize range
    ctypedef struct VkImageCreateInfo:
        VkStructureType sType
        void* pNext
        VkImageCreateFlags flags
        VkImageType imageType
        VkFormat format
        VkExtent3D extent
        uint32_t mipLevels
        uint32_t arrayLayers
        VkSampleCountFlagBits samples
        VkImageTiling tiling
        VkImageUsageFlags usage
        VkSharingMode sharingMode
        uint32_t queueFamilyIndexCount
        uint32_t* pQueueFamilyIndices
        VkImageLayout initialLayout
    ctypedef struct VkSubresourceLayout:
        VkDeviceSize offset
        VkDeviceSize size
        VkDeviceSize rowPitch
        VkDeviceSize arrayPitch
        VkDeviceSize depthPitch
    ctypedef struct VkComponentMapping:
        VkComponentSwizzle r
        VkComponentSwizzle g
        VkComponentSwizzle b
        VkComponentSwizzle a
    ctypedef struct VkImageSubresourceRange:
        VkImageAspectFlags aspectMask
        uint32_t baseMipLevel
        uint32_t levelCount
        uint32_t baseArrayLayer
        uint32_t layerCount
    ctypedef struct VkImageViewCreateInfo:
        VkStructureType sType
        void* pNext
        VkImageViewCreateFlags flags
        VkImage image
        VkImageViewType viewType
        VkFormat format
        VkComponentMapping components
        VkImageSubresourceRange subresourceRange
    ctypedef struct VkShaderModuleCreateInfo:
        VkStructureType sType
        void* pNext
        VkShaderModuleCreateFlags flags
        size_t codeSize
        uint32_t* pCode
    ctypedef struct VkPipelineCacheCreateInfo:
        VkStructureType sType
        void* pNext
        VkPipelineCacheCreateFlags flags
        size_t initialDataSize
        void* pInitialData
    ctypedef struct VkSpecializationMapEntry:
        uint32_t constantID
        uint32_t offset
        size_t size
    ctypedef struct VkSpecializationInfo:
        uint32_t mapEntryCount
        VkSpecializationMapEntry* pMapEntries
        size_t dataSize
        void* pData
    ctypedef struct VkPipelineShaderStageCreateInfo:
        VkStructureType sType
        void* pNext
        VkPipelineShaderStageCreateFlags flags
        VkShaderStageFlagBits stage
        VkShaderModule module
        char* pName
        VkSpecializationInfo* pSpecializationInfo
    ctypedef struct VkVertexInputBindingDescription:
        uint32_t binding
        uint32_t stride
        VkVertexInputRate inputRate
    ctypedef struct VkVertexInputAttributeDescription:
        uint32_t location
        uint32_t binding
        VkFormat format
        uint32_t offset
    ctypedef struct VkPipelineVertexInputStateCreateInfo:
        VkStructureType sType
        void* pNext
        VkPipelineVertexInputStateCreateFlags flags
        uint32_t vertexBindingDescriptionCount
        VkVertexInputBindingDescription* pVertexBindingDescriptions
        uint32_t vertexAttributeDescriptionCount
        VkVertexInputAttributeDescription* pVertexAttributeDescriptions
    ctypedef struct VkPipelineInputAssemblyStateCreateInfo:
        VkStructureType sType
        void* pNext
        VkPipelineInputAssemblyStateCreateFlags flags
        VkPrimitiveTopology topology
        VkBool32 primitiveRestartEnable
    ctypedef struct VkPipelineTessellationStateCreateInfo:
        VkStructureType sType
        void* pNext
        VkPipelineTessellationStateCreateFlags flags
        uint32_t patchControlPoints
    ctypedef struct VkViewport:
        float x
        float y
        float width
        float height
        float minDepth
        float maxDepth
    ctypedef struct VkOffset2D:
        int32_t x
        int32_t y
    ctypedef struct VkExtent2D:
        uint32_t width
        uint32_t height
    ctypedef struct VkRect2D:
        VkOffset2D offset
        VkExtent2D extent
    ctypedef struct VkPipelineViewportStateCreateInfo:
        VkStructureType sType
        void* pNext
        VkPipelineViewportStateCreateFlags flags
        uint32_t viewportCount
        VkViewport* pViewports
        uint32_t scissorCount
        VkRect2D* pScissors
    ctypedef struct VkPipelineRasterizationStateCreateInfo:
        VkStructureType sType
        void* pNext
        VkPipelineRasterizationStateCreateFlags flags
        VkBool32 depthClampEnable
        VkBool32 rasterizerDiscardEnable
        VkPolygonMode polygonMode
        VkCullModeFlags cullMode
        VkFrontFace frontFace
        VkBool32 depthBiasEnable
        float depthBiasConstantFactor
        float depthBiasClamp
        float depthBiasSlopeFactor
        float lineWidth
    ctypedef struct VkPipelineMultisampleStateCreateInfo:
        VkStructureType sType
        void* pNext
        VkPipelineMultisampleStateCreateFlags flags
        VkSampleCountFlagBits rasterizationSamples
        VkBool32 sampleShadingEnable
        float minSampleShading
        VkSampleMask* pSampleMask
        VkBool32 alphaToCoverageEnable
        VkBool32 alphaToOneEnable
    ctypedef struct VkStencilOpState:
        VkStencilOp failOp
        VkStencilOp passOp
        VkStencilOp depthFailOp
        VkCompareOp compareOp
        uint32_t compareMask
        uint32_t writeMask
        uint32_t reference
    ctypedef struct VkPipelineDepthStencilStateCreateInfo:
        VkStructureType sType
        void* pNext
        VkPipelineDepthStencilStateCreateFlags flags
        VkBool32 depthTestEnable
        VkBool32 depthWriteEnable
        VkCompareOp depthCompareOp
        VkBool32 depthBoundsTestEnable
        VkBool32 stencilTestEnable
        VkStencilOpState front
        VkStencilOpState back
        float minDepthBounds
        float maxDepthBounds
    ctypedef struct VkPipelineColorBlendAttachmentState:
        VkBool32 blendEnable
        VkBlendFactor srcColorBlendFactor
        VkBlendFactor dstColorBlendFactor
        VkBlendOp colorBlendOp
        VkBlendFactor srcAlphaBlendFactor
        VkBlendFactor dstAlphaBlendFactor
        VkBlendOp alphaBlendOp
        VkColorComponentFlags colorWriteMask
    ctypedef struct VkPipelineColorBlendStateCreateInfo:
        VkStructureType sType
        void* pNext
        VkPipelineColorBlendStateCreateFlags flags
        VkBool32 logicOpEnable
        VkLogicOp logicOp
        uint32_t attachmentCount
        VkPipelineColorBlendAttachmentState* pAttachments
        float blendConstants[4]
    ctypedef struct VkPipelineDynamicStateCreateInfo:
        VkStructureType sType
        void* pNext
        VkPipelineDynamicStateCreateFlags flags
        uint32_t dynamicStateCount
        VkDynamicState* pDynamicStates
    ctypedef struct VkGraphicsPipelineCreateInfo:
        VkStructureType sType
        void* pNext
        VkPipelineCreateFlags flags
        uint32_t stageCount
        VkPipelineShaderStageCreateInfo* pStages
        VkPipelineVertexInputStateCreateInfo* pVertexInputState
        VkPipelineInputAssemblyStateCreateInfo* pInputAssemblyState
        VkPipelineTessellationStateCreateInfo* pTessellationState
        VkPipelineViewportStateCreateInfo* pViewportState
        VkPipelineRasterizationStateCreateInfo* pRasterizationState
        VkPipelineMultisampleStateCreateInfo* pMultisampleState
        VkPipelineDepthStencilStateCreateInfo* pDepthStencilState
        VkPipelineColorBlendStateCreateInfo* pColorBlendState
        VkPipelineDynamicStateCreateInfo* pDynamicState
        VkPipelineLayout layout
        VkRenderPass renderPass
        uint32_t subpass
        VkPipeline basePipelineHandle
        int32_t basePipelineIndex
    ctypedef struct VkComputePipelineCreateInfo:
        VkStructureType sType
        void* pNext
        VkPipelineCreateFlags flags
        VkPipelineShaderStageCreateInfo stage
        VkPipelineLayout layout
        VkPipeline basePipelineHandle
        int32_t basePipelineIndex
    ctypedef struct VkPushConstantRange:
        VkShaderStageFlags stageFlags
        uint32_t offset
        uint32_t size
    ctypedef struct VkPipelineLayoutCreateInfo:
        VkStructureType sType
        void* pNext
        VkPipelineLayoutCreateFlags flags
        uint32_t setLayoutCount
        VkDescriptorSetLayout* pSetLayouts
        uint32_t pushConstantRangeCount
        VkPushConstantRange* pPushConstantRanges
    ctypedef struct VkSamplerCreateInfo:
        VkStructureType sType
        void* pNext
        VkSamplerCreateFlags flags
        VkFilter magFilter
        VkFilter minFilter
        VkSamplerMipmapMode mipmapMode
        VkSamplerAddressMode addressModeU
        VkSamplerAddressMode addressModeV
        VkSamplerAddressMode addressModeW
        float mipLodBias
        VkBool32 anisotropyEnable
        float maxAnisotropy
        VkBool32 compareEnable
        VkCompareOp compareOp
        float minLod
        float maxLod
        VkBorderColor borderColor
        VkBool32 unnormalizedCoordinates
    ctypedef struct VkDescriptorSetLayoutBinding:
        uint32_t binding
        VkDescriptorType descriptorType
        uint32_t descriptorCount
        VkShaderStageFlags stageFlags
        VkSampler* pImmutableSamplers
    ctypedef struct VkDescriptorSetLayoutCreateInfo:
        VkStructureType sType
        void* pNext
        VkDescriptorSetLayoutCreateFlags flags
        uint32_t bindingCount
        VkDescriptorSetLayoutBinding* pBindings
    ctypedef struct VkDescriptorPoolSize:
        VkDescriptorType type
        uint32_t descriptorCount
    ctypedef struct VkDescriptorPoolCreateInfo:
        VkStructureType sType
        void* pNext
        VkDescriptorPoolCreateFlags flags
        uint32_t maxSets
        uint32_t poolSizeCount
        VkDescriptorPoolSize* pPoolSizes
    ctypedef struct VkDescriptorSetAllocateInfo:
        VkStructureType sType
        void* pNext
        VkDescriptorPool descriptorPool
        uint32_t descriptorSetCount
        VkDescriptorSetLayout* pSetLayouts
    ctypedef struct VkDescriptorImageInfo:
        VkSampler sampler
        VkImageView imageView
        VkImageLayout imageLayout
    ctypedef struct VkDescriptorBufferInfo:
        VkBuffer buffer
        VkDeviceSize offset
        VkDeviceSize range
    ctypedef struct VkWriteDescriptorSet:
        VkStructureType sType
        void* pNext
        VkDescriptorSet dstSet
        uint32_t dstBinding
        uint32_t dstArrayElement
        uint32_t descriptorCount
        VkDescriptorType descriptorType
        VkDescriptorImageInfo* pImageInfo
        VkDescriptorBufferInfo* pBufferInfo
        VkBufferView* pTexelBufferView
    ctypedef struct VkCopyDescriptorSet:
        VkStructureType sType
        void* pNext
        VkDescriptorSet srcSet
        uint32_t srcBinding
        uint32_t srcArrayElement
        VkDescriptorSet dstSet
        uint32_t dstBinding
        uint32_t dstArrayElement
        uint32_t descriptorCount
    ctypedef struct VkFramebufferCreateInfo:
        VkStructureType sType
        void* pNext
        VkFramebufferCreateFlags flags
        VkRenderPass renderPass
        uint32_t attachmentCount
        VkImageView* pAttachments
        uint32_t width
        uint32_t height
        uint32_t layers
    ctypedef struct VkAttachmentDescription:
        VkAttachmentDescriptionFlags flags
        VkFormat format
        VkSampleCountFlagBits samples
        VkAttachmentLoadOp loadOp
        VkAttachmentStoreOp storeOp
        VkAttachmentLoadOp stencilLoadOp
        VkAttachmentStoreOp stencilStoreOp
        VkImageLayout initialLayout
        VkImageLayout finalLayout
    ctypedef struct VkAttachmentReference:
        uint32_t attachment
        VkImageLayout layout
    ctypedef struct VkSubpassDescription:
        VkSubpassDescriptionFlags flags
        VkPipelineBindPoint pipelineBindPoint
        uint32_t inputAttachmentCount
        VkAttachmentReference* pInputAttachments
        uint32_t colorAttachmentCount
        VkAttachmentReference* pColorAttachments
        VkAttachmentReference* pResolveAttachments
        VkAttachmentReference* pDepthStencilAttachment
        uint32_t preserveAttachmentCount
        uint32_t* pPreserveAttachments
    ctypedef struct VkSubpassDependency:
        uint32_t srcSubpass
        uint32_t dstSubpass
        VkPipelineStageFlags srcStageMask
        VkPipelineStageFlags dstStageMask
        VkAccessFlags srcAccessMask
        VkAccessFlags dstAccessMask
        VkDependencyFlags dependencyFlags
    ctypedef struct VkRenderPassCreateInfo:
        VkStructureType sType
        void* pNext
        VkRenderPassCreateFlags flags
        uint32_t attachmentCount
        VkAttachmentDescription* pAttachments
        uint32_t subpassCount
        VkSubpassDescription* pSubpasses
        uint32_t dependencyCount
        VkSubpassDependency* pDependencies
    ctypedef struct VkCommandPoolCreateInfo:
        VkStructureType sType
        void* pNext
        VkCommandPoolCreateFlags flags
        uint32_t queueFamilyIndex
    ctypedef struct VkCommandBufferAllocateInfo:
        VkStructureType sType
        void* pNext
        VkCommandPool commandPool
        VkCommandBufferLevel level
        uint32_t commandBufferCount
    ctypedef struct VkCommandBufferInheritanceInfo:
        VkStructureType sType
        void* pNext
        VkRenderPass renderPass
        uint32_t subpass
        VkFramebuffer framebuffer
        VkBool32 occlusionQueryEnable
        VkQueryControlFlags queryFlags
        VkQueryPipelineStatisticFlags pipelineStatistics
    ctypedef struct VkCommandBufferBeginInfo:
        VkStructureType sType
        void* pNext
        VkCommandBufferUsageFlags flags
        VkCommandBufferInheritanceInfo* pInheritanceInfo
    ctypedef struct VkBufferCopy:
        VkDeviceSize srcOffset
        VkDeviceSize dstOffset
        VkDeviceSize size
    ctypedef struct VkImageSubresourceLayers:
        VkImageAspectFlags aspectMask
        uint32_t mipLevel
        uint32_t baseArrayLayer
        uint32_t layerCount
    ctypedef struct VkImageCopy:
        VkImageSubresourceLayers srcSubresource
        VkOffset3D srcOffset
        VkImageSubresourceLayers dstSubresource
        VkOffset3D dstOffset
        VkExtent3D extent
    ctypedef struct VkImageBlit:
        VkImageSubresourceLayers srcSubresource
        VkOffset3D srcOffsets[2]
        VkImageSubresourceLayers dstSubresource
        VkOffset3D dstOffsets[2]
    ctypedef struct VkBufferImageCopy:
        VkDeviceSize bufferOffset
        uint32_t bufferRowLength
        uint32_t bufferImageHeight
        VkImageSubresourceLayers imageSubresource
        VkOffset3D imageOffset
        VkExtent3D imageExtent
    ctypedef union VkClearColorValue:
        float float32[4]
        int32_t int32[4]
        uint32_t uint32[4]
    ctypedef struct VkClearDepthStencilValue:
        float depth
        uint32_t stencil
    ctypedef union VkClearValue:
        VkClearColorValue color
        VkClearDepthStencilValue depthStencil
    ctypedef struct VkClearAttachment:
        VkImageAspectFlags aspectMask
        uint32_t colorAttachment
        VkClearValue clearValue
    ctypedef struct VkClearRect:
        VkRect2D rect
        uint32_t baseArrayLayer
        uint32_t layerCount
    ctypedef struct VkImageResolve:
        VkImageSubresourceLayers srcSubresource
        VkOffset3D srcOffset
        VkImageSubresourceLayers dstSubresource
        VkOffset3D dstOffset
        VkExtent3D extent
    ctypedef struct VkMemoryBarrier:
        VkStructureType sType
        void* pNext
        VkAccessFlags srcAccessMask
        VkAccessFlags dstAccessMask
    ctypedef struct VkBufferMemoryBarrier:
        VkStructureType sType
        void* pNext
        VkAccessFlags srcAccessMask
        VkAccessFlags dstAccessMask
        uint32_t srcQueueFamilyIndex
        uint32_t dstQueueFamilyIndex
        VkBuffer buffer
        VkDeviceSize offset
        VkDeviceSize size
    ctypedef struct VkImageMemoryBarrier:
        VkStructureType sType
        void* pNext
        VkAccessFlags srcAccessMask
        VkAccessFlags dstAccessMask
        VkImageLayout oldLayout
        VkImageLayout newLayout
        uint32_t srcQueueFamilyIndex
        uint32_t dstQueueFamilyIndex
        VkImage image
        VkImageSubresourceRange subresourceRange
    ctypedef struct VkRenderPassBeginInfo:
        VkStructureType sType
        void* pNext
        VkRenderPass renderPass
        VkFramebuffer framebuffer
        VkRect2D renderArea
        uint32_t clearValueCount
        VkClearValue* pClearValues
    ctypedef struct VkDispatchIndirectCommand:
        uint32_t x
        uint32_t y
        uint32_t z
    ctypedef struct VkDrawIndexedIndirectCommand:
        uint32_t indexCount
        uint32_t instanceCount
        uint32_t firstIndex
        int32_t vertexOffset
        uint32_t firstInstance
    ctypedef struct VkDrawIndirectCommand:
        uint32_t vertexCount
        uint32_t instanceCount
        uint32_t firstVertex
        uint32_t firstInstance
    ctypedef struct VkBaseOutStructure:
        VkStructureType sType
        VkBaseOutStructure* pNext
    ctypedef struct VkBaseInStructure:
        VkStructureType sType
        VkBaseInStructure* pNext
    ctypedef VkResult ( *PFN_vkCreateInstance)( VkInstanceCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkInstance* pInstance);
    ctypedef void ( *PFN_vkDestroyInstance)(VkInstance instance,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkEnumeratePhysicalDevices)(VkInstance instance, uint32_t* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices);
    ctypedef void ( *PFN_vkGetPhysicalDeviceFeatures)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures);
    ctypedef void ( *PFN_vkGetPhysicalDeviceFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties);
    ctypedef VkResult ( *PFN_vkGetPhysicalDeviceImageFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties);
    ctypedef void ( *PFN_vkGetPhysicalDeviceProperties)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties);
    ctypedef void ( *PFN_vkGetPhysicalDeviceQueueFamilyProperties)(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties);
    ctypedef void ( *PFN_vkGetPhysicalDeviceMemoryProperties)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties);
    ctypedef PFN_vkVoidFunction ( *PFN_vkGetInstanceProcAddr)(VkInstance instance,  char* pName);
    ctypedef PFN_vkVoidFunction ( *PFN_vkGetDeviceProcAddr)(VkDevice device,  char* pName);
    ctypedef VkResult ( *PFN_vkCreateDevice)(VkPhysicalDevice physicalDevice,  VkDeviceCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkDevice* pDevice);
    ctypedef void ( *PFN_vkDestroyDevice)(VkDevice device,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkEnumerateInstanceExtensionProperties)( char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties);
    ctypedef VkResult ( *PFN_vkEnumerateDeviceExtensionProperties)(VkPhysicalDevice physicalDevice,  char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties);
    ctypedef VkResult ( *PFN_vkEnumerateInstanceLayerProperties)(uint32_t* pPropertyCount, VkLayerProperties* pProperties);
    ctypedef VkResult ( *PFN_vkEnumerateDeviceLayerProperties)(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkLayerProperties* pProperties);
    ctypedef void ( *PFN_vkGetDeviceQueue)(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue* pQueue);
    ctypedef VkResult ( *PFN_vkQueueSubmit)(VkQueue queue, uint32_t submitCount,  VkSubmitInfo* pSubmits, VkFence fence);
    ctypedef VkResult ( *PFN_vkQueueWaitIdle)(VkQueue queue);
    ctypedef VkResult ( *PFN_vkDeviceWaitIdle)(VkDevice device);
    ctypedef VkResult ( *PFN_vkAllocateMemory)(VkDevice device,  VkMemoryAllocateInfo* pAllocateInfo,  VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory);
    ctypedef void ( *PFN_vkFreeMemory)(VkDevice device, VkDeviceMemory memory,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkMapMemory)(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData);
    ctypedef void ( *PFN_vkUnmapMemory)(VkDevice device, VkDeviceMemory memory);
    ctypedef VkResult ( *PFN_vkFlushMappedMemoryRanges)(VkDevice device, uint32_t memoryRangeCount,  VkMappedMemoryRange* pMemoryRanges);
    ctypedef VkResult ( *PFN_vkInvalidateMappedMemoryRanges)(VkDevice device, uint32_t memoryRangeCount,  VkMappedMemoryRange* pMemoryRanges);
    ctypedef void ( *PFN_vkGetDeviceMemoryCommitment)(VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes);
    ctypedef VkResult ( *PFN_vkBindBufferMemory)(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset);
    ctypedef VkResult ( *PFN_vkBindImageMemory)(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset);
    ctypedef void ( *PFN_vkGetBufferMemoryRequirements)(VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements);
    ctypedef void ( *PFN_vkGetImageMemoryRequirements)(VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements);
    ctypedef void ( *PFN_vkGetImageSparseMemoryRequirements)(VkDevice device, VkImage image, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements);
    ctypedef void ( *PFN_vkGetPhysicalDeviceSparseImageFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t* pPropertyCount, VkSparseImageFormatProperties* pProperties);
    ctypedef VkResult ( *PFN_vkQueueBindSparse)(VkQueue queue, uint32_t bindInfoCount,  VkBindSparseInfo* pBindInfo, VkFence fence);
    ctypedef VkResult ( *PFN_vkCreateFence)(VkDevice device,  VkFenceCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkFence* pFence);
    ctypedef void ( *PFN_vkDestroyFence)(VkDevice device, VkFence fence,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkResetFences)(VkDevice device, uint32_t fenceCount,  VkFence* pFences);
    ctypedef VkResult ( *PFN_vkGetFenceStatus)(VkDevice device, VkFence fence);
    ctypedef VkResult ( *PFN_vkWaitForFences)(VkDevice device, uint32_t fenceCount,  VkFence* pFences, VkBool32 waitAll, uint64_t timeout);
    ctypedef VkResult ( *PFN_vkCreateSemaphore)(VkDevice device,  VkSemaphoreCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore);
    ctypedef void ( *PFN_vkDestroySemaphore)(VkDevice device, VkSemaphore semaphore,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkCreateEvent)(VkDevice device,  VkEventCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkEvent* pEvent);
    ctypedef void ( *PFN_vkDestroyEvent)(VkDevice device, VkEvent event,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkGetEventStatus)(VkDevice device, VkEvent event);
    ctypedef VkResult ( *PFN_vkSetEvent)(VkDevice device, VkEvent event);
    ctypedef VkResult ( *PFN_vkResetEvent)(VkDevice device, VkEvent event);
    ctypedef VkResult ( *PFN_vkCreateQueryPool)(VkDevice device,  VkQueryPoolCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool);
    ctypedef void ( *PFN_vkDestroyQueryPool)(VkDevice device, VkQueryPool queryPool,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkGetQueryPoolResults)(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags);
    ctypedef VkResult ( *PFN_vkCreateBuffer)(VkDevice device,  VkBufferCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer);
    ctypedef void ( *PFN_vkDestroyBuffer)(VkDevice device, VkBuffer buffer,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkCreateBufferView)(VkDevice device,  VkBufferViewCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkBufferView* pView);
    ctypedef void ( *PFN_vkDestroyBufferView)(VkDevice device, VkBufferView bufferView,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkCreateImage)(VkDevice device,  VkImageCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkImage* pImage);
    ctypedef void ( *PFN_vkDestroyImage)(VkDevice device, VkImage image,  VkAllocationCallbacks* pAllocator);
    ctypedef void ( *PFN_vkGetImageSubresourceLayout)(VkDevice device, VkImage image,  VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout);
    ctypedef VkResult ( *PFN_vkCreateImageView)(VkDevice device,  VkImageViewCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkImageView* pView);
    ctypedef void ( *PFN_vkDestroyImageView)(VkDevice device, VkImageView imageView,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkCreateShaderModule)(VkDevice device,  VkShaderModuleCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule);
    ctypedef void ( *PFN_vkDestroyShaderModule)(VkDevice device, VkShaderModule shaderModule,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkCreatePipelineCache)(VkDevice device,  VkPipelineCacheCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache);
    ctypedef void ( *PFN_vkDestroyPipelineCache)(VkDevice device, VkPipelineCache pipelineCache,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkGetPipelineCacheData)(VkDevice device, VkPipelineCache pipelineCache, size_t* pDataSize, void* pData);
    ctypedef VkResult ( *PFN_vkMergePipelineCaches)(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount,  VkPipelineCache* pSrcCaches);
    ctypedef VkResult ( *PFN_vkCreateGraphicsPipelines)(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount,  VkGraphicsPipelineCreateInfo* pCreateInfos,  VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines);
    ctypedef VkResult ( *PFN_vkCreateComputePipelines)(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount,  VkComputePipelineCreateInfo* pCreateInfos,  VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines);
    ctypedef void ( *PFN_vkDestroyPipeline)(VkDevice device, VkPipeline pipeline,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkCreatePipelineLayout)(VkDevice device,  VkPipelineLayoutCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout);
    ctypedef void ( *PFN_vkDestroyPipelineLayout)(VkDevice device, VkPipelineLayout pipelineLayout,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkCreateSampler)(VkDevice device,  VkSamplerCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkSampler* pSampler);
    ctypedef void ( *PFN_vkDestroySampler)(VkDevice device, VkSampler sampler,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkCreateDescriptorSetLayout)(VkDevice device,  VkDescriptorSetLayoutCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout);
    ctypedef void ( *PFN_vkDestroyDescriptorSetLayout)(VkDevice device, VkDescriptorSetLayout descriptorSetLayout,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkCreateDescriptorPool)(VkDevice device,  VkDescriptorPoolCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool);
    ctypedef void ( *PFN_vkDestroyDescriptorPool)(VkDevice device, VkDescriptorPool descriptorPool,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkResetDescriptorPool)(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags);
    ctypedef VkResult ( *PFN_vkAllocateDescriptorSets)(VkDevice device,  VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets);
    ctypedef VkResult ( *PFN_vkFreeDescriptorSets)(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount,  VkDescriptorSet* pDescriptorSets);
    ctypedef void ( *PFN_vkUpdateDescriptorSets)(VkDevice device, uint32_t descriptorWriteCount,  VkWriteDescriptorSet* pDescriptorWrites, uint32_t descriptorCopyCount,  VkCopyDescriptorSet* pDescriptorCopies);
    ctypedef VkResult ( *PFN_vkCreateFramebuffer)(VkDevice device,  VkFramebufferCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer);
    ctypedef void ( *PFN_vkDestroyFramebuffer)(VkDevice device, VkFramebuffer framebuffer,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkCreateRenderPass)(VkDevice device,  VkRenderPassCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass);
    ctypedef void ( *PFN_vkDestroyRenderPass)(VkDevice device, VkRenderPass renderPass,  VkAllocationCallbacks* pAllocator);
    ctypedef void ( *PFN_vkGetRenderAreaGranularity)(VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity);
    ctypedef VkResult ( *PFN_vkCreateCommandPool)(VkDevice device,  VkCommandPoolCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool);
    ctypedef void ( *PFN_vkDestroyCommandPool)(VkDevice device, VkCommandPool commandPool,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkResetCommandPool)(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags);
    ctypedef VkResult ( *PFN_vkAllocateCommandBuffers)(VkDevice device,  VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers);
    ctypedef void ( *PFN_vkFreeCommandBuffers)(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount,  VkCommandBuffer* pCommandBuffers);
    ctypedef VkResult ( *PFN_vkBeginCommandBuffer)(VkCommandBuffer commandBuffer,  VkCommandBufferBeginInfo* pBeginInfo);
    ctypedef VkResult ( *PFN_vkEndCommandBuffer)(VkCommandBuffer commandBuffer);
    ctypedef VkResult ( *PFN_vkResetCommandBuffer)(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags);
    ctypedef void ( *PFN_vkCmdBindPipeline)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);
    ctypedef void ( *PFN_vkCmdSetViewport)(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount,  VkViewport* pViewports);
    ctypedef void ( *PFN_vkCmdSetScissor)(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount,  VkRect2D* pScissors);
    ctypedef void ( *PFN_vkCmdSetLineWidth)(VkCommandBuffer commandBuffer, float lineWidth);
    ctypedef void ( *PFN_vkCmdSetDepthBias)(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);
    ctypedef void ( *PFN_vkCmdSetBlendConstants)(VkCommandBuffer commandBuffer,  float blendConstants[4]);
    ctypedef void ( *PFN_vkCmdSetDepthBounds)(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds);
    ctypedef void ( *PFN_vkCmdSetStencilCompareMask)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask);
    ctypedef void ( *PFN_vkCmdSetStencilWriteMask)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask);
    ctypedef void ( *PFN_vkCmdSetStencilReference)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference);
    ctypedef void ( *PFN_vkCmdBindDescriptorSets)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount,  VkDescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount,  uint32_t* pDynamicOffsets);
    ctypedef void ( *PFN_vkCmdBindIndexBuffer)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType);
    ctypedef void ( *PFN_vkCmdBindVertexBuffers)(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount,  VkBuffer* pBuffers,  VkDeviceSize* pOffsets);
    ctypedef void ( *PFN_vkCmdDraw)(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);
    ctypedef void ( *PFN_vkCmdDrawIndexed)(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance);
    ctypedef void ( *PFN_vkCmdDrawIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
    ctypedef void ( *PFN_vkCmdDrawIndexedIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
    ctypedef void ( *PFN_vkCmdDispatch)(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
    ctypedef void ( *PFN_vkCmdDispatchIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset);
    ctypedef void ( *PFN_vkCmdCopyBuffer)(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount,  VkBufferCopy* pRegions);
    ctypedef void ( *PFN_vkCmdCopyImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount,  VkImageCopy* pRegions);
    ctypedef void ( *PFN_vkCmdBlitImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount,  VkImageBlit* pRegions, VkFilter filter);
    ctypedef void ( *PFN_vkCmdCopyBufferToImage)(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount,  VkBufferImageCopy* pRegions);
    ctypedef void ( *PFN_vkCmdCopyImageToBuffer)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount,  VkBufferImageCopy* pRegions);
    ctypedef void ( *PFN_vkCmdUpdateBuffer)(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize,  void* pData);
    ctypedef void ( *PFN_vkCmdFillBuffer)(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data);
    ctypedef void ( *PFN_vkCmdClearColorImage)(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout,  VkClearColorValue* pColor, uint32_t rangeCount,  VkImageSubresourceRange* pRanges);
    ctypedef void ( *PFN_vkCmdClearDepthStencilImage)(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout,  VkClearDepthStencilValue* pDepthStencil, uint32_t rangeCount,  VkImageSubresourceRange* pRanges);
    ctypedef void ( *PFN_vkCmdClearAttachments)(VkCommandBuffer commandBuffer, uint32_t attachmentCount,  VkClearAttachment* pAttachments, uint32_t rectCount,  VkClearRect* pRects);
    ctypedef void ( *PFN_vkCmdResolveImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount,  VkImageResolve* pRegions);
    ctypedef void ( *PFN_vkCmdSetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
    ctypedef void ( *PFN_vkCmdResetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
    ctypedef void ( *PFN_vkCmdWaitEvents)(VkCommandBuffer commandBuffer, uint32_t eventCount,  VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount,  VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount,  VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount,  VkImageMemoryBarrier* pImageMemoryBarriers);
    ctypedef void ( *PFN_vkCmdPipelineBarrier)(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount,  VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount,  VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount,  VkImageMemoryBarrier* pImageMemoryBarriers);
    ctypedef void ( *PFN_vkCmdBeginQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags);
    ctypedef void ( *PFN_vkCmdEndQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query);
    ctypedef void ( *PFN_vkCmdResetQueryPool)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount);
    ctypedef void ( *PFN_vkCmdWriteTimestamp)(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query);
    ctypedef void ( *PFN_vkCmdCopyQueryPoolResults)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags);
    ctypedef void ( *PFN_vkCmdPushConstants)(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size,  void* pValues);
    ctypedef void ( *PFN_vkCmdBeginRenderPass)(VkCommandBuffer commandBuffer,  VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents);
    ctypedef void ( *PFN_vkCmdNextSubpass)(VkCommandBuffer commandBuffer, VkSubpassContents contents);
    ctypedef void ( *PFN_vkCmdEndRenderPass)(VkCommandBuffer commandBuffer);
    ctypedef void ( *PFN_vkCmdExecuteCommands)(VkCommandBuffer commandBuffer, uint32_t commandBufferCount,  VkCommandBuffer* pCommandBuffers);
    cdef VkResult vkCreateInstance(
        VkInstanceCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkInstance* pInstance);
    cdef void vkDestroyInstance(
        VkInstance instance,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkEnumeratePhysicalDevices(
        VkInstance instance,
        uint32_t* pPhysicalDeviceCount,
        VkPhysicalDevice* pPhysicalDevices);
    cdef void vkGetPhysicalDeviceFeatures(
        VkPhysicalDevice physicalDevice,
        VkPhysicalDeviceFeatures* pFeatures);
    cdef void vkGetPhysicalDeviceFormatProperties(
        VkPhysicalDevice physicalDevice,
        VkFormat format,
        VkFormatProperties* pFormatProperties);
    cdef VkResult vkGetPhysicalDeviceImageFormatProperties(
        VkPhysicalDevice physicalDevice,
        VkFormat format,
        VkImageType type,
        VkImageTiling tiling,
        VkImageUsageFlags usage,
        VkImageCreateFlags flags,
        VkImageFormatProperties* pImageFormatProperties);
    cdef void vkGetPhysicalDeviceProperties(
        VkPhysicalDevice physicalDevice,
        VkPhysicalDeviceProperties* pProperties);
    cdef void vkGetPhysicalDeviceQueueFamilyProperties(
        VkPhysicalDevice physicalDevice,
        uint32_t* pQueueFamilyPropertyCount,
        VkQueueFamilyProperties* pQueueFamilyProperties);
    cdef void vkGetPhysicalDeviceMemoryProperties(
        VkPhysicalDevice physicalDevice,
        VkPhysicalDeviceMemoryProperties* pMemoryProperties);
    cdef PFN_vkVoidFunction vkGetInstanceProcAddr(
        VkInstance instance,
        char* pName);
    cdef PFN_vkVoidFunction vkGetDeviceProcAddr(
        VkDevice device,
        char* pName);
    cdef VkResult vkCreateDevice(
        VkPhysicalDevice physicalDevice,
        VkDeviceCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkDevice* pDevice);
    cdef void vkDestroyDevice(
        VkDevice device,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkEnumerateInstanceExtensionProperties(
        char* pLayerName,
        uint32_t* pPropertyCount,
        VkExtensionProperties* pProperties);
    cdef VkResult vkEnumerateDeviceExtensionProperties(
        VkPhysicalDevice physicalDevice,
        char* pLayerName,
        uint32_t* pPropertyCount,
        VkExtensionProperties* pProperties);
    cdef VkResult vkEnumerateInstanceLayerProperties(
        uint32_t* pPropertyCount,
        VkLayerProperties* pProperties);
    cdef VkResult vkEnumerateDeviceLayerProperties(
        VkPhysicalDevice physicalDevice,
        uint32_t* pPropertyCount,
        VkLayerProperties* pProperties);
    cdef void vkGetDeviceQueue(
        VkDevice device,
        uint32_t queueFamilyIndex,
        uint32_t queueIndex,
        VkQueue* pQueue);
    cdef VkResult vkQueueSubmit(
        VkQueue queue,
        uint32_t submitCount,
        VkSubmitInfo* pSubmits,
        VkFence fence);
    cdef VkResult vkQueueWaitIdle(
        VkQueue queue);
    cdef VkResult vkDeviceWaitIdle(
        VkDevice device);
    cdef VkResult vkAllocateMemory(
        VkDevice device,
        VkMemoryAllocateInfo* pAllocateInfo,
        VkAllocationCallbacks* pAllocator,
        VkDeviceMemory* pMemory);
    cdef void vkFreeMemory(
        VkDevice device,
        VkDeviceMemory memory,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkMapMemory(
        VkDevice device,
        VkDeviceMemory memory,
        VkDeviceSize offset,
        VkDeviceSize size,
        VkMemoryMapFlags flags,
        void** ppData);
    cdef void vkUnmapMemory(
        VkDevice device,
        VkDeviceMemory memory);
    cdef VkResult vkFlushMappedMemoryRanges(
        VkDevice device,
        uint32_t memoryRangeCount,
        VkMappedMemoryRange* pMemoryRanges);
    cdef VkResult vkInvalidateMappedMemoryRanges(
        VkDevice device,
        uint32_t memoryRangeCount,
        VkMappedMemoryRange* pMemoryRanges);
    cdef void vkGetDeviceMemoryCommitment(
        VkDevice device,
        VkDeviceMemory memory,
        VkDeviceSize* pCommittedMemoryInBytes);
    cdef VkResult vkBindBufferMemory(
        VkDevice device,
        VkBuffer buffer,
        VkDeviceMemory memory,
        VkDeviceSize memoryOffset);
    cdef VkResult vkBindImageMemory(
        VkDevice device,
        VkImage image,
        VkDeviceMemory memory,
        VkDeviceSize memoryOffset);
    cdef void vkGetBufferMemoryRequirements(
        VkDevice device,
        VkBuffer buffer,
        VkMemoryRequirements* pMemoryRequirements);
    cdef void vkGetImageMemoryRequirements(
        VkDevice device,
        VkImage image,
        VkMemoryRequirements* pMemoryRequirements);
    cdef void vkGetImageSparseMemoryRequirements(
        VkDevice device,
        VkImage image,
        uint32_t* pSparseMemoryRequirementCount,
        VkSparseImageMemoryRequirements* pSparseMemoryRequirements);
    cdef void vkGetPhysicalDeviceSparseImageFormatProperties(
        VkPhysicalDevice physicalDevice,
        VkFormat format,
        VkImageType type,
        VkSampleCountFlagBits samples,
        VkImageUsageFlags usage,
        VkImageTiling tiling,
        uint32_t* pPropertyCount,
        VkSparseImageFormatProperties* pProperties);
    cdef VkResult vkQueueBindSparse(
        VkQueue queue,
        uint32_t bindInfoCount,
        VkBindSparseInfo* pBindInfo,
        VkFence fence);
    cdef VkResult vkCreateFence(
        VkDevice device,
        VkFenceCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkFence* pFence);
    cdef void vkDestroyFence(
        VkDevice device,
        VkFence fence,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkResetFences(
        VkDevice device,
        uint32_t fenceCount,
        VkFence* pFences);
    cdef VkResult vkGetFenceStatus(
        VkDevice device,
        VkFence fence);
    cdef VkResult vkWaitForFences(
        VkDevice device,
        uint32_t fenceCount,
        VkFence* pFences,
        VkBool32 waitAll,
        uint64_t timeout);
    cdef VkResult vkCreateSemaphore(
        VkDevice device,
        VkSemaphoreCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkSemaphore* pSemaphore);
    cdef void vkDestroySemaphore(
        VkDevice device,
        VkSemaphore semaphore,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkCreateEvent(
        VkDevice device,
        VkEventCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkEvent* pEvent);
    cdef void vkDestroyEvent(
        VkDevice device,
        VkEvent event,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkGetEventStatus(
        VkDevice device,
        VkEvent event);
    cdef VkResult vkSetEvent(
        VkDevice device,
        VkEvent event);
    cdef VkResult vkResetEvent(
        VkDevice device,
        VkEvent event);
    cdef VkResult vkCreateQueryPool(
        VkDevice device,
        VkQueryPoolCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkQueryPool* pQueryPool);
    cdef void vkDestroyQueryPool(
        VkDevice device,
        VkQueryPool queryPool,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkGetQueryPoolResults(
        VkDevice device,
        VkQueryPool queryPool,
        uint32_t firstQuery,
        uint32_t queryCount,
        size_t dataSize,
        void* pData,
        VkDeviceSize stride,
        VkQueryResultFlags flags);
    cdef VkResult vkCreateBuffer(
        VkDevice device,
        VkBufferCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkBuffer* pBuffer);
    cdef void vkDestroyBuffer(
        VkDevice device,
        VkBuffer buffer,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkCreateBufferView(
        VkDevice device,
        VkBufferViewCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkBufferView* pView);
    cdef void vkDestroyBufferView(
        VkDevice device,
        VkBufferView bufferView,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkCreateImage(
        VkDevice device,
        VkImageCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkImage* pImage);
    cdef void vkDestroyImage(
        VkDevice device,
        VkImage image,
        VkAllocationCallbacks* pAllocator);
    cdef void vkGetImageSubresourceLayout(
        VkDevice device,
        VkImage image,
        VkImageSubresource* pSubresource,
        VkSubresourceLayout* pLayout);
    cdef VkResult vkCreateImageView(
        VkDevice device,
        VkImageViewCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkImageView* pView);
    cdef void vkDestroyImageView(
        VkDevice device,
        VkImageView imageView,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkCreateShaderModule(
        VkDevice device,
        VkShaderModuleCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkShaderModule* pShaderModule);
    cdef void vkDestroyShaderModule(
        VkDevice device,
        VkShaderModule shaderModule,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkCreatePipelineCache(
        VkDevice device,
        VkPipelineCacheCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkPipelineCache* pPipelineCache);
    cdef void vkDestroyPipelineCache(
        VkDevice device,
        VkPipelineCache pipelineCache,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkGetPipelineCacheData(
        VkDevice device,
        VkPipelineCache pipelineCache,
        size_t* pDataSize,
        void* pData);
    cdef VkResult vkMergePipelineCaches(
        VkDevice device,
        VkPipelineCache dstCache,
        uint32_t srcCacheCount,
        VkPipelineCache* pSrcCaches);
    cdef VkResult vkCreateGraphicsPipelines(
        VkDevice device,
        VkPipelineCache pipelineCache,
        uint32_t createInfoCount,
        VkGraphicsPipelineCreateInfo* pCreateInfos,
        VkAllocationCallbacks* pAllocator,
        VkPipeline* pPipelines);
    cdef VkResult vkCreateComputePipelines(
        VkDevice device,
        VkPipelineCache pipelineCache,
        uint32_t createInfoCount,
        VkComputePipelineCreateInfo* pCreateInfos,
        VkAllocationCallbacks* pAllocator,
        VkPipeline* pPipelines);
    cdef void vkDestroyPipeline(
        VkDevice device,
        VkPipeline pipeline,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkCreatePipelineLayout(
        VkDevice device,
        VkPipelineLayoutCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkPipelineLayout* pPipelineLayout);
    cdef void vkDestroyPipelineLayout(
        VkDevice device,
        VkPipelineLayout pipelineLayout,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkCreateSampler(
        VkDevice device,
        VkSamplerCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkSampler* pSampler);
    cdef void vkDestroySampler(
        VkDevice device,
        VkSampler sampler,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkCreateDescriptorSetLayout(
        VkDevice device,
        VkDescriptorSetLayoutCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkDescriptorSetLayout* pSetLayout);
    cdef void vkDestroyDescriptorSetLayout(
        VkDevice device,
        VkDescriptorSetLayout descriptorSetLayout,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkCreateDescriptorPool(
        VkDevice device,
        VkDescriptorPoolCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkDescriptorPool* pDescriptorPool);
    cdef void vkDestroyDescriptorPool(
        VkDevice device,
        VkDescriptorPool descriptorPool,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkResetDescriptorPool(
        VkDevice device,
        VkDescriptorPool descriptorPool,
        VkDescriptorPoolResetFlags flags);
    cdef VkResult vkAllocateDescriptorSets(
        VkDevice device,
        VkDescriptorSetAllocateInfo* pAllocateInfo,
        VkDescriptorSet* pDescriptorSets);
    cdef VkResult vkFreeDescriptorSets(
        VkDevice device,
        VkDescriptorPool descriptorPool,
        uint32_t descriptorSetCount,
        VkDescriptorSet* pDescriptorSets);
    cdef void vkUpdateDescriptorSets(
        VkDevice device,
        uint32_t descriptorWriteCount,
        VkWriteDescriptorSet* pDescriptorWrites,
        uint32_t descriptorCopyCount,
        VkCopyDescriptorSet* pDescriptorCopies);
    cdef VkResult vkCreateFramebuffer(
        VkDevice device,
        VkFramebufferCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkFramebuffer* pFramebuffer);
    cdef void vkDestroyFramebuffer(
        VkDevice device,
        VkFramebuffer framebuffer,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkCreateRenderPass(
        VkDevice device,
        VkRenderPassCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkRenderPass* pRenderPass);
    cdef void vkDestroyRenderPass(
        VkDevice device,
        VkRenderPass renderPass,
        VkAllocationCallbacks* pAllocator);
    cdef void vkGetRenderAreaGranularity(
        VkDevice device,
        VkRenderPass renderPass,
        VkExtent2D* pGranularity);
    cdef VkResult vkCreateCommandPool(
        VkDevice device,
        VkCommandPoolCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkCommandPool* pCommandPool);
    cdef void vkDestroyCommandPool(
        VkDevice device,
        VkCommandPool commandPool,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkResetCommandPool(
        VkDevice device,
        VkCommandPool commandPool,
        VkCommandPoolResetFlags flags);
    cdef VkResult vkAllocateCommandBuffers(
        VkDevice device,
        VkCommandBufferAllocateInfo* pAllocateInfo,
        VkCommandBuffer* pCommandBuffers);
    cdef void vkFreeCommandBuffers(
        VkDevice device,
        VkCommandPool commandPool,
        uint32_t commandBufferCount,
        VkCommandBuffer* pCommandBuffers);
    cdef VkResult vkBeginCommandBuffer(
        VkCommandBuffer commandBuffer,
        VkCommandBufferBeginInfo* pBeginInfo);
    cdef VkResult vkEndCommandBuffer(
        VkCommandBuffer commandBuffer);
    cdef VkResult vkResetCommandBuffer(
        VkCommandBuffer commandBuffer,
        VkCommandBufferResetFlags flags);
    cdef void vkCmdBindPipeline(
        VkCommandBuffer commandBuffer,
        VkPipelineBindPoint pipelineBindPoint,
        VkPipeline pipeline);
    cdef void vkCmdSetViewport(
        VkCommandBuffer commandBuffer,
        uint32_t firstViewport,
        uint32_t viewportCount,
        VkViewport* pViewports);
    cdef void vkCmdSetScissor(
        VkCommandBuffer commandBuffer,
        uint32_t firstScissor,
        uint32_t scissorCount,
        VkRect2D* pScissors);
    cdef void vkCmdSetLineWidth(
        VkCommandBuffer commandBuffer,
        float lineWidth);
    cdef void vkCmdSetDepthBias(
        VkCommandBuffer commandBuffer,
        float depthBiasConstantFactor,
        float depthBiasClamp,
        float depthBiasSlopeFactor);
    cdef void vkCmdSetBlendConstants(
        VkCommandBuffer commandBuffer,
        float blendConstants[4]);
    cdef void vkCmdSetDepthBounds(
        VkCommandBuffer commandBuffer,
        float minDepthBounds,
        float maxDepthBounds);
    cdef void vkCmdSetStencilCompareMask(
        VkCommandBuffer commandBuffer,
        VkStencilFaceFlags faceMask,
        uint32_t compareMask);
    cdef void vkCmdSetStencilWriteMask(
        VkCommandBuffer commandBuffer,
        VkStencilFaceFlags faceMask,
        uint32_t writeMask);
    cdef void vkCmdSetStencilReference(
        VkCommandBuffer commandBuffer,
        VkStencilFaceFlags faceMask,
        uint32_t reference);
    cdef void vkCmdBindDescriptorSets(
        VkCommandBuffer commandBuffer,
        VkPipelineBindPoint pipelineBindPoint,
        VkPipelineLayout layout,
        uint32_t firstSet,
        uint32_t descriptorSetCount,
        VkDescriptorSet* pDescriptorSets,
        uint32_t dynamicOffsetCount,
        uint32_t* pDynamicOffsets);
    cdef void vkCmdBindIndexBuffer(
        VkCommandBuffer commandBuffer,
        VkBuffer buffer,
        VkDeviceSize offset,
        VkIndexType indexType);
    cdef void vkCmdBindVertexBuffers(
        VkCommandBuffer commandBuffer,
        uint32_t firstBinding,
        uint32_t bindingCount,
        VkBuffer* pBuffers,
        VkDeviceSize* pOffsets);
    cdef void vkCmdDraw(
        VkCommandBuffer commandBuffer,
        uint32_t vertexCount,
        uint32_t instanceCount,
        uint32_t firstVertex,
        uint32_t firstInstance);
    cdef void vkCmdDrawIndexed(
        VkCommandBuffer commandBuffer,
        uint32_t indexCount,
        uint32_t instanceCount,
        uint32_t firstIndex,
        int32_t vertexOffset,
        uint32_t firstInstance);
    cdef void vkCmdDrawIndirect(
        VkCommandBuffer commandBuffer,
        VkBuffer buffer,
        VkDeviceSize offset,
        uint32_t drawCount,
        uint32_t stride);
    cdef void vkCmdDrawIndexedIndirect(
        VkCommandBuffer commandBuffer,
        VkBuffer buffer,
        VkDeviceSize offset,
        uint32_t drawCount,
        uint32_t stride);
    cdef void vkCmdDispatch(
        VkCommandBuffer commandBuffer,
        uint32_t groupCountX,
        uint32_t groupCountY,
        uint32_t groupCountZ);
    cdef void vkCmdDispatchIndirect(
        VkCommandBuffer commandBuffer,
        VkBuffer buffer,
        VkDeviceSize offset);
    cdef void vkCmdCopyBuffer(
        VkCommandBuffer commandBuffer,
        VkBuffer srcBuffer,
        VkBuffer dstBuffer,
        uint32_t regionCount,
        VkBufferCopy* pRegions);
    cdef void vkCmdCopyImage(
        VkCommandBuffer commandBuffer,
        VkImage srcImage,
        VkImageLayout srcImageLayout,
        VkImage dstImage,
        VkImageLayout dstImageLayout,
        uint32_t regionCount,
        VkImageCopy* pRegions);
    cdef void vkCmdBlitImage(
        VkCommandBuffer commandBuffer,
        VkImage srcImage,
        VkImageLayout srcImageLayout,
        VkImage dstImage,
        VkImageLayout dstImageLayout,
        uint32_t regionCount,
        VkImageBlit* pRegions,
        VkFilter filter);
    cdef void vkCmdCopyBufferToImage(
        VkCommandBuffer commandBuffer,
        VkBuffer srcBuffer,
        VkImage dstImage,
        VkImageLayout dstImageLayout,
        uint32_t regionCount,
        VkBufferImageCopy* pRegions);
    cdef void vkCmdCopyImageToBuffer(
        VkCommandBuffer commandBuffer,
        VkImage srcImage,
        VkImageLayout srcImageLayout,
        VkBuffer dstBuffer,
        uint32_t regionCount,
        VkBufferImageCopy* pRegions);
    cdef void vkCmdUpdateBuffer(
        VkCommandBuffer commandBuffer,
        VkBuffer dstBuffer,
        VkDeviceSize dstOffset,
        VkDeviceSize dataSize,
        void* pData);
    cdef void vkCmdFillBuffer(
        VkCommandBuffer commandBuffer,
        VkBuffer dstBuffer,
        VkDeviceSize dstOffset,
        VkDeviceSize size,
        uint32_t data);
    cdef void vkCmdClearColorImage(
        VkCommandBuffer commandBuffer,
        VkImage image,
        VkImageLayout imageLayout,
        VkClearColorValue* pColor,
        uint32_t rangeCount,
        VkImageSubresourceRange* pRanges);
    cdef void vkCmdClearDepthStencilImage(
        VkCommandBuffer commandBuffer,
        VkImage image,
        VkImageLayout imageLayout,
        VkClearDepthStencilValue* pDepthStencil,
        uint32_t rangeCount,
        VkImageSubresourceRange* pRanges);
    cdef void vkCmdClearAttachments(
        VkCommandBuffer commandBuffer,
        uint32_t attachmentCount,
        VkClearAttachment* pAttachments,
        uint32_t rectCount,
        VkClearRect* pRects);
    cdef void vkCmdResolveImage(
        VkCommandBuffer commandBuffer,
        VkImage srcImage,
        VkImageLayout srcImageLayout,
        VkImage dstImage,
        VkImageLayout dstImageLayout,
        uint32_t regionCount,
        VkImageResolve* pRegions);
    cdef void vkCmdSetEvent(
        VkCommandBuffer commandBuffer,
        VkEvent event,
        VkPipelineStageFlags stageMask);
    cdef void vkCmdResetEvent(
        VkCommandBuffer commandBuffer,
        VkEvent event,
        VkPipelineStageFlags stageMask);
    cdef void vkCmdWaitEvents(
        VkCommandBuffer commandBuffer,
        uint32_t eventCount,
        VkEvent* pEvents,
        VkPipelineStageFlags srcStageMask,
        VkPipelineStageFlags dstStageMask,
        uint32_t memoryBarrierCount,
        VkMemoryBarrier* pMemoryBarriers,
        uint32_t bufferMemoryBarrierCount,
        VkBufferMemoryBarrier* pBufferMemoryBarriers,
        uint32_t imageMemoryBarrierCount,
        VkImageMemoryBarrier* pImageMemoryBarriers);
    cdef void vkCmdPipelineBarrier(
        VkCommandBuffer commandBuffer,
        VkPipelineStageFlags srcStageMask,
        VkPipelineStageFlags dstStageMask,
        VkDependencyFlags dependencyFlags,
        uint32_t memoryBarrierCount,
        VkMemoryBarrier* pMemoryBarriers,
        uint32_t bufferMemoryBarrierCount,
        VkBufferMemoryBarrier* pBufferMemoryBarriers,
        uint32_t imageMemoryBarrierCount,
        VkImageMemoryBarrier* pImageMemoryBarriers);
    cdef void vkCmdBeginQuery(
        VkCommandBuffer commandBuffer,
        VkQueryPool queryPool,
        uint32_t query,
        VkQueryControlFlags flags);
    cdef void vkCmdEndQuery(
        VkCommandBuffer commandBuffer,
        VkQueryPool queryPool,
        uint32_t query);
    cdef void vkCmdResetQueryPool(
        VkCommandBuffer commandBuffer,
        VkQueryPool queryPool,
        uint32_t firstQuery,
        uint32_t queryCount);
    cdef void vkCmdWriteTimestamp(
        VkCommandBuffer commandBuffer,
        VkPipelineStageFlagBits pipelineStage,
        VkQueryPool queryPool,
        uint32_t query);
    cdef void vkCmdCopyQueryPoolResults(
        VkCommandBuffer commandBuffer,
        VkQueryPool queryPool,
        uint32_t firstQuery,
        uint32_t queryCount,
        VkBuffer dstBuffer,
        VkDeviceSize dstOffset,
        VkDeviceSize stride,
        VkQueryResultFlags flags);
    cdef void vkCmdPushConstants(
        VkCommandBuffer commandBuffer,
        VkPipelineLayout layout,
        VkShaderStageFlags stageFlags,
        uint32_t offset,
        uint32_t size,
        void* pValues);
    cdef void vkCmdBeginRenderPass(
        VkCommandBuffer commandBuffer,
        VkRenderPassBeginInfo* pRenderPassBegin,
        VkSubpassContents contents);
    cdef void vkCmdNextSubpass(
        VkCommandBuffer commandBuffer,
        VkSubpassContents contents);
    cdef void vkCmdEndRenderPass(
        VkCommandBuffer commandBuffer);
    cdef void vkCmdExecuteCommands(
        VkCommandBuffer commandBuffer,
        uint32_t commandBufferCount,
        VkCommandBuffer* pCommandBuffers);
    ctypedef struct VkSamplerYcbcrConversion:
        pass
    ctypedef struct VkDescriptorUpdateTemplate:
        pass
    cdef enum VkPointClippingBehavior:
        VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0
        VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1
        VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES
        VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY
        VK_POINT_CLIPPING_BEHAVIOR_BEGIN_RANGE = VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES
        VK_POINT_CLIPPING_BEHAVIOR_END_RANGE = VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY
        VK_POINT_CLIPPING_BEHAVIOR_RANGE_SIZE = (VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY - VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES + 1)
        VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkTessellationDomainOrigin:
        VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0
        VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1
        VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT
        VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT
        VK_TESSELLATION_DOMAIN_ORIGIN_BEGIN_RANGE = VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT
        VK_TESSELLATION_DOMAIN_ORIGIN_END_RANGE = VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT
        VK_TESSELLATION_DOMAIN_ORIGIN_RANGE_SIZE = (VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT - VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT + 1)
        VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkSamplerYcbcrModelConversion:
        VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0
        VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1
        VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2
        VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3
        VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4
        VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY
        VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY
        VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709
        VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601
        VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020
        VK_SAMPLER_YCBCR_MODEL_CONVERSION_BEGIN_RANGE = VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY
        VK_SAMPLER_YCBCR_MODEL_CONVERSION_END_RANGE = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020
        VK_SAMPLER_YCBCR_MODEL_CONVERSION_RANGE_SIZE = (VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 - VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY + 1)
        VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkSamplerYcbcrRange:
        VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0
        VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1
        VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_FULL
        VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_NARROW
        VK_SAMPLER_YCBCR_RANGE_BEGIN_RANGE = VK_SAMPLER_YCBCR_RANGE_ITU_FULL
        VK_SAMPLER_YCBCR_RANGE_END_RANGE = VK_SAMPLER_YCBCR_RANGE_ITU_NARROW
        VK_SAMPLER_YCBCR_RANGE_RANGE_SIZE = (VK_SAMPLER_YCBCR_RANGE_ITU_NARROW - VK_SAMPLER_YCBCR_RANGE_ITU_FULL + 1)
        VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkChromaLocation:
        VK_CHROMA_LOCATION_COSITED_EVEN = 0
        VK_CHROMA_LOCATION_MIDPOINT = 1
        VK_CHROMA_LOCATION_COSITED_EVEN_KHR = VK_CHROMA_LOCATION_COSITED_EVEN
        VK_CHROMA_LOCATION_MIDPOINT_KHR = VK_CHROMA_LOCATION_MIDPOINT
        VK_CHROMA_LOCATION_BEGIN_RANGE = VK_CHROMA_LOCATION_COSITED_EVEN
        VK_CHROMA_LOCATION_END_RANGE = VK_CHROMA_LOCATION_MIDPOINT
        VK_CHROMA_LOCATION_RANGE_SIZE = (VK_CHROMA_LOCATION_MIDPOINT - VK_CHROMA_LOCATION_COSITED_EVEN + 1)
        VK_CHROMA_LOCATION_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkDescriptorUpdateTemplateType:
        VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0
        VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1
        VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET
        VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_BEGIN_RANGE = VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET
        VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_END_RANGE = VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET
        VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_RANGE_SIZE = (VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET - VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET + 1)
        VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 0x7FFFFFFF
    cdef enum VkSubgroupFeatureFlagBits:
        VK_SUBGROUP_FEATURE_BASIC_BIT = 0x00000001
        VK_SUBGROUP_FEATURE_VOTE_BIT = 0x00000002
        VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 0x00000004
        VK_SUBGROUP_FEATURE_BALLOT_BIT = 0x00000008
        VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 0x00000010
        VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 0x00000020
        VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 0x00000040
        VK_SUBGROUP_FEATURE_QUAD_BIT = 0x00000080
        VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 0x00000100
        VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkSubgroupFeatureFlags;
    cdef enum VkPeerMemoryFeatureFlagBits:
        VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 0x00000001
        VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 0x00000002
        VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 0x00000004
        VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 0x00000008
        VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT
        VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_DST_BIT
        VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT
        VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT
        VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkPeerMemoryFeatureFlags;
    cdef enum VkMemoryAllocateFlagBits:
        VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 0x00000001
        VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT
        VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkMemoryAllocateFlags;
    ctypedef VkFlags VkCommandPoolTrimFlags;
    ctypedef VkFlags VkDescriptorUpdateTemplateCreateFlags;
    cdef enum VkExternalMemoryHandleTypeFlagBits:
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 0x00000008
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 0x00000010
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 0x00000020
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 0x00000040
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 0x00000200
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 0x00000400
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 0x00000080
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 0x00000100
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkExternalMemoryHandleTypeFlags;
    cdef enum VkExternalMemoryFeatureFlagBits:
        VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 0x00000001
        VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 0x00000002
        VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 0x00000004
        VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT
        VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT
        VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT
        VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkExternalMemoryFeatureFlags;
    cdef enum VkExternalFenceHandleTypeFlagBits:
        VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001
        VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002
        VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004
        VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 0x00000008
        VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT
        VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT
        VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT
        VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT
        VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkExternalFenceHandleTypeFlags;
    cdef enum VkExternalFenceFeatureFlagBits:
        VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 0x00000001
        VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 0x00000002
        VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT
        VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT
        VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkExternalFenceFeatureFlags;
    cdef enum VkFenceImportFlagBits:
        VK_FENCE_IMPORT_TEMPORARY_BIT = 0x00000001
        VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = VK_FENCE_IMPORT_TEMPORARY_BIT
        VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkFenceImportFlags;
    cdef enum VkSemaphoreImportFlagBits:
        VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 0x00000001
        VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = VK_SEMAPHORE_IMPORT_TEMPORARY_BIT
        VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkSemaphoreImportFlags;
    cdef enum VkExternalSemaphoreHandleTypeFlagBits:
        VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001
        VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002
        VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004
        VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 0x00000008
        VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 0x00000010
        VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT
        VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT
        VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT
        VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT
        VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT
        VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkExternalSemaphoreHandleTypeFlags;
    cdef enum VkExternalSemaphoreFeatureFlagBits:
        VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 0x00000001
        VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 0x00000002
        VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT
        VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT
        VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
    ctypedef VkFlags VkExternalSemaphoreFeatureFlags;
    ctypedef struct VkPhysicalDeviceSubgroupProperties:
        VkStructureType sType
        void* pNext
        uint32_t subgroupSize
        VkShaderStageFlags supportedStages
        VkSubgroupFeatureFlags supportedOperations
        VkBool32 quadOperationsInAllStages
    ctypedef struct VkBindBufferMemoryInfo:
        VkStructureType sType
        void* pNext
        VkBuffer buffer
        VkDeviceMemory memory
        VkDeviceSize memoryOffset
    ctypedef struct VkBindImageMemoryInfo:
        VkStructureType sType
        void* pNext
        VkImage image
        VkDeviceMemory memory
        VkDeviceSize memoryOffset
    ctypedef struct VkPhysicalDevice16BitStorageFeatures:
        VkStructureType sType
        void* pNext
        VkBool32 storageBuffer16BitAccess
        VkBool32 uniformAndStorageBuffer16BitAccess
        VkBool32 storagePushConstant16
        VkBool32 storageInputOutput16
    ctypedef struct VkMemoryDedicatedRequirements:
        VkStructureType sType
        void* pNext
        VkBool32 prefersDedicatedAllocation
        VkBool32 requiresDedicatedAllocation
    ctypedef struct VkMemoryDedicatedAllocateInfo:
        VkStructureType sType
        void* pNext
        VkImage image
        VkBuffer buffer
    ctypedef struct VkMemoryAllocateFlagsInfo:
        VkStructureType sType
        void* pNext
        VkMemoryAllocateFlags flags
        uint32_t deviceMask
    ctypedef struct VkDeviceGroupRenderPassBeginInfo:
        VkStructureType sType
        void* pNext
        uint32_t deviceMask
        uint32_t deviceRenderAreaCount
        VkRect2D* pDeviceRenderAreas
    ctypedef struct VkDeviceGroupCommandBufferBeginInfo:
        VkStructureType sType
        void* pNext
        uint32_t deviceMask
    ctypedef struct VkDeviceGroupSubmitInfo:
        VkStructureType sType
        void* pNext
        uint32_t waitSemaphoreCount
        uint32_t* pWaitSemaphoreDeviceIndices
        uint32_t commandBufferCount
        uint32_t* pCommandBufferDeviceMasks
        uint32_t signalSemaphoreCount
        uint32_t* pSignalSemaphoreDeviceIndices
    ctypedef struct VkDeviceGroupBindSparseInfo:
        VkStructureType sType
        void* pNext
        uint32_t resourceDeviceIndex
        uint32_t memoryDeviceIndex
    ctypedef struct VkBindBufferMemoryDeviceGroupInfo:
        VkStructureType sType
        void* pNext
        uint32_t deviceIndexCount
        uint32_t* pDeviceIndices
    ctypedef struct VkBindImageMemoryDeviceGroupInfo:
        VkStructureType sType
        void* pNext
        uint32_t deviceIndexCount
        uint32_t* pDeviceIndices
        uint32_t splitInstanceBindRegionCount
        VkRect2D* pSplitInstanceBindRegions
    ctypedef struct VkPhysicalDeviceGroupProperties:
        VkStructureType sType
        void* pNext
        uint32_t physicalDeviceCount
        VkPhysicalDevice physicalDevices[32]
        VkBool32 subsetAllocation
    ctypedef struct VkDeviceGroupDeviceCreateInfo:
        VkStructureType sType
        void* pNext
        uint32_t physicalDeviceCount
        VkPhysicalDevice* pPhysicalDevices
    ctypedef struct VkBufferMemoryRequirementsInfo2:
        VkStructureType sType
        void* pNext
        VkBuffer buffer
    ctypedef struct VkImageMemoryRequirementsInfo2:
        VkStructureType sType
        void* pNext
        VkImage image
    ctypedef struct VkImageSparseMemoryRequirementsInfo2:
        VkStructureType sType
        void* pNext
        VkImage image
    ctypedef struct VkMemoryRequirements2:
        VkStructureType sType
        void* pNext
        VkMemoryRequirements memoryRequirements
    ctypedef VkMemoryRequirements2 VkMemoryRequirements2KHR;
    ctypedef struct VkSparseImageMemoryRequirements2:
        VkStructureType sType
        void* pNext
        VkSparseImageMemoryRequirements memoryRequirements
    ctypedef struct VkPhysicalDeviceFeatures2:
        VkStructureType sType
        void* pNext
        VkPhysicalDeviceFeatures features
    ctypedef struct VkPhysicalDeviceProperties2:
        VkStructureType sType
        void* pNext
        VkPhysicalDeviceProperties properties
    ctypedef struct VkFormatProperties2:
        VkStructureType sType
        void* pNext
        VkFormatProperties formatProperties
    ctypedef struct VkImageFormatProperties2:
        VkStructureType sType
        void* pNext
        VkImageFormatProperties imageFormatProperties
    ctypedef struct VkPhysicalDeviceImageFormatInfo2:
        VkStructureType sType
        void* pNext
        VkFormat format
        VkImageType type
        VkImageTiling tiling
        VkImageUsageFlags usage
        VkImageCreateFlags flags
    ctypedef struct VkQueueFamilyProperties2:
        VkStructureType sType
        void* pNext
        VkQueueFamilyProperties queueFamilyProperties
    ctypedef struct VkPhysicalDeviceMemoryProperties2:
        VkStructureType sType
        void* pNext
        VkPhysicalDeviceMemoryProperties memoryProperties
    ctypedef struct VkSparseImageFormatProperties2:
        VkStructureType sType
        void* pNext
        VkSparseImageFormatProperties properties
    ctypedef struct VkPhysicalDeviceSparseImageFormatInfo2:
        VkStructureType sType
        void* pNext
        VkFormat format
        VkImageType type
        VkSampleCountFlagBits samples
        VkImageUsageFlags usage
        VkImageTiling tiling
    ctypedef struct VkPhysicalDevicePointClippingProperties:
        VkStructureType sType
        void* pNext
        VkPointClippingBehavior pointClippingBehavior
    ctypedef struct VkInputAttachmentAspectReference:
        uint32_t subpass
        uint32_t inputAttachmentIndex
        VkImageAspectFlags aspectMask
    ctypedef struct VkRenderPassInputAttachmentAspectCreateInfo:
        VkStructureType sType
        void* pNext
        uint32_t aspectReferenceCount
        VkInputAttachmentAspectReference* pAspectReferences
    ctypedef struct VkImageViewUsageCreateInfo:
        VkStructureType sType
        void* pNext
        VkImageUsageFlags usage
    ctypedef struct VkPipelineTessellationDomainOriginStateCreateInfo:
        VkStructureType sType
        void* pNext
        VkTessellationDomainOrigin domainOrigin
    ctypedef struct VkRenderPassMultiviewCreateInfo:
        VkStructureType sType
        void* pNext
        uint32_t subpassCount
        uint32_t* pViewMasks
        uint32_t dependencyCount
        int32_t* pViewOffsets
        uint32_t correlationMaskCount
        uint32_t* pCorrelationMasks
    ctypedef struct VkPhysicalDeviceMultiviewFeatures:
        VkStructureType sType
        void* pNext
        VkBool32 multiview
        VkBool32 multiviewGeometryShader
        VkBool32 multiviewTessellationShader
    ctypedef struct VkPhysicalDeviceMultiviewProperties:
        VkStructureType sType
        void* pNext
        uint32_t maxMultiviewViewCount
        uint32_t maxMultiviewInstanceIndex
    ctypedef struct VkPhysicalDeviceVariablePointerFeatures:
        VkStructureType sType
        void* pNext
        VkBool32 variablePointersStorageBuffer
        VkBool32 variablePointers
    ctypedef struct VkPhysicalDeviceProtectedMemoryFeatures:
        VkStructureType sType
        void* pNext
        VkBool32 protectedMemory
    ctypedef struct VkPhysicalDeviceProtectedMemoryProperties:
        VkStructureType sType
        void* pNext
        VkBool32 protectedNoFault
    ctypedef struct VkDeviceQueueInfo2:
        VkStructureType sType
        void* pNext
        VkDeviceQueueCreateFlags flags
        uint32_t queueFamilyIndex
        uint32_t queueIndex
    ctypedef struct VkProtectedSubmitInfo:
        VkStructureType sType
        void* pNext
        VkBool32 protectedSubmit
    ctypedef struct VkSamplerYcbcrConversionCreateInfo:
        VkStructureType sType
        void* pNext
        VkFormat format
        VkSamplerYcbcrModelConversion ycbcrModel
        VkSamplerYcbcrRange ycbcrRange
        VkComponentMapping components
        VkChromaLocation xChromaOffset
        VkChromaLocation yChromaOffset
        VkFilter chromaFilter
        VkBool32 forceExplicitReconstruction
    ctypedef struct VkSamplerYcbcrConversionInfo:
        VkStructureType sType
        void* pNext
        VkSamplerYcbcrConversion conversion
    ctypedef struct VkBindImagePlaneMemoryInfo:
        VkStructureType sType
        void* pNext
        VkImageAspectFlagBits planeAspect
    ctypedef struct VkImagePlaneMemoryRequirementsInfo:
        VkStructureType sType
        void* pNext
        VkImageAspectFlagBits planeAspect
    ctypedef struct VkPhysicalDeviceSamplerYcbcrConversionFeatures:
        VkStructureType sType
        void* pNext
        VkBool32 samplerYcbcrConversion
    ctypedef struct VkSamplerYcbcrConversionImageFormatProperties:
        VkStructureType sType
        void* pNext
        uint32_t combinedImageSamplerDescriptorCount
    ctypedef struct VkDescriptorUpdateTemplateEntry:
        uint32_t dstBinding
        uint32_t dstArrayElement
        uint32_t descriptorCount
        VkDescriptorType descriptorType
        size_t offset
        size_t stride
    ctypedef struct VkDescriptorUpdateTemplateCreateInfo:
        VkStructureType sType
        void* pNext
        VkDescriptorUpdateTemplateCreateFlags flags
        uint32_t descriptorUpdateEntryCount
        VkDescriptorUpdateTemplateEntry* pDescriptorUpdateEntries
        VkDescriptorUpdateTemplateType templateType
        VkDescriptorSetLayout descriptorSetLayout
        VkPipelineBindPoint pipelineBindPoint
        VkPipelineLayout pipelineLayout
        uint32_t set
    ctypedef struct VkExternalMemoryProperties:
        VkExternalMemoryFeatureFlags externalMemoryFeatures
        VkExternalMemoryHandleTypeFlags exportFromImportedHandleTypes
        VkExternalMemoryHandleTypeFlags compatibleHandleTypes
    ctypedef struct VkPhysicalDeviceExternalImageFormatInfo:
        VkStructureType sType
        void* pNext
        VkExternalMemoryHandleTypeFlagBits handleType
    ctypedef struct VkExternalImageFormatProperties:
        VkStructureType sType
        void* pNext
        VkExternalMemoryProperties externalMemoryProperties
    ctypedef struct VkPhysicalDeviceExternalBufferInfo:
        VkStructureType sType
        void* pNext
        VkBufferCreateFlags flags
        VkBufferUsageFlags usage
        VkExternalMemoryHandleTypeFlagBits handleType
    ctypedef struct VkExternalBufferProperties:
        VkStructureType sType
        void* pNext
        VkExternalMemoryProperties externalMemoryProperties
    ctypedef struct VkPhysicalDeviceIDProperties:
        VkStructureType sType
        void* pNext
        uint8_t deviceUUID[16]
        uint8_t driverUUID[16]
        uint8_t deviceLUID[8]
        uint32_t deviceNodeMask
        VkBool32 deviceLUIDValid
    ctypedef struct VkExternalMemoryImageCreateInfo:
        VkStructureType sType
        void* pNext
        VkExternalMemoryHandleTypeFlags handleTypes
    ctypedef struct VkExternalMemoryBufferCreateInfo:
        VkStructureType sType
        void* pNext
        VkExternalMemoryHandleTypeFlags handleTypes
    ctypedef struct VkExportMemoryAllocateInfo:
        VkStructureType sType
        void* pNext
        VkExternalMemoryHandleTypeFlags handleTypes
    ctypedef struct VkPhysicalDeviceExternalFenceInfo:
        VkStructureType sType
        void* pNext
        VkExternalFenceHandleTypeFlagBits handleType
    ctypedef struct VkExternalFenceProperties:
        VkStructureType sType
        void* pNext
        VkExternalFenceHandleTypeFlags exportFromImportedHandleTypes
        VkExternalFenceHandleTypeFlags compatibleHandleTypes
        VkExternalFenceFeatureFlags externalFenceFeatures
    ctypedef struct VkExportFenceCreateInfo:
        VkStructureType sType
        void* pNext
        VkExternalFenceHandleTypeFlags handleTypes
    ctypedef struct VkExportSemaphoreCreateInfo:
        VkStructureType sType
        void* pNext
        VkExternalSemaphoreHandleTypeFlags handleTypes
    ctypedef struct VkPhysicalDeviceExternalSemaphoreInfo:
        VkStructureType sType
        void* pNext
        VkExternalSemaphoreHandleTypeFlagBits handleType
    ctypedef struct VkExternalSemaphoreProperties:
        VkStructureType sType
        void* pNext
        VkExternalSemaphoreHandleTypeFlags exportFromImportedHandleTypes
        VkExternalSemaphoreHandleTypeFlags compatibleHandleTypes
        VkExternalSemaphoreFeatureFlags externalSemaphoreFeatures
    ctypedef struct VkPhysicalDeviceMaintenance3Properties:
        VkStructureType sType
        void* pNext
        uint32_t maxPerSetDescriptors
        VkDeviceSize maxMemoryAllocationSize
    ctypedef struct VkDescriptorSetLayoutSupport:
        VkStructureType sType
        void* pNext
        VkBool32 supported
    ctypedef struct VkPhysicalDeviceShaderDrawParameterFeatures:
        VkStructureType sType
        void* pNext
        VkBool32 shaderDrawParameters
    ctypedef VkResult ( *PFN_vkEnumerateInstanceVersion)(uint32_t* pApiVersion);
    ctypedef VkResult ( *PFN_vkBindBufferMemory2)(VkDevice device, uint32_t bindInfoCount,  VkBindBufferMemoryInfo* pBindInfos);
    ctypedef VkResult ( *PFN_vkBindImageMemory2)(VkDevice device, uint32_t bindInfoCount,  VkBindImageMemoryInfo* pBindInfos);
    ctypedef void ( *PFN_vkGetDeviceGroupPeerMemoryFeatures)(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures);
    ctypedef void ( *PFN_vkCmdSetDeviceMask)(VkCommandBuffer commandBuffer, uint32_t deviceMask);
    ctypedef void ( *PFN_vkCmdDispatchBase)(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
    ctypedef VkResult ( *PFN_vkEnumeratePhysicalDeviceGroups)(VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);
    ctypedef void ( *PFN_vkGetImageMemoryRequirements2)(VkDevice device,  VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements);
    ctypedef void ( *PFN_vkGetBufferMemoryRequirements2)(VkDevice device,  VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements);
    ctypedef void ( *PFN_vkGetImageSparseMemoryRequirements2)(VkDevice device,  VkImageSparseMemoryRequirementsInfo2* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);
    ctypedef void ( *PFN_vkGetPhysicalDeviceFeatures2)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures);
    ctypedef void ( *PFN_vkGetPhysicalDeviceProperties2)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties);
    ctypedef void ( *PFN_vkGetPhysicalDeviceFormatProperties2)(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties);
    ctypedef VkResult ( *PFN_vkGetPhysicalDeviceImageFormatProperties2)(VkPhysicalDevice physicalDevice,  VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties);
    ctypedef void ( *PFN_vkGetPhysicalDeviceQueueFamilyProperties2)(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties);
    ctypedef void ( *PFN_vkGetPhysicalDeviceMemoryProperties2)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties);
    ctypedef void ( *PFN_vkGetPhysicalDeviceSparseImageFormatProperties2)(VkPhysicalDevice physicalDevice,  VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties);
    ctypedef void ( *PFN_vkTrimCommandPool)(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags);
    ctypedef void ( *PFN_vkGetDeviceQueue2)(VkDevice device,  VkDeviceQueueInfo2* pQueueInfo, VkQueue* pQueue);
    ctypedef VkResult ( *PFN_vkCreateSamplerYcbcrConversion)(VkDevice device,  VkSamplerYcbcrConversionCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion);
    ctypedef void ( *PFN_vkDestroySamplerYcbcrConversion)(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkCreateDescriptorUpdateTemplate)(VkDevice device,  VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate);
    ctypedef void ( *PFN_vkDestroyDescriptorUpdateTemplate)(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate,  VkAllocationCallbacks* pAllocator);
    ctypedef void ( *PFN_vkUpdateDescriptorSetWithTemplate)(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate,  void* pData);
    ctypedef void ( *PFN_vkGetPhysicalDeviceExternalBufferProperties)(VkPhysicalDevice physicalDevice,  VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties);
    ctypedef void ( *PFN_vkGetPhysicalDeviceExternalFenceProperties)(VkPhysicalDevice physicalDevice,  VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties);
    ctypedef void ( *PFN_vkGetPhysicalDeviceExternalSemaphoreProperties)(VkPhysicalDevice physicalDevice,  VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties);
    ctypedef void ( *PFN_vkGetDescriptorSetLayoutSupport)(VkDevice device,  VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport);
    cdef VkResult vkEnumerateInstanceVersion(
        uint32_t* pApiVersion);
    cdef VkResult vkBindBufferMemory2(
        VkDevice device,
        uint32_t bindInfoCount,
        VkBindBufferMemoryInfo* pBindInfos);
    cdef VkResult vkBindImageMemory2(
        VkDevice device,
        uint32_t bindInfoCount,
        VkBindImageMemoryInfo* pBindInfos);
    cdef void vkGetDeviceGroupPeerMemoryFeatures(
        VkDevice device,
        uint32_t heapIndex,
        uint32_t localDeviceIndex,
        uint32_t remoteDeviceIndex,
        VkPeerMemoryFeatureFlags* pPeerMemoryFeatures);
    cdef void vkCmdSetDeviceMask(
        VkCommandBuffer commandBuffer,
        uint32_t deviceMask);
    cdef void vkCmdDispatchBase(
        VkCommandBuffer commandBuffer,
        uint32_t baseGroupX,
        uint32_t baseGroupY,
        uint32_t baseGroupZ,
        uint32_t groupCountX,
        uint32_t groupCountY,
        uint32_t groupCountZ);
    cdef VkResult vkEnumeratePhysicalDeviceGroups(
        VkInstance instance,
        uint32_t* pPhysicalDeviceGroupCount,
        VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);
    cdef void vkGetImageMemoryRequirements2(
        VkDevice device,
        VkImageMemoryRequirementsInfo2* pInfo,
        VkMemoryRequirements2* pMemoryRequirements);
    cdef void vkGetBufferMemoryRequirements2(
        VkDevice device,
        VkBufferMemoryRequirementsInfo2* pInfo,
        VkMemoryRequirements2* pMemoryRequirements);
    cdef void vkGetImageSparseMemoryRequirements2(
        VkDevice device,
        VkImageSparseMemoryRequirementsInfo2* pInfo,
        uint32_t* pSparseMemoryRequirementCount,
        VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);
    cdef void vkGetPhysicalDeviceFeatures2(
        VkPhysicalDevice physicalDevice,
        VkPhysicalDeviceFeatures2* pFeatures);
    cdef void vkGetPhysicalDeviceProperties2(
        VkPhysicalDevice physicalDevice,
        VkPhysicalDeviceProperties2* pProperties);
    cdef void vkGetPhysicalDeviceFormatProperties2(
        VkPhysicalDevice physicalDevice,
        VkFormat format,
        VkFormatProperties2* pFormatProperties);
    cdef VkResult vkGetPhysicalDeviceImageFormatProperties2(
        VkPhysicalDevice physicalDevice,
        VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,
        VkImageFormatProperties2* pImageFormatProperties);
    cdef void vkGetPhysicalDeviceQueueFamilyProperties2(
        VkPhysicalDevice physicalDevice,
        uint32_t* pQueueFamilyPropertyCount,
        VkQueueFamilyProperties2* pQueueFamilyProperties);
    cdef void vkGetPhysicalDeviceMemoryProperties2(
        VkPhysicalDevice physicalDevice,
        VkPhysicalDeviceMemoryProperties2* pMemoryProperties);
    cdef void vkGetPhysicalDeviceSparseImageFormatProperties2(
        VkPhysicalDevice physicalDevice,
        VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
        uint32_t* pPropertyCount,
        VkSparseImageFormatProperties2* pProperties);
    cdef void vkTrimCommandPool(
        VkDevice device,
        VkCommandPool commandPool,
        VkCommandPoolTrimFlags flags);
    cdef void vkGetDeviceQueue2(
        VkDevice device,
        VkDeviceQueueInfo2* pQueueInfo,
        VkQueue* pQueue);
    cdef VkResult vkCreateSamplerYcbcrConversion(
        VkDevice device,
        VkSamplerYcbcrConversionCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkSamplerYcbcrConversion* pYcbcrConversion);
    cdef void vkDestroySamplerYcbcrConversion(
        VkDevice device,
        VkSamplerYcbcrConversion ycbcrConversion,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkCreateDescriptorUpdateTemplate(
        VkDevice device,
        VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate);
    cdef void vkDestroyDescriptorUpdateTemplate(
        VkDevice device,
        VkDescriptorUpdateTemplate descriptorUpdateTemplate,
        VkAllocationCallbacks* pAllocator);
    cdef void vkUpdateDescriptorSetWithTemplate(
        VkDevice device,
        VkDescriptorSet descriptorSet,
        VkDescriptorUpdateTemplate descriptorUpdateTemplate,
        void* pData);
    cdef void vkGetPhysicalDeviceExternalBufferProperties(
        VkPhysicalDevice physicalDevice,
        VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
        VkExternalBufferProperties* pExternalBufferProperties);
    cdef void vkGetPhysicalDeviceExternalFenceProperties(
        VkPhysicalDevice physicalDevice,
        VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
        VkExternalFenceProperties* pExternalFenceProperties);
    cdef void vkGetPhysicalDeviceExternalSemaphoreProperties(
        VkPhysicalDevice physicalDevice,
        VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
        VkExternalSemaphoreProperties* pExternalSemaphoreProperties);
    cdef void vkGetDescriptorSetLayoutSupport(
        VkDevice device,
        VkDescriptorSetLayoutCreateInfo* pCreateInfo,
        VkDescriptorSetLayoutSupport* pSupport);
    ctypedef struct VkSurfaceKHR:
        pass
    cdef enum VkColorSpaceKHR:
        VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0
        VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001
        VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002
        VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = 1000104003
        VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004
        VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005
        VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006
        VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007
        VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008
        VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009
        VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010
        VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011
        VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012
        VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013
        VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014
        VK_COLORSPACE_SRGB_NONLINEAR_KHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
        VK_COLOR_SPACE_BEGIN_RANGE_KHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
        VK_COLOR_SPACE_END_RANGE_KHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
        VK_COLOR_SPACE_RANGE_SIZE_KHR = (VK_COLOR_SPACE_SRGB_NONLINEAR_KHR - VK_COLOR_SPACE_SRGB_NONLINEAR_KHR + 1)
        VK_COLOR_SPACE_MAX_ENUM_KHR = 0x7FFFFFFF
    cdef enum VkPresentModeKHR:
        VK_PRESENT_MODE_IMMEDIATE_KHR = 0
        VK_PRESENT_MODE_MAILBOX_KHR = 1
        VK_PRESENT_MODE_FIFO_KHR = 2
        VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3
        VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000
        VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001
        VK_PRESENT_MODE_BEGIN_RANGE_KHR = VK_PRESENT_MODE_IMMEDIATE_KHR
        VK_PRESENT_MODE_END_RANGE_KHR = VK_PRESENT_MODE_FIFO_RELAXED_KHR
        VK_PRESENT_MODE_RANGE_SIZE_KHR = (VK_PRESENT_MODE_FIFO_RELAXED_KHR - VK_PRESENT_MODE_IMMEDIATE_KHR + 1)
        VK_PRESENT_MODE_MAX_ENUM_KHR = 0x7FFFFFFF
    cdef enum VkSurfaceTransformFlagBitsKHR:
        VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 0x00000001
        VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 0x00000002
        VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 0x00000004
        VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 0x00000008
        VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 0x00000010
        VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 0x00000020
        VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 0x00000040
        VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 0x00000080
        VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 0x00000100
        VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
    ctypedef VkFlags VkSurfaceTransformFlagsKHR;
    cdef enum VkCompositeAlphaFlagBitsKHR:
        VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 0x00000001
        VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 0x00000002
        VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 0x00000004
        VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 0x00000008
        VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
    ctypedef VkFlags VkCompositeAlphaFlagsKHR;
    ctypedef struct VkSurfaceCapabilitiesKHR:
        uint32_t minImageCount
        uint32_t maxImageCount
        VkExtent2D currentExtent
        VkExtent2D minImageExtent
        VkExtent2D maxImageExtent
        uint32_t maxImageArrayLayers
        VkSurfaceTransformFlagsKHR supportedTransforms
        VkSurfaceTransformFlagBitsKHR currentTransform
        VkCompositeAlphaFlagsKHR supportedCompositeAlpha
        VkImageUsageFlags supportedUsageFlags
    ctypedef struct VkSurfaceFormatKHR:
        VkFormat format
        VkColorSpaceKHR colorSpace
    ctypedef void ( *PFN_vkDestroySurfaceKHR)(VkInstance instance, VkSurfaceKHR surface,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkGetPhysicalDeviceSurfaceSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported);
    ctypedef VkResult ( *PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities);
    ctypedef VkResult ( *PFN_vkGetPhysicalDeviceSurfaceFormatsKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats);
    ctypedef VkResult ( *PFN_vkGetPhysicalDeviceSurfacePresentModesKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes);
    cdef void vkDestroySurfaceKHR(
        VkInstance instance,
        VkSurfaceKHR surface,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkGetPhysicalDeviceSurfaceSupportKHR(
        VkPhysicalDevice physicalDevice,
        uint32_t queueFamilyIndex,
        VkSurfaceKHR surface,
        VkBool32* pSupported);
    cdef VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
        VkPhysicalDevice physicalDevice,
        VkSurfaceKHR surface,
        VkSurfaceCapabilitiesKHR* pSurfaceCapabilities);
    cdef VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(
        VkPhysicalDevice physicalDevice,
        VkSurfaceKHR surface,
        uint32_t* pSurfaceFormatCount,
        VkSurfaceFormatKHR* pSurfaceFormats);
    cdef VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(
        VkPhysicalDevice physicalDevice,
        VkSurfaceKHR surface,
        uint32_t* pPresentModeCount,
        VkPresentModeKHR* pPresentModes);
    ctypedef struct VkSwapchainKHR:
        pass
    cdef enum VkSwapchainCreateFlagBitsKHR:
        VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 0x00000001
        VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 0x00000002
        VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 0x00000004
        VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
    ctypedef VkFlags VkSwapchainCreateFlagsKHR;
    cdef enum VkDeviceGroupPresentModeFlagBitsKHR:
        VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 0x00000001
        VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 0x00000002
        VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 0x00000004
        VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 0x00000008
        VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
    ctypedef VkFlags VkDeviceGroupPresentModeFlagsKHR;
    ctypedef struct VkSwapchainCreateInfoKHR:
        VkStructureType sType
        void* pNext
        VkSwapchainCreateFlagsKHR flags
        VkSurfaceKHR surface
        uint32_t minImageCount
        VkFormat imageFormat
        VkColorSpaceKHR imageColorSpace
        VkExtent2D imageExtent
        uint32_t imageArrayLayers
        VkImageUsageFlags imageUsage
        VkSharingMode imageSharingMode
        uint32_t queueFamilyIndexCount
        uint32_t* pQueueFamilyIndices
        VkSurfaceTransformFlagBitsKHR preTransform
        VkCompositeAlphaFlagBitsKHR compositeAlpha
        VkPresentModeKHR presentMode
        VkBool32 clipped
        VkSwapchainKHR oldSwapchain
    ctypedef struct VkPresentInfoKHR:
        VkStructureType sType
        void* pNext
        uint32_t waitSemaphoreCount
        VkSemaphore* pWaitSemaphores
        uint32_t swapchainCount
        VkSwapchainKHR* pSwapchains
        uint32_t* pImageIndices
        VkResult* pResults
    ctypedef struct VkImageSwapchainCreateInfoKHR:
        VkStructureType sType
        void* pNext
        VkSwapchainKHR swapchain
    ctypedef struct VkBindImageMemorySwapchainInfoKHR:
        VkStructureType sType
        void* pNext
        VkSwapchainKHR swapchain
        uint32_t imageIndex
    ctypedef struct VkAcquireNextImageInfoKHR:
        VkStructureType sType
        void* pNext
        VkSwapchainKHR swapchain
        uint64_t timeout
        VkSemaphore semaphore
        VkFence fence
        uint32_t deviceMask
    ctypedef struct VkDeviceGroupPresentCapabilitiesKHR:
        VkStructureType sType
        void* pNext
        uint32_t presentMask[32]
        VkDeviceGroupPresentModeFlagsKHR modes
    ctypedef struct VkDeviceGroupPresentInfoKHR:
        VkStructureType sType
        void* pNext
        uint32_t swapchainCount
        uint32_t* pDeviceMasks
        VkDeviceGroupPresentModeFlagBitsKHR mode
    ctypedef struct VkDeviceGroupSwapchainCreateInfoKHR:
        VkStructureType sType
        void* pNext
        VkDeviceGroupPresentModeFlagsKHR modes
    ctypedef VkResult ( *PFN_vkCreateSwapchainKHR)(VkDevice device,  VkSwapchainCreateInfoKHR* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchain);
    ctypedef void ( *PFN_vkDestroySwapchainKHR)(VkDevice device, VkSwapchainKHR swapchain,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkGetSwapchainImagesKHR)(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pSwapchainImageCount, VkImage* pSwapchainImages);
    ctypedef VkResult ( *PFN_vkAcquireNextImageKHR)(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t* pImageIndex);
    ctypedef VkResult ( *PFN_vkQueuePresentKHR)(VkQueue queue,  VkPresentInfoKHR* pPresentInfo);
    ctypedef VkResult ( *PFN_vkGetDeviceGroupPresentCapabilitiesKHR)(VkDevice device, VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities);
    ctypedef VkResult ( *PFN_vkGetDeviceGroupSurfacePresentModesKHR)(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR* pModes);
    ctypedef VkResult ( *PFN_vkGetPhysicalDevicePresentRectanglesKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pRectCount, VkRect2D* pRects);
    ctypedef VkResult ( *PFN_vkAcquireNextImage2KHR)(VkDevice device,  VkAcquireNextImageInfoKHR* pAcquireInfo, uint32_t* pImageIndex);
    cdef VkResult vkCreateSwapchainKHR(
        VkDevice device,
        VkSwapchainCreateInfoKHR* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkSwapchainKHR* pSwapchain);
    cdef void vkDestroySwapchainKHR(
        VkDevice device,
        VkSwapchainKHR swapchain,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkGetSwapchainImagesKHR(
        VkDevice device,
        VkSwapchainKHR swapchain,
        uint32_t* pSwapchainImageCount,
        VkImage* pSwapchainImages);
    cdef VkResult vkAcquireNextImageKHR(
        VkDevice device,
        VkSwapchainKHR swapchain,
        uint64_t timeout,
        VkSemaphore semaphore,
        VkFence fence,
        uint32_t* pImageIndex);
    cdef VkResult vkQueuePresentKHR(
        VkQueue queue,
        VkPresentInfoKHR* pPresentInfo);
    cdef VkResult vkGetDeviceGroupPresentCapabilitiesKHR(
        VkDevice device,
        VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities);
    cdef VkResult vkGetDeviceGroupSurfacePresentModesKHR(
        VkDevice device,
        VkSurfaceKHR surface,
        VkDeviceGroupPresentModeFlagsKHR* pModes);
    cdef VkResult vkGetPhysicalDevicePresentRectanglesKHR(
        VkPhysicalDevice physicalDevice,
        VkSurfaceKHR surface,
        uint32_t* pRectCount,
        VkRect2D* pRects);
    cdef VkResult vkAcquireNextImage2KHR(
        VkDevice device,
        VkAcquireNextImageInfoKHR* pAcquireInfo,
        uint32_t* pImageIndex);
    ctypedef struct VkDisplayKHR:
        pass
    ctypedef struct VkDisplayModeKHR:
        pass
    cdef enum VkDisplayPlaneAlphaFlagBitsKHR:
        VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 0x00000001
        VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 0x00000002
        VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 0x00000004
        VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 0x00000008
        VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
    ctypedef VkFlags VkDisplayPlaneAlphaFlagsKHR;
    ctypedef VkFlags VkDisplayModeCreateFlagsKHR;
    ctypedef VkFlags VkDisplaySurfaceCreateFlagsKHR;
    ctypedef struct VkDisplayPropertiesKHR:
        VkDisplayKHR display
        char* displayName
        VkExtent2D physicalDimensions
        VkExtent2D physicalResolution
        VkSurfaceTransformFlagsKHR supportedTransforms
        VkBool32 planeReorderPossible
        VkBool32 persistentContent
    ctypedef struct VkDisplayModeParametersKHR:
        VkExtent2D visibleRegion
        uint32_t refreshRate
    ctypedef struct VkDisplayModePropertiesKHR:
        VkDisplayModeKHR displayMode
        VkDisplayModeParametersKHR parameters
    ctypedef struct VkDisplayModeCreateInfoKHR:
        VkStructureType sType
        void* pNext
        VkDisplayModeCreateFlagsKHR flags
        VkDisplayModeParametersKHR parameters
    ctypedef struct VkDisplayPlaneCapabilitiesKHR:
        VkDisplayPlaneAlphaFlagsKHR supportedAlpha
        VkOffset2D minSrcPosition
        VkOffset2D maxSrcPosition
        VkExtent2D minSrcExtent
        VkExtent2D maxSrcExtent
        VkOffset2D minDstPosition
        VkOffset2D maxDstPosition
        VkExtent2D minDstExtent
        VkExtent2D maxDstExtent
    ctypedef struct VkDisplayPlanePropertiesKHR:
        VkDisplayKHR currentDisplay
        uint32_t currentStackIndex
    ctypedef struct VkDisplaySurfaceCreateInfoKHR:
        VkStructureType sType
        void* pNext
        VkDisplaySurfaceCreateFlagsKHR flags
        VkDisplayModeKHR displayMode
        uint32_t planeIndex
        uint32_t planeStackIndex
        VkSurfaceTransformFlagBitsKHR transform
        float globalAlpha
        VkDisplayPlaneAlphaFlagBitsKHR alphaMode
        VkExtent2D imageExtent
    ctypedef VkResult ( *PFN_vkGetPhysicalDeviceDisplayPropertiesKHR)(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPropertiesKHR* pProperties);
    ctypedef VkResult ( *PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR)(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties);
    ctypedef VkResult ( *PFN_vkGetDisplayPlaneSupportedDisplaysKHR)(VkPhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t* pDisplayCount, VkDisplayKHR* pDisplays);
    ctypedef VkResult ( *PFN_vkGetDisplayModePropertiesKHR)(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModePropertiesKHR* pProperties);
    ctypedef VkResult ( *PFN_vkCreateDisplayModeKHR)(VkPhysicalDevice physicalDevice, VkDisplayKHR display,  VkDisplayModeCreateInfoKHR* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkDisplayModeKHR* pMode);
    ctypedef VkResult ( *PFN_vkGetDisplayPlaneCapabilitiesKHR)(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities);
    ctypedef VkResult ( *PFN_vkCreateDisplayPlaneSurfaceKHR)(VkInstance instance,  VkDisplaySurfaceCreateInfoKHR* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);
    cdef VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(
        VkPhysicalDevice physicalDevice,
        uint32_t* pPropertyCount,
        VkDisplayPropertiesKHR* pProperties);
    cdef VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(
        VkPhysicalDevice physicalDevice,
        uint32_t* pPropertyCount,
        VkDisplayPlanePropertiesKHR* pProperties);
    cdef VkResult vkGetDisplayPlaneSupportedDisplaysKHR(
        VkPhysicalDevice physicalDevice,
        uint32_t planeIndex,
        uint32_t* pDisplayCount,
        VkDisplayKHR* pDisplays);
    cdef VkResult vkGetDisplayModePropertiesKHR(
        VkPhysicalDevice physicalDevice,
        VkDisplayKHR display,
        uint32_t* pPropertyCount,
        VkDisplayModePropertiesKHR* pProperties);
    cdef VkResult vkCreateDisplayModeKHR(
        VkPhysicalDevice physicalDevice,
        VkDisplayKHR display,
        VkDisplayModeCreateInfoKHR* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkDisplayModeKHR* pMode);
    cdef VkResult vkGetDisplayPlaneCapabilitiesKHR(
        VkPhysicalDevice physicalDevice,
        VkDisplayModeKHR mode,
        uint32_t planeIndex,
        VkDisplayPlaneCapabilitiesKHR* pCapabilities);
    cdef VkResult vkCreateDisplayPlaneSurfaceKHR(
        VkInstance instance,
        VkDisplaySurfaceCreateInfoKHR* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkSurfaceKHR* pSurface);
    ctypedef struct VkDisplayPresentInfoKHR:
        VkStructureType sType
        void* pNext
        VkRect2D srcRect
        VkRect2D dstRect
        VkBool32 persistent
    ctypedef VkResult ( *PFN_vkCreateSharedSwapchainsKHR)(VkDevice device, uint32_t swapchainCount,  VkSwapchainCreateInfoKHR* pCreateInfos,  VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchains);
    cdef VkResult vkCreateSharedSwapchainsKHR(
        VkDevice device,
        uint32_t swapchainCount,
        VkSwapchainCreateInfoKHR* pCreateInfos,
        VkAllocationCallbacks* pAllocator,
        VkSwapchainKHR* pSwapchains);
    ctypedef VkRenderPassMultiviewCreateInfo VkRenderPassMultiviewCreateInfoKHR;
    ctypedef VkPhysicalDeviceMultiviewFeatures VkPhysicalDeviceMultiviewFeaturesKHR;
    ctypedef VkPhysicalDeviceMultiviewProperties VkPhysicalDeviceMultiviewPropertiesKHR;
    ctypedef VkPhysicalDeviceFeatures2 VkPhysicalDeviceFeatures2KHR;
    ctypedef VkPhysicalDeviceProperties2 VkPhysicalDeviceProperties2KHR;
    ctypedef VkFormatProperties2 VkFormatProperties2KHR;
    ctypedef VkImageFormatProperties2 VkImageFormatProperties2KHR;
    ctypedef VkPhysicalDeviceImageFormatInfo2 VkPhysicalDeviceImageFormatInfo2KHR;
    ctypedef VkQueueFamilyProperties2 VkQueueFamilyProperties2KHR;
    ctypedef VkPhysicalDeviceMemoryProperties2 VkPhysicalDeviceMemoryProperties2KHR;
    ctypedef VkSparseImageFormatProperties2 VkSparseImageFormatProperties2KHR;
    ctypedef VkPhysicalDeviceSparseImageFormatInfo2 VkPhysicalDeviceSparseImageFormatInfo2KHR;
    ctypedef void ( *PFN_vkGetPhysicalDeviceFeatures2KHR)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures);
    ctypedef void ( *PFN_vkGetPhysicalDeviceProperties2KHR)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties);
    ctypedef void ( *PFN_vkGetPhysicalDeviceFormatProperties2KHR)(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties);
    ctypedef VkResult ( *PFN_vkGetPhysicalDeviceImageFormatProperties2KHR)(VkPhysicalDevice physicalDevice,  VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties);
    ctypedef void ( *PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR)(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties);
    ctypedef void ( *PFN_vkGetPhysicalDeviceMemoryProperties2KHR)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties);
    ctypedef void ( *PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR)(VkPhysicalDevice physicalDevice,  VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties);
    cdef void vkGetPhysicalDeviceFeatures2KHR(
        VkPhysicalDevice physicalDevice,
        VkPhysicalDeviceFeatures2* pFeatures);
    cdef void vkGetPhysicalDeviceProperties2KHR(
        VkPhysicalDevice physicalDevice,
        VkPhysicalDeviceProperties2* pProperties);
    cdef void vkGetPhysicalDeviceFormatProperties2KHR(
        VkPhysicalDevice physicalDevice,
        VkFormat format,
        VkFormatProperties2* pFormatProperties);
    cdef VkResult vkGetPhysicalDeviceImageFormatProperties2KHR(
        VkPhysicalDevice physicalDevice,
        VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,
        VkImageFormatProperties2* pImageFormatProperties);
    cdef void vkGetPhysicalDeviceQueueFamilyProperties2KHR(
        VkPhysicalDevice physicalDevice,
        uint32_t* pQueueFamilyPropertyCount,
        VkQueueFamilyProperties2* pQueueFamilyProperties);
    cdef void vkGetPhysicalDeviceMemoryProperties2KHR(
        VkPhysicalDevice physicalDevice,
        VkPhysicalDeviceMemoryProperties2* pMemoryProperties);
    cdef void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(
        VkPhysicalDevice physicalDevice,
        VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
        uint32_t* pPropertyCount,
        VkSparseImageFormatProperties2* pProperties);
    ctypedef VkPeerMemoryFeatureFlags VkPeerMemoryFeatureFlagsKHR;
    ctypedef VkPeerMemoryFeatureFlagBits VkPeerMemoryFeatureFlagBitsKHR;
    ctypedef VkMemoryAllocateFlags VkMemoryAllocateFlagsKHR;
    ctypedef VkMemoryAllocateFlagBits VkMemoryAllocateFlagBitsKHR;
    ctypedef VkMemoryAllocateFlagsInfo VkMemoryAllocateFlagsInfoKHR;
    ctypedef VkDeviceGroupRenderPassBeginInfo VkDeviceGroupRenderPassBeginInfoKHR;
    ctypedef VkDeviceGroupCommandBufferBeginInfo VkDeviceGroupCommandBufferBeginInfoKHR;
    ctypedef VkDeviceGroupSubmitInfo VkDeviceGroupSubmitInfoKHR;
    ctypedef VkDeviceGroupBindSparseInfo VkDeviceGroupBindSparseInfoKHR;
    ctypedef VkBindBufferMemoryDeviceGroupInfo VkBindBufferMemoryDeviceGroupInfoKHR;
    ctypedef VkBindImageMemoryDeviceGroupInfo VkBindImageMemoryDeviceGroupInfoKHR;
    ctypedef void ( *PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR)(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures);
    ctypedef void ( *PFN_vkCmdSetDeviceMaskKHR)(VkCommandBuffer commandBuffer, uint32_t deviceMask);
    ctypedef void ( *PFN_vkCmdDispatchBaseKHR)(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
    cdef void vkGetDeviceGroupPeerMemoryFeaturesKHR(
        VkDevice device,
        uint32_t heapIndex,
        uint32_t localDeviceIndex,
        uint32_t remoteDeviceIndex,
        VkPeerMemoryFeatureFlags* pPeerMemoryFeatures);
    cdef void vkCmdSetDeviceMaskKHR(
        VkCommandBuffer commandBuffer,
        uint32_t deviceMask);
    cdef void vkCmdDispatchBaseKHR(
        VkCommandBuffer commandBuffer,
        uint32_t baseGroupX,
        uint32_t baseGroupY,
        uint32_t baseGroupZ,
        uint32_t groupCountX,
        uint32_t groupCountY,
        uint32_t groupCountZ);
    ctypedef VkCommandPoolTrimFlags VkCommandPoolTrimFlagsKHR;
    ctypedef void ( *PFN_vkTrimCommandPoolKHR)(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags);
    cdef void vkTrimCommandPoolKHR(
        VkDevice device,
        VkCommandPool commandPool,
        VkCommandPoolTrimFlags flags);
    ctypedef VkPhysicalDeviceGroupProperties VkPhysicalDeviceGroupPropertiesKHR;
    ctypedef VkDeviceGroupDeviceCreateInfo VkDeviceGroupDeviceCreateInfoKHR;
    ctypedef VkResult ( *PFN_vkEnumeratePhysicalDeviceGroupsKHR)(VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);
    cdef VkResult vkEnumeratePhysicalDeviceGroupsKHR(
        VkInstance instance,
        uint32_t* pPhysicalDeviceGroupCount,
        VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);
    ctypedef VkExternalMemoryHandleTypeFlags VkExternalMemoryHandleTypeFlagsKHR;
    ctypedef VkExternalMemoryHandleTypeFlagBits VkExternalMemoryHandleTypeFlagBitsKHR;
    ctypedef VkExternalMemoryFeatureFlags VkExternalMemoryFeatureFlagsKHR;
    ctypedef VkExternalMemoryFeatureFlagBits VkExternalMemoryFeatureFlagBitsKHR;
    ctypedef VkExternalMemoryProperties VkExternalMemoryPropertiesKHR;
    ctypedef VkPhysicalDeviceExternalImageFormatInfo VkPhysicalDeviceExternalImageFormatInfoKHR;
    ctypedef VkExternalImageFormatProperties VkExternalImageFormatPropertiesKHR;
    ctypedef VkPhysicalDeviceExternalBufferInfo VkPhysicalDeviceExternalBufferInfoKHR;
    ctypedef VkExternalBufferProperties VkExternalBufferPropertiesKHR;
    ctypedef VkPhysicalDeviceIDProperties VkPhysicalDeviceIDPropertiesKHR;
    ctypedef void ( *PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR)(VkPhysicalDevice physicalDevice,  VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties);
    cdef void vkGetPhysicalDeviceExternalBufferPropertiesKHR(
        VkPhysicalDevice physicalDevice,
        VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
        VkExternalBufferProperties* pExternalBufferProperties);
    ctypedef VkExternalMemoryImageCreateInfo VkExternalMemoryImageCreateInfoKHR;
    ctypedef VkExternalMemoryBufferCreateInfo VkExternalMemoryBufferCreateInfoKHR;
    ctypedef VkExportMemoryAllocateInfo VkExportMemoryAllocateInfoKHR;
    ctypedef struct VkImportMemoryFdInfoKHR:
        VkStructureType sType
        void* pNext
        VkExternalMemoryHandleTypeFlagBits handleType
        int fd
    ctypedef struct VkMemoryFdPropertiesKHR:
        VkStructureType sType
        void* pNext
        uint32_t memoryTypeBits
    ctypedef struct VkMemoryGetFdInfoKHR:
        VkStructureType sType
        void* pNext
        VkDeviceMemory memory
        VkExternalMemoryHandleTypeFlagBits handleType
    ctypedef VkResult ( *PFN_vkGetMemoryFdKHR)(VkDevice device,  VkMemoryGetFdInfoKHR* pGetFdInfo, int* pFd);
    ctypedef VkResult ( *PFN_vkGetMemoryFdPropertiesKHR)(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR* pMemoryFdProperties);
    cdef VkResult vkGetMemoryFdKHR(
        VkDevice device,
        VkMemoryGetFdInfoKHR* pGetFdInfo,
        int* pFd);
    cdef VkResult vkGetMemoryFdPropertiesKHR(
        VkDevice device,
        VkExternalMemoryHandleTypeFlagBits handleType,
        int fd,
        VkMemoryFdPropertiesKHR* pMemoryFdProperties);
    ctypedef VkExternalSemaphoreHandleTypeFlags VkExternalSemaphoreHandleTypeFlagsKHR;
    ctypedef VkExternalSemaphoreHandleTypeFlagBits VkExternalSemaphoreHandleTypeFlagBitsKHR;
    ctypedef VkExternalSemaphoreFeatureFlags VkExternalSemaphoreFeatureFlagsKHR;
    ctypedef VkExternalSemaphoreFeatureFlagBits VkExternalSemaphoreFeatureFlagBitsKHR;
    ctypedef VkPhysicalDeviceExternalSemaphoreInfo VkPhysicalDeviceExternalSemaphoreInfoKHR;
    ctypedef VkExternalSemaphoreProperties VkExternalSemaphorePropertiesKHR;
    ctypedef void ( *PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR)(VkPhysicalDevice physicalDevice,  VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties);
    cdef void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(
        VkPhysicalDevice physicalDevice,
        VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
        VkExternalSemaphoreProperties* pExternalSemaphoreProperties);
    ctypedef VkSemaphoreImportFlags VkSemaphoreImportFlagsKHR;
    ctypedef VkSemaphoreImportFlagBits VkSemaphoreImportFlagBitsKHR;
    ctypedef VkExportSemaphoreCreateInfo VkExportSemaphoreCreateInfoKHR;
    ctypedef struct VkImportSemaphoreFdInfoKHR:
        VkStructureType sType
        void* pNext
        VkSemaphore semaphore
        VkSemaphoreImportFlags flags
        VkExternalSemaphoreHandleTypeFlagBits handleType
        int fd
    ctypedef struct VkSemaphoreGetFdInfoKHR:
        VkStructureType sType
        void* pNext
        VkSemaphore semaphore
        VkExternalSemaphoreHandleTypeFlagBits handleType
    ctypedef VkResult ( *PFN_vkImportSemaphoreFdKHR)(VkDevice device,  VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo);
    ctypedef VkResult ( *PFN_vkGetSemaphoreFdKHR)(VkDevice device,  VkSemaphoreGetFdInfoKHR* pGetFdInfo, int* pFd);
    cdef VkResult vkImportSemaphoreFdKHR(
        VkDevice device,
        VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo);
    cdef VkResult vkGetSemaphoreFdKHR(
        VkDevice device,
        VkSemaphoreGetFdInfoKHR* pGetFdInfo,
        int* pFd);
    ctypedef struct VkPhysicalDevicePushDescriptorPropertiesKHR:
        VkStructureType sType
        void* pNext
        uint32_t maxPushDescriptors
    ctypedef void ( *PFN_vkCmdPushDescriptorSetKHR)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount,  VkWriteDescriptorSet* pDescriptorWrites);
    ctypedef void ( *PFN_vkCmdPushDescriptorSetWithTemplateKHR)(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set,  void* pData);
    cdef void vkCmdPushDescriptorSetKHR(
        VkCommandBuffer commandBuffer,
        VkPipelineBindPoint pipelineBindPoint,
        VkPipelineLayout layout,
        uint32_t set,
        uint32_t descriptorWriteCount,
        VkWriteDescriptorSet* pDescriptorWrites);
    cdef void vkCmdPushDescriptorSetWithTemplateKHR(
        VkCommandBuffer commandBuffer,
        VkDescriptorUpdateTemplate descriptorUpdateTemplate,
        VkPipelineLayout layout,
        uint32_t set,
        void* pData);
    ctypedef struct VkPhysicalDeviceFloat16Int8FeaturesKHR:
        VkStructureType sType
        void* pNext
        VkBool32 shaderFloat16
        VkBool32 shaderInt8
    ctypedef VkPhysicalDevice16BitStorageFeatures VkPhysicalDevice16BitStorageFeaturesKHR;
    ctypedef struct VkRectLayerKHR:
        VkOffset2D offset
        VkExtent2D extent
        uint32_t layer
    ctypedef struct VkPresentRegionKHR:
        uint32_t rectangleCount
        VkRectLayerKHR* pRectangles
    ctypedef struct VkPresentRegionsKHR:
        VkStructureType sType
        void* pNext
        uint32_t swapchainCount
        VkPresentRegionKHR* pRegions
    ctypedef VkDescriptorUpdateTemplate VkDescriptorUpdateTemplateKHR;
    ctypedef VkDescriptorUpdateTemplateType VkDescriptorUpdateTemplateTypeKHR;
    ctypedef VkDescriptorUpdateTemplateCreateFlags VkDescriptorUpdateTemplateCreateFlagsKHR;
    ctypedef VkDescriptorUpdateTemplateEntry VkDescriptorUpdateTemplateEntryKHR;
    ctypedef VkDescriptorUpdateTemplateCreateInfo VkDescriptorUpdateTemplateCreateInfoKHR;
    ctypedef VkResult ( *PFN_vkCreateDescriptorUpdateTemplateKHR)(VkDevice device,  VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate);
    ctypedef void ( *PFN_vkDestroyDescriptorUpdateTemplateKHR)(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate,  VkAllocationCallbacks* pAllocator);
    ctypedef void ( *PFN_vkUpdateDescriptorSetWithTemplateKHR)(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate,  void* pData);
    cdef VkResult vkCreateDescriptorUpdateTemplateKHR(
        VkDevice device,
        VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate);
    cdef void vkDestroyDescriptorUpdateTemplateKHR(
        VkDevice device,
        VkDescriptorUpdateTemplate descriptorUpdateTemplate,
        VkAllocationCallbacks* pAllocator);
    cdef void vkUpdateDescriptorSetWithTemplateKHR(
        VkDevice device,
        VkDescriptorSet descriptorSet,
        VkDescriptorUpdateTemplate descriptorUpdateTemplate,
        void* pData);
    ctypedef struct VkAttachmentDescription2KHR:
        VkStructureType sType
        void* pNext
        VkAttachmentDescriptionFlags flags
        VkFormat format
        VkSampleCountFlagBits samples
        VkAttachmentLoadOp loadOp
        VkAttachmentStoreOp storeOp
        VkAttachmentLoadOp stencilLoadOp
        VkAttachmentStoreOp stencilStoreOp
        VkImageLayout initialLayout
        VkImageLayout finalLayout
    ctypedef struct VkAttachmentReference2KHR:
        VkStructureType sType
        void* pNext
        uint32_t attachment
        VkImageLayout layout
        VkImageAspectFlags aspectMask
    ctypedef struct VkSubpassDescription2KHR:
        VkStructureType sType
        void* pNext
        VkSubpassDescriptionFlags flags
        VkPipelineBindPoint pipelineBindPoint
        uint32_t viewMask
        uint32_t inputAttachmentCount
        VkAttachmentReference2KHR* pInputAttachments
        uint32_t colorAttachmentCount
        VkAttachmentReference2KHR* pColorAttachments
        VkAttachmentReference2KHR* pResolveAttachments
        VkAttachmentReference2KHR* pDepthStencilAttachment
        uint32_t preserveAttachmentCount
        uint32_t* pPreserveAttachments
    ctypedef struct VkSubpassDependency2KHR:
        VkStructureType sType
        void* pNext
        uint32_t srcSubpass
        uint32_t dstSubpass
        VkPipelineStageFlags srcStageMask
        VkPipelineStageFlags dstStageMask
        VkAccessFlags srcAccessMask
        VkAccessFlags dstAccessMask
        VkDependencyFlags dependencyFlags
        int32_t viewOffset
    ctypedef struct VkRenderPassCreateInfo2KHR:
        VkStructureType sType
        void* pNext
        VkRenderPassCreateFlags flags
        uint32_t attachmentCount
        VkAttachmentDescription2KHR* pAttachments
        uint32_t subpassCount
        VkSubpassDescription2KHR* pSubpasses
        uint32_t dependencyCount
        VkSubpassDependency2KHR* pDependencies
        uint32_t correlatedViewMaskCount
        uint32_t* pCorrelatedViewMasks
    ctypedef struct VkSubpassBeginInfoKHR:
        VkStructureType sType
        void* pNext
        VkSubpassContents contents
    ctypedef struct VkSubpassEndInfoKHR:
        VkStructureType sType
        void* pNext
    ctypedef VkResult ( *PFN_vkCreateRenderPass2KHR)(VkDevice device,  VkRenderPassCreateInfo2KHR* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass);
    ctypedef void ( *PFN_vkCmdBeginRenderPass2KHR)(VkCommandBuffer commandBuffer,  VkRenderPassBeginInfo* pRenderPassBegin,  VkSubpassBeginInfoKHR* pSubpassBeginInfo);
    ctypedef void ( *PFN_vkCmdNextSubpass2KHR)(VkCommandBuffer commandBuffer,  VkSubpassBeginInfoKHR* pSubpassBeginInfo,  VkSubpassEndInfoKHR* pSubpassEndInfo);
    ctypedef void ( *PFN_vkCmdEndRenderPass2KHR)(VkCommandBuffer commandBuffer,  VkSubpassEndInfoKHR* pSubpassEndInfo);
    cdef VkResult vkCreateRenderPass2KHR(
        VkDevice device,
        VkRenderPassCreateInfo2KHR* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkRenderPass* pRenderPass);
    cdef void vkCmdBeginRenderPass2KHR(
        VkCommandBuffer commandBuffer,
        VkRenderPassBeginInfo* pRenderPassBegin,
        VkSubpassBeginInfoKHR* pSubpassBeginInfo);
    cdef void vkCmdNextSubpass2KHR(
        VkCommandBuffer commandBuffer,
        VkSubpassBeginInfoKHR* pSubpassBeginInfo,
        VkSubpassEndInfoKHR* pSubpassEndInfo);
    cdef void vkCmdEndRenderPass2KHR(
        VkCommandBuffer commandBuffer,
        VkSubpassEndInfoKHR* pSubpassEndInfo);
    ctypedef struct VkSharedPresentSurfaceCapabilitiesKHR:
        VkStructureType sType
        void* pNext
        VkImageUsageFlags sharedPresentSupportedUsageFlags
    ctypedef VkResult ( *PFN_vkGetSwapchainStatusKHR)(VkDevice device, VkSwapchainKHR swapchain);
    cdef VkResult vkGetSwapchainStatusKHR(
        VkDevice device,
        VkSwapchainKHR swapchain);
    ctypedef VkExternalFenceHandleTypeFlags VkExternalFenceHandleTypeFlagsKHR;
    ctypedef VkExternalFenceHandleTypeFlagBits VkExternalFenceHandleTypeFlagBitsKHR;
    ctypedef VkExternalFenceFeatureFlags VkExternalFenceFeatureFlagsKHR;
    ctypedef VkExternalFenceFeatureFlagBits VkExternalFenceFeatureFlagBitsKHR;
    ctypedef VkPhysicalDeviceExternalFenceInfo VkPhysicalDeviceExternalFenceInfoKHR;
    ctypedef VkExternalFenceProperties VkExternalFencePropertiesKHR;
    ctypedef void ( *PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR)(VkPhysicalDevice physicalDevice,  VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties);
    cdef void vkGetPhysicalDeviceExternalFencePropertiesKHR(
        VkPhysicalDevice physicalDevice,
        VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
        VkExternalFenceProperties* pExternalFenceProperties);
    ctypedef VkFenceImportFlags VkFenceImportFlagsKHR;
    ctypedef VkFenceImportFlagBits VkFenceImportFlagBitsKHR;
    ctypedef VkExportFenceCreateInfo VkExportFenceCreateInfoKHR;
    ctypedef struct VkImportFenceFdInfoKHR:
        VkStructureType sType
        void* pNext
        VkFence fence
        VkFenceImportFlags flags
        VkExternalFenceHandleTypeFlagBits handleType
        int fd
    ctypedef struct VkFenceGetFdInfoKHR:
        VkStructureType sType
        void* pNext
        VkFence fence
        VkExternalFenceHandleTypeFlagBits handleType
    ctypedef VkResult ( *PFN_vkImportFenceFdKHR)(VkDevice device,  VkImportFenceFdInfoKHR* pImportFenceFdInfo);
    ctypedef VkResult ( *PFN_vkGetFenceFdKHR)(VkDevice device,  VkFenceGetFdInfoKHR* pGetFdInfo, int* pFd);
    cdef VkResult vkImportFenceFdKHR(
        VkDevice device,
        VkImportFenceFdInfoKHR* pImportFenceFdInfo);
    cdef VkResult vkGetFenceFdKHR(
        VkDevice device,
        VkFenceGetFdInfoKHR* pGetFdInfo,
        int* pFd);
    ctypedef VkPointClippingBehavior VkPointClippingBehaviorKHR;
    ctypedef VkTessellationDomainOrigin VkTessellationDomainOriginKHR;
    ctypedef VkPhysicalDevicePointClippingProperties VkPhysicalDevicePointClippingPropertiesKHR;
    ctypedef VkRenderPassInputAttachmentAspectCreateInfo VkRenderPassInputAttachmentAspectCreateInfoKHR;
    ctypedef VkInputAttachmentAspectReference VkInputAttachmentAspectReferenceKHR;
    ctypedef VkImageViewUsageCreateInfo VkImageViewUsageCreateInfoKHR;
    ctypedef VkPipelineTessellationDomainOriginStateCreateInfo VkPipelineTessellationDomainOriginStateCreateInfoKHR;
    ctypedef struct VkPhysicalDeviceSurfaceInfo2KHR:
        VkStructureType sType
        void* pNext
        VkSurfaceKHR surface
    ctypedef struct VkSurfaceCapabilities2KHR:
        VkStructureType sType
        void* pNext
        VkSurfaceCapabilitiesKHR surfaceCapabilities
    ctypedef struct VkSurfaceFormat2KHR:
        VkStructureType sType
        void* pNext
        VkSurfaceFormatKHR surfaceFormat
    ctypedef VkResult ( *PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR)(VkPhysicalDevice physicalDevice,  VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkSurfaceCapabilities2KHR* pSurfaceCapabilities);
    ctypedef VkResult ( *PFN_vkGetPhysicalDeviceSurfaceFormats2KHR)(VkPhysicalDevice physicalDevice,  VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32_t* pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats);
    cdef VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(
        VkPhysicalDevice physicalDevice,
        VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
        VkSurfaceCapabilities2KHR* pSurfaceCapabilities);
    cdef VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(
        VkPhysicalDevice physicalDevice,
        VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
        uint32_t* pSurfaceFormatCount,
        VkSurfaceFormat2KHR* pSurfaceFormats);
    ctypedef VkPhysicalDeviceVariablePointerFeatures VkPhysicalDeviceVariablePointerFeaturesKHR;
    ctypedef struct VkDisplayProperties2KHR:
        VkStructureType sType
        void* pNext
        VkDisplayPropertiesKHR displayProperties
    ctypedef struct VkDisplayPlaneProperties2KHR:
        VkStructureType sType
        void* pNext
        VkDisplayPlanePropertiesKHR displayPlaneProperties
    ctypedef struct VkDisplayModeProperties2KHR:
        VkStructureType sType
        void* pNext
        VkDisplayModePropertiesKHR displayModeProperties
    ctypedef struct VkDisplayPlaneInfo2KHR:
        VkStructureType sType
        void* pNext
        VkDisplayModeKHR mode
        uint32_t planeIndex
    ctypedef struct VkDisplayPlaneCapabilities2KHR:
        VkStructureType sType
        void* pNext
        VkDisplayPlaneCapabilitiesKHR capabilities
    ctypedef VkResult ( *PFN_vkGetPhysicalDeviceDisplayProperties2KHR)(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayProperties2KHR* pProperties);
    ctypedef VkResult ( *PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR)(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlaneProperties2KHR* pProperties);
    ctypedef VkResult ( *PFN_vkGetDisplayModeProperties2KHR)(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModeProperties2KHR* pProperties);
    ctypedef VkResult ( *PFN_vkGetDisplayPlaneCapabilities2KHR)(VkPhysicalDevice physicalDevice,  VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR* pCapabilities);
    cdef VkResult vkGetPhysicalDeviceDisplayProperties2KHR(
        VkPhysicalDevice physicalDevice,
        uint32_t* pPropertyCount,
        VkDisplayProperties2KHR* pProperties);
    cdef VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(
        VkPhysicalDevice physicalDevice,
        uint32_t* pPropertyCount,
        VkDisplayPlaneProperties2KHR* pProperties);
    cdef VkResult vkGetDisplayModeProperties2KHR(
        VkPhysicalDevice physicalDevice,
        VkDisplayKHR display,
        uint32_t* pPropertyCount,
        VkDisplayModeProperties2KHR* pProperties);
    cdef VkResult vkGetDisplayPlaneCapabilities2KHR(
        VkPhysicalDevice physicalDevice,
        VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo,
        VkDisplayPlaneCapabilities2KHR* pCapabilities);
    ctypedef VkMemoryDedicatedRequirements VkMemoryDedicatedRequirementsKHR;
    ctypedef VkMemoryDedicatedAllocateInfo VkMemoryDedicatedAllocateInfoKHR;
    ctypedef VkBufferMemoryRequirementsInfo2 VkBufferMemoryRequirementsInfo2KHR;
    ctypedef VkImageMemoryRequirementsInfo2 VkImageMemoryRequirementsInfo2KHR;
    ctypedef VkImageSparseMemoryRequirementsInfo2 VkImageSparseMemoryRequirementsInfo2KHR;
    ctypedef VkSparseImageMemoryRequirements2 VkSparseImageMemoryRequirements2KHR;
    ctypedef void ( *PFN_vkGetImageMemoryRequirements2KHR)(VkDevice device,  VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements);
    ctypedef void ( *PFN_vkGetBufferMemoryRequirements2KHR)(VkDevice device,  VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements);
    ctypedef void ( *PFN_vkGetImageSparseMemoryRequirements2KHR)(VkDevice device,  VkImageSparseMemoryRequirementsInfo2* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);
    cdef void vkGetImageMemoryRequirements2KHR(
        VkDevice device,
        VkImageMemoryRequirementsInfo2* pInfo,
        VkMemoryRequirements2* pMemoryRequirements);
    cdef void vkGetBufferMemoryRequirements2KHR(
        VkDevice device,
        VkBufferMemoryRequirementsInfo2* pInfo,
        VkMemoryRequirements2* pMemoryRequirements);
    cdef void vkGetImageSparseMemoryRequirements2KHR(
        VkDevice device,
        VkImageSparseMemoryRequirementsInfo2* pInfo,
        uint32_t* pSparseMemoryRequirementCount,
        VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);
    ctypedef struct VkImageFormatListCreateInfoKHR:
        VkStructureType sType
        void* pNext
        uint32_t viewFormatCount
        VkFormat* pViewFormats
    ctypedef VkSamplerYcbcrConversion VkSamplerYcbcrConversionKHR;
    ctypedef VkSamplerYcbcrModelConversion VkSamplerYcbcrModelConversionKHR;
    ctypedef VkSamplerYcbcrRange VkSamplerYcbcrRangeKHR;
    ctypedef VkChromaLocation VkChromaLocationKHR;
    ctypedef VkSamplerYcbcrConversionCreateInfo VkSamplerYcbcrConversionCreateInfoKHR;
    ctypedef VkSamplerYcbcrConversionInfo VkSamplerYcbcrConversionInfoKHR;
    ctypedef VkBindImagePlaneMemoryInfo VkBindImagePlaneMemoryInfoKHR;
    ctypedef VkImagePlaneMemoryRequirementsInfo VkImagePlaneMemoryRequirementsInfoKHR;
    ctypedef VkPhysicalDeviceSamplerYcbcrConversionFeatures VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR;
    ctypedef VkSamplerYcbcrConversionImageFormatProperties VkSamplerYcbcrConversionImageFormatPropertiesKHR;
    ctypedef VkResult ( *PFN_vkCreateSamplerYcbcrConversionKHR)(VkDevice device,  VkSamplerYcbcrConversionCreateInfo* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion);
    ctypedef void ( *PFN_vkDestroySamplerYcbcrConversionKHR)(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion,  VkAllocationCallbacks* pAllocator);
    cdef VkResult vkCreateSamplerYcbcrConversionKHR(
        VkDevice device,
        VkSamplerYcbcrConversionCreateInfo* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkSamplerYcbcrConversion* pYcbcrConversion);
    cdef void vkDestroySamplerYcbcrConversionKHR(
        VkDevice device,
        VkSamplerYcbcrConversion ycbcrConversion,
        VkAllocationCallbacks* pAllocator);
    ctypedef VkBindBufferMemoryInfo VkBindBufferMemoryInfoKHR;
    ctypedef VkBindImageMemoryInfo VkBindImageMemoryInfoKHR;
    ctypedef VkResult ( *PFN_vkBindBufferMemory2KHR)(VkDevice device, uint32_t bindInfoCount,  VkBindBufferMemoryInfo* pBindInfos);
    ctypedef VkResult ( *PFN_vkBindImageMemory2KHR)(VkDevice device, uint32_t bindInfoCount,  VkBindImageMemoryInfo* pBindInfos);
    cdef VkResult vkBindBufferMemory2KHR(
        VkDevice device,
        uint32_t bindInfoCount,
        VkBindBufferMemoryInfo* pBindInfos);
    cdef VkResult vkBindImageMemory2KHR(
        VkDevice device,
        uint32_t bindInfoCount,
        VkBindImageMemoryInfo* pBindInfos);
    ctypedef VkPhysicalDeviceMaintenance3Properties VkPhysicalDeviceMaintenance3PropertiesKHR;
    ctypedef VkDescriptorSetLayoutSupport VkDescriptorSetLayoutSupportKHR;
    ctypedef void ( *PFN_vkGetDescriptorSetLayoutSupportKHR)(VkDevice device,  VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport);
    cdef void vkGetDescriptorSetLayoutSupportKHR(
        VkDevice device,
        VkDescriptorSetLayoutCreateInfo* pCreateInfo,
        VkDescriptorSetLayoutSupport* pSupport);
    ctypedef void ( *PFN_vkCmdDrawIndirectCountKHR)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
    ctypedef void ( *PFN_vkCmdDrawIndexedIndirectCountKHR)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
    cdef void vkCmdDrawIndirectCountKHR(
        VkCommandBuffer commandBuffer,
        VkBuffer buffer,
        VkDeviceSize offset,
        VkBuffer countBuffer,
        VkDeviceSize countBufferOffset,
        uint32_t maxDrawCount,
        uint32_t stride);
    cdef void vkCmdDrawIndexedIndirectCountKHR(
        VkCommandBuffer commandBuffer,
        VkBuffer buffer,
        VkDeviceSize offset,
        VkBuffer countBuffer,
        VkDeviceSize countBufferOffset,
        uint32_t maxDrawCount,
        uint32_t stride);
    ctypedef struct VkPhysicalDevice8BitStorageFeaturesKHR:
        VkStructureType sType
        void* pNext
        VkBool32 storageBuffer8BitAccess
        VkBool32 uniformAndStorageBuffer8BitAccess
        VkBool32 storagePushConstant8
    ctypedef struct VkPhysicalDeviceShaderAtomicInt64FeaturesKHR:
        VkStructureType sType
        void* pNext
        VkBool32 shaderBufferInt64Atomics
        VkBool32 shaderSharedInt64Atomics
    cdef enum VkDriverIdKHR:
        VK_DRIVER_ID_AMD_PROPRIETARY_KHR = 1
        VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = 2
        VK_DRIVER_ID_MESA_RADV_KHR = 3
        VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = 4
        VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = 5
        VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = 6
        VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = 7
        VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = 8
        VK_DRIVER_ID_ARM_PROPRIETARY_KHR = 9
        VK_DRIVER_ID_GOOGLE_PASTEL_KHR = 10
        VK_DRIVER_ID_BEGIN_RANGE_KHR = VK_DRIVER_ID_AMD_PROPRIETARY_KHR
        VK_DRIVER_ID_END_RANGE_KHR = VK_DRIVER_ID_GOOGLE_PASTEL_KHR
        VK_DRIVER_ID_RANGE_SIZE_KHR = (VK_DRIVER_ID_GOOGLE_PASTEL_KHR - VK_DRIVER_ID_AMD_PROPRIETARY_KHR + 1)
        VK_DRIVER_ID_MAX_ENUM_KHR = 0x7FFFFFFF
    ctypedef struct VkConformanceVersionKHR:
        uint8_t major
        uint8_t minor
        uint8_t subminor
        uint8_t patch
    ctypedef struct VkPhysicalDeviceDriverPropertiesKHR:
        VkStructureType sType
        void* pNext
        VkDriverIdKHR driverID
        char driverName[256]
        char driverInfo[256]
        VkConformanceVersionKHR conformanceVersion
    ctypedef struct VkPhysicalDeviceFloatControlsPropertiesKHR:
        VkStructureType sType
        void* pNext
        VkBool32 separateDenormSettings
        VkBool32 separateRoundingModeSettings
        VkBool32 shaderSignedZeroInfNanPreserveFloat16
        VkBool32 shaderSignedZeroInfNanPreserveFloat32
        VkBool32 shaderSignedZeroInfNanPreserveFloat64
        VkBool32 shaderDenormPreserveFloat16
        VkBool32 shaderDenormPreserveFloat32
        VkBool32 shaderDenormPreserveFloat64
        VkBool32 shaderDenormFlushToZeroFloat16
        VkBool32 shaderDenormFlushToZeroFloat32
        VkBool32 shaderDenormFlushToZeroFloat64
        VkBool32 shaderRoundingModeRTEFloat16
        VkBool32 shaderRoundingModeRTEFloat32
        VkBool32 shaderRoundingModeRTEFloat64
        VkBool32 shaderRoundingModeRTZFloat16
        VkBool32 shaderRoundingModeRTZFloat32
        VkBool32 shaderRoundingModeRTZFloat64
    cdef enum VkResolveModeFlagBitsKHR:
        VK_RESOLVE_MODE_NONE_KHR = 0
        VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = 0x00000001
        VK_RESOLVE_MODE_AVERAGE_BIT_KHR = 0x00000002
        VK_RESOLVE_MODE_MIN_BIT_KHR = 0x00000004
        VK_RESOLVE_MODE_MAX_BIT_KHR = 0x00000008
        VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
    ctypedef VkFlags VkResolveModeFlagsKHR;
    ctypedef struct VkSubpassDescriptionDepthStencilResolveKHR:
        VkStructureType sType
        void* pNext
        VkResolveModeFlagBitsKHR depthResolveMode
        VkResolveModeFlagBitsKHR stencilResolveMode
        VkAttachmentReference2KHR* pDepthStencilResolveAttachment
    ctypedef struct VkPhysicalDeviceDepthStencilResolvePropertiesKHR:
        VkStructureType sType
        void* pNext
        VkResolveModeFlagsKHR supportedDepthResolveModes
        VkResolveModeFlagsKHR supportedStencilResolveModes
        VkBool32 independentResolveNone
        VkBool32 independentResolve
    ctypedef struct VkPhysicalDeviceVulkanMemoryModelFeaturesKHR:
        VkStructureType sType
        void* pNext
        VkBool32 vulkanMemoryModel
        VkBool32 vulkanMemoryModelDeviceScope
        VkBool32 vulkanMemoryModelAvailabilityVisibilityChains
    ctypedef struct VkDebugReportCallbackEXT:
        pass
    cdef enum VkDebugReportObjectTypeEXT:
        VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0
        VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1
        VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2
        VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3
        VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4
        VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5
        VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6
        VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7
        VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8
        VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9
        VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10
        VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11
        VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12
        VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13
        VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14
        VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15
        VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16
        VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17
        VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18
        VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19
        VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20
        VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21
        VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22
        VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23
        VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24
        VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25
        VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26
        VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27
        VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28
        VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29
        VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30
        VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT = 31
        VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT = 32
        VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33
        VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000
        VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000
        VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000
        VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT
        VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT
        VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT
        VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT
        VK_DEBUG_REPORT_OBJECT_TYPE_BEGIN_RANGE_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT
        VK_DEBUG_REPORT_OBJECT_TYPE_END_RANGE_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT
        VK_DEBUG_REPORT_OBJECT_TYPE_RANGE_SIZE_EXT = (VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT - VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT + 1)
        VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
    cdef enum VkDebugReportFlagBitsEXT:
        VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 0x00000001
        VK_DEBUG_REPORT_WARNING_BIT_EXT = 0x00000002
        VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 0x00000004
        VK_DEBUG_REPORT_ERROR_BIT_EXT = 0x00000008
        VK_DEBUG_REPORT_DEBUG_BIT_EXT = 0x00000010
        VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
    ctypedef VkFlags VkDebugReportFlagsEXT;
    ctypedef VkBool32 ( *PFN_vkDebugReportCallbackEXT)(
        VkDebugReportFlagsEXT flags,
        VkDebugReportObjectTypeEXT objectType,
        uint64_t object,
        size_t location,
        int32_t messageCode,
        char* pLayerPrefix,
        char* pMessage,
        void* pUserData);
    ctypedef struct VkDebugReportCallbackCreateInfoEXT:
        VkStructureType sType
        void* pNext
        VkDebugReportFlagsEXT flags
        PFN_vkDebugReportCallbackEXT pfnCallback
        void* pUserData
    ctypedef VkResult ( *PFN_vkCreateDebugReportCallbackEXT)(VkInstance instance,  VkDebugReportCallbackCreateInfoEXT* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkDebugReportCallbackEXT* pCallback);
    ctypedef void ( *PFN_vkDestroyDebugReportCallbackEXT)(VkInstance instance, VkDebugReportCallbackEXT callback,  VkAllocationCallbacks* pAllocator);
    ctypedef void ( *PFN_vkDebugReportMessageEXT)(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode,  char* pLayerPrefix,  char* pMessage);
    cdef VkResult vkCreateDebugReportCallbackEXT(
        VkInstance instance,
        VkDebugReportCallbackCreateInfoEXT* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkDebugReportCallbackEXT* pCallback);
    cdef void vkDestroyDebugReportCallbackEXT(
        VkInstance instance,
        VkDebugReportCallbackEXT callback,
        VkAllocationCallbacks* pAllocator);
    cdef void vkDebugReportMessageEXT(
        VkInstance instance,
        VkDebugReportFlagsEXT flags,
        VkDebugReportObjectTypeEXT objectType,
        uint64_t object,
        size_t location,
        int32_t messageCode,
        char* pLayerPrefix,
        char* pMessage);
    cdef enum VkRasterizationOrderAMD:
        VK_RASTERIZATION_ORDER_STRICT_AMD = 0
        VK_RASTERIZATION_ORDER_RELAXED_AMD = 1
        VK_RASTERIZATION_ORDER_BEGIN_RANGE_AMD = VK_RASTERIZATION_ORDER_STRICT_AMD
        VK_RASTERIZATION_ORDER_END_RANGE_AMD = VK_RASTERIZATION_ORDER_RELAXED_AMD
        VK_RASTERIZATION_ORDER_RANGE_SIZE_AMD = (VK_RASTERIZATION_ORDER_RELAXED_AMD - VK_RASTERIZATION_ORDER_STRICT_AMD + 1)
        VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 0x7FFFFFFF
    ctypedef struct VkPipelineRasterizationStateRasterizationOrderAMD:
        VkStructureType sType
        void* pNext
        VkRasterizationOrderAMD rasterizationOrder
    ctypedef struct VkDebugMarkerObjectNameInfoEXT:
        VkStructureType sType
        void* pNext
        VkDebugReportObjectTypeEXT objectType
        uint64_t object
        char* pObjectName
    ctypedef struct VkDebugMarkerObjectTagInfoEXT:
        VkStructureType sType
        void* pNext
        VkDebugReportObjectTypeEXT objectType
        uint64_t object
        uint64_t tagName
        size_t tagSize
        void* pTag
    ctypedef struct VkDebugMarkerMarkerInfoEXT:
        VkStructureType sType
        void* pNext
        char* pMarkerName
        float color[4]
    ctypedef VkResult ( *PFN_vkDebugMarkerSetObjectTagEXT)(VkDevice device,  VkDebugMarkerObjectTagInfoEXT* pTagInfo);
    ctypedef VkResult ( *PFN_vkDebugMarkerSetObjectNameEXT)(VkDevice device,  VkDebugMarkerObjectNameInfoEXT* pNameInfo);
    ctypedef void ( *PFN_vkCmdDebugMarkerBeginEXT)(VkCommandBuffer commandBuffer,  VkDebugMarkerMarkerInfoEXT* pMarkerInfo);
    ctypedef void ( *PFN_vkCmdDebugMarkerEndEXT)(VkCommandBuffer commandBuffer);
    ctypedef void ( *PFN_vkCmdDebugMarkerInsertEXT)(VkCommandBuffer commandBuffer,  VkDebugMarkerMarkerInfoEXT* pMarkerInfo);
    cdef VkResult vkDebugMarkerSetObjectTagEXT(
        VkDevice device,
        VkDebugMarkerObjectTagInfoEXT* pTagInfo);
    cdef VkResult vkDebugMarkerSetObjectNameEXT(
        VkDevice device,
        VkDebugMarkerObjectNameInfoEXT* pNameInfo);
    cdef void vkCmdDebugMarkerBeginEXT(
        VkCommandBuffer commandBuffer,
        VkDebugMarkerMarkerInfoEXT* pMarkerInfo);
    cdef void vkCmdDebugMarkerEndEXT(
        VkCommandBuffer commandBuffer);
    cdef void vkCmdDebugMarkerInsertEXT(
        VkCommandBuffer commandBuffer,
        VkDebugMarkerMarkerInfoEXT* pMarkerInfo);
    ctypedef struct VkDedicatedAllocationImageCreateInfoNV:
        VkStructureType sType
        void* pNext
        VkBool32 dedicatedAllocation
    ctypedef struct VkDedicatedAllocationBufferCreateInfoNV:
        VkStructureType sType
        void* pNext
        VkBool32 dedicatedAllocation
    ctypedef struct VkDedicatedAllocationMemoryAllocateInfoNV:
        VkStructureType sType
        void* pNext
        VkImage image
        VkBuffer buffer
    ctypedef VkFlags VkPipelineRasterizationStateStreamCreateFlagsEXT;
    ctypedef struct VkPhysicalDeviceTransformFeedbackFeaturesEXT:
        VkStructureType sType
        void* pNext
        VkBool32 transformFeedback
        VkBool32 geometryStreams
    ctypedef struct VkPhysicalDeviceTransformFeedbackPropertiesEXT:
        VkStructureType sType
        void* pNext
        uint32_t maxTransformFeedbackStreams
        uint32_t maxTransformFeedbackBuffers
        VkDeviceSize maxTransformFeedbackBufferSize
        uint32_t maxTransformFeedbackStreamDataSize
        uint32_t maxTransformFeedbackBufferDataSize
        uint32_t maxTransformFeedbackBufferDataStride
        VkBool32 transformFeedbackQueries
        VkBool32 transformFeedbackStreamsLinesTriangles
        VkBool32 transformFeedbackRasterizationStreamSelect
        VkBool32 transformFeedbackDraw
    ctypedef struct VkPipelineRasterizationStateStreamCreateInfoEXT:
        VkStructureType sType
        void* pNext
        VkPipelineRasterizationStateStreamCreateFlagsEXT flags
        uint32_t rasterizationStream
    ctypedef void ( *PFN_vkCmdBindTransformFeedbackBuffersEXT)(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount,  VkBuffer* pBuffers,  VkDeviceSize* pOffsets,  VkDeviceSize* pSizes);
    ctypedef void ( *PFN_vkCmdBeginTransformFeedbackEXT)(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount,  VkBuffer* pCounterBuffers,  VkDeviceSize* pCounterBufferOffsets);
    ctypedef void ( *PFN_vkCmdEndTransformFeedbackEXT)(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount,  VkBuffer* pCounterBuffers,  VkDeviceSize* pCounterBufferOffsets);
    ctypedef void ( *PFN_vkCmdBeginQueryIndexedEXT)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index);
    ctypedef void ( *PFN_vkCmdEndQueryIndexedEXT)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index);
    ctypedef void ( *PFN_vkCmdDrawIndirectByteCountEXT)(VkCommandBuffer commandBuffer, uint32_t instanceCount, uint32_t firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride);
    cdef void vkCmdBindTransformFeedbackBuffersEXT(
        VkCommandBuffer commandBuffer,
        uint32_t firstBinding,
        uint32_t bindingCount,
        VkBuffer* pBuffers,
        VkDeviceSize* pOffsets,
        VkDeviceSize* pSizes);
    cdef void vkCmdBeginTransformFeedbackEXT(
        VkCommandBuffer commandBuffer,
        uint32_t firstCounterBuffer,
        uint32_t counterBufferCount,
        VkBuffer* pCounterBuffers,
        VkDeviceSize* pCounterBufferOffsets);
    cdef void vkCmdEndTransformFeedbackEXT(
        VkCommandBuffer commandBuffer,
        uint32_t firstCounterBuffer,
        uint32_t counterBufferCount,
        VkBuffer* pCounterBuffers,
        VkDeviceSize* pCounterBufferOffsets);
    cdef void vkCmdBeginQueryIndexedEXT(
        VkCommandBuffer commandBuffer,
        VkQueryPool queryPool,
        uint32_t query,
        VkQueryControlFlags flags,
        uint32_t index);
    cdef void vkCmdEndQueryIndexedEXT(
        VkCommandBuffer commandBuffer,
        VkQueryPool queryPool,
        uint32_t query,
        uint32_t index);
    cdef void vkCmdDrawIndirectByteCountEXT(
        VkCommandBuffer commandBuffer,
        uint32_t instanceCount,
        uint32_t firstInstance,
        VkBuffer counterBuffer,
        VkDeviceSize counterBufferOffset,
        uint32_t counterOffset,
        uint32_t vertexStride);
    ctypedef void ( *PFN_vkCmdDrawIndirectCountAMD)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
    ctypedef void ( *PFN_vkCmdDrawIndexedIndirectCountAMD)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
    cdef void vkCmdDrawIndirectCountAMD(
        VkCommandBuffer commandBuffer,
        VkBuffer buffer,
        VkDeviceSize offset,
        VkBuffer countBuffer,
        VkDeviceSize countBufferOffset,
        uint32_t maxDrawCount,
        uint32_t stride);
    cdef void vkCmdDrawIndexedIndirectCountAMD(
        VkCommandBuffer commandBuffer,
        VkBuffer buffer,
        VkDeviceSize offset,
        VkBuffer countBuffer,
        VkDeviceSize countBufferOffset,
        uint32_t maxDrawCount,
        uint32_t stride);
    ctypedef struct VkTextureLODGatherFormatPropertiesAMD:
        VkStructureType sType
        void* pNext
        VkBool32 supportsTextureGatherLODBiasAMD
    cdef enum VkShaderInfoTypeAMD:
        VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0
        VK_SHADER_INFO_TYPE_BINARY_AMD = 1
        VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2
        VK_SHADER_INFO_TYPE_BEGIN_RANGE_AMD = VK_SHADER_INFO_TYPE_STATISTICS_AMD
        VK_SHADER_INFO_TYPE_END_RANGE_AMD = VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD
        VK_SHADER_INFO_TYPE_RANGE_SIZE_AMD = (VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD - VK_SHADER_INFO_TYPE_STATISTICS_AMD + 1)
        VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = 0x7FFFFFFF
    ctypedef struct VkShaderResourceUsageAMD:
        uint32_t numUsedVgprs
        uint32_t numUsedSgprs
        uint32_t ldsSizePerLocalWorkGroup
        size_t ldsUsageSizeInBytes
        size_t scratchMemUsageInBytes
    ctypedef struct VkShaderStatisticsInfoAMD:
        VkShaderStageFlags shaderStageMask
        VkShaderResourceUsageAMD resourceUsage
        uint32_t numPhysicalVgprs
        uint32_t numPhysicalSgprs
        uint32_t numAvailableVgprs
        uint32_t numAvailableSgprs
        uint32_t computeWorkGroupSize[3]
    ctypedef VkResult ( *PFN_vkGetShaderInfoAMD)(VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, size_t* pInfoSize, void* pInfo);
    cdef VkResult vkGetShaderInfoAMD(
        VkDevice device,
        VkPipeline pipeline,
        VkShaderStageFlagBits shaderStage,
        VkShaderInfoTypeAMD infoType,
        size_t* pInfoSize,
        void* pInfo);
    ctypedef struct VkPhysicalDeviceCornerSampledImageFeaturesNV:
        VkStructureType sType
        void* pNext
        VkBool32 cornerSampledImage
    cdef enum VkExternalMemoryHandleTypeFlagBitsNV:
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 0x00000001
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 0x00000002
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 0x00000004
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 0x00000008
        VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
    ctypedef VkFlags VkExternalMemoryHandleTypeFlagsNV;
    cdef enum VkExternalMemoryFeatureFlagBitsNV:
        VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 0x00000001
        VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 0x00000002
        VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 0x00000004
        VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
    ctypedef VkFlags VkExternalMemoryFeatureFlagsNV;
    ctypedef struct VkExternalImageFormatPropertiesNV:
        VkImageFormatProperties imageFormatProperties
        VkExternalMemoryFeatureFlagsNV externalMemoryFeatures
        VkExternalMemoryHandleTypeFlagsNV exportFromImportedHandleTypes
        VkExternalMemoryHandleTypeFlagsNV compatibleHandleTypes
    ctypedef VkResult ( *PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV)(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties);
    cdef VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(
        VkPhysicalDevice physicalDevice,
        VkFormat format,
        VkImageType type,
        VkImageTiling tiling,
        VkImageUsageFlags usage,
        VkImageCreateFlags flags,
        VkExternalMemoryHandleTypeFlagsNV externalHandleType,
        VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties);
    ctypedef struct VkExternalMemoryImageCreateInfoNV:
        VkStructureType sType
        void* pNext
        VkExternalMemoryHandleTypeFlagsNV handleTypes
    ctypedef struct VkExportMemoryAllocateInfoNV:
        VkStructureType sType
        void* pNext
        VkExternalMemoryHandleTypeFlagsNV handleTypes
    cdef enum VkValidationCheckEXT:
        VK_VALIDATION_CHECK_ALL_EXT = 0
        VK_VALIDATION_CHECK_SHADERS_EXT = 1
        VK_VALIDATION_CHECK_BEGIN_RANGE_EXT = VK_VALIDATION_CHECK_ALL_EXT
        VK_VALIDATION_CHECK_END_RANGE_EXT = VK_VALIDATION_CHECK_SHADERS_EXT
        VK_VALIDATION_CHECK_RANGE_SIZE_EXT = (VK_VALIDATION_CHECK_SHADERS_EXT - VK_VALIDATION_CHECK_ALL_EXT + 1)
        VK_VALIDATION_CHECK_MAX_ENUM_EXT = 0x7FFFFFFF
    ctypedef struct VkValidationFlagsEXT:
        VkStructureType sType
        void* pNext
        uint32_t disabledValidationCheckCount
        VkValidationCheckEXT* pDisabledValidationChecks
    ctypedef struct VkImageViewASTCDecodeModeEXT:
        VkStructureType sType
        void* pNext
        VkFormat decodeMode
    ctypedef struct VkPhysicalDeviceASTCDecodeFeaturesEXT:
        VkStructureType sType
        void* pNext
        VkBool32 decodeModeSharedExponent
    cdef enum VkConditionalRenderingFlagBitsEXT:
        VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 0x00000001
        VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
    ctypedef VkFlags VkConditionalRenderingFlagsEXT;
    ctypedef struct VkConditionalRenderingBeginInfoEXT:
        VkStructureType sType
        void* pNext
        VkBuffer buffer
        VkDeviceSize offset
        VkConditionalRenderingFlagsEXT flags
    ctypedef struct VkPhysicalDeviceConditionalRenderingFeaturesEXT:
        VkStructureType sType
        void* pNext
        VkBool32 conditionalRendering
        VkBool32 inheritedConditionalRendering
    ctypedef struct VkCommandBufferInheritanceConditionalRenderingInfoEXT:
        VkStructureType sType
        void* pNext
        VkBool32 conditionalRenderingEnable
    ctypedef void ( *PFN_vkCmdBeginConditionalRenderingEXT)(VkCommandBuffer commandBuffer,  VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin);
    ctypedef void ( *PFN_vkCmdEndConditionalRenderingEXT)(VkCommandBuffer commandBuffer);
    cdef void vkCmdBeginConditionalRenderingEXT(
        VkCommandBuffer commandBuffer,
        VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin);
    cdef void vkCmdEndConditionalRenderingEXT(
        VkCommandBuffer commandBuffer);
    ctypedef struct VkObjectTableNVX:
        pass
    ctypedef struct VkIndirectCommandsLayoutNVX:
        pass
    cdef enum VkIndirectCommandsTokenTypeNVX:
        VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX = 0
        VK_INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX = 1
        VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX = 2
        VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX = 3
        VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX = 4
        VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX = 5
        VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX = 6
        VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX = 7
        VK_INDIRECT_COMMANDS_TOKEN_TYPE_BEGIN_RANGE_NVX = VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX
        VK_INDIRECT_COMMANDS_TOKEN_TYPE_END_RANGE_NVX = VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX
        VK_INDIRECT_COMMANDS_TOKEN_TYPE_RANGE_SIZE_NVX = (VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX - VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX + 1)
        VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NVX = 0x7FFFFFFF
    cdef enum VkObjectEntryTypeNVX:
        VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX = 0
        VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX = 1
        VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX = 2
        VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX = 3
        VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX = 4
        VK_OBJECT_ENTRY_TYPE_BEGIN_RANGE_NVX = VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX
        VK_OBJECT_ENTRY_TYPE_END_RANGE_NVX = VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX
        VK_OBJECT_ENTRY_TYPE_RANGE_SIZE_NVX = (VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX - VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX + 1)
        VK_OBJECT_ENTRY_TYPE_MAX_ENUM_NVX = 0x7FFFFFFF
    cdef enum VkIndirectCommandsLayoutUsageFlagBitsNVX:
        VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NVX = 0x00000001
        VK_INDIRECT_COMMANDS_LAYOUT_USAGE_SPARSE_SEQUENCES_BIT_NVX = 0x00000002
        VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EMPTY_EXECUTIONS_BIT_NVX = 0x00000004
        VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX = 0x00000008
        VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NVX = 0x7FFFFFFF
    ctypedef VkFlags VkIndirectCommandsLayoutUsageFlagsNVX;
    cdef enum VkObjectEntryUsageFlagBitsNVX:
        VK_OBJECT_ENTRY_USAGE_GRAPHICS_BIT_NVX = 0x00000001
        VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX = 0x00000002
        VK_OBJECT_ENTRY_USAGE_FLAG_BITS_MAX_ENUM_NVX = 0x7FFFFFFF
    ctypedef VkFlags VkObjectEntryUsageFlagsNVX;
    ctypedef struct VkDeviceGeneratedCommandsFeaturesNVX:
        VkStructureType sType
        void* pNext
        VkBool32 computeBindingPointSupport
    ctypedef struct VkDeviceGeneratedCommandsLimitsNVX:
        VkStructureType sType
        void* pNext
        uint32_t maxIndirectCommandsLayoutTokenCount
        uint32_t maxObjectEntryCounts
        uint32_t minSequenceCountBufferOffsetAlignment
        uint32_t minSequenceIndexBufferOffsetAlignment
        uint32_t minCommandsTokenBufferOffsetAlignment
    ctypedef struct VkIndirectCommandsTokenNVX:
        VkIndirectCommandsTokenTypeNVX tokenType
        VkBuffer buffer
        VkDeviceSize offset
    ctypedef struct VkIndirectCommandsLayoutTokenNVX:
        VkIndirectCommandsTokenTypeNVX tokenType
        uint32_t bindingUnit
        uint32_t dynamicCount
        uint32_t divisor
    ctypedef struct VkIndirectCommandsLayoutCreateInfoNVX:
        VkStructureType sType
        void* pNext
        VkPipelineBindPoint pipelineBindPoint
        VkIndirectCommandsLayoutUsageFlagsNVX flags
        uint32_t tokenCount
        VkIndirectCommandsLayoutTokenNVX* pTokens
    ctypedef struct VkCmdProcessCommandsInfoNVX:
        VkStructureType sType
        void* pNext
        VkObjectTableNVX objectTable
        VkIndirectCommandsLayoutNVX indirectCommandsLayout
        uint32_t indirectCommandsTokenCount
        VkIndirectCommandsTokenNVX* pIndirectCommandsTokens
        uint32_t maxSequencesCount
        VkCommandBuffer targetCommandBuffer
        VkBuffer sequencesCountBuffer
        VkDeviceSize sequencesCountOffset
        VkBuffer sequencesIndexBuffer
        VkDeviceSize sequencesIndexOffset
    ctypedef struct VkCmdReserveSpaceForCommandsInfoNVX:
        VkStructureType sType
        void* pNext
        VkObjectTableNVX objectTable
        VkIndirectCommandsLayoutNVX indirectCommandsLayout
        uint32_t maxSequencesCount
    ctypedef struct VkObjectTableCreateInfoNVX:
        VkStructureType sType
        void* pNext
        uint32_t objectCount
        VkObjectEntryTypeNVX* pObjectEntryTypes
        uint32_t* pObjectEntryCounts
        VkObjectEntryUsageFlagsNVX* pObjectEntryUsageFlags
        uint32_t maxUniformBuffersPerDescriptor
        uint32_t maxStorageBuffersPerDescriptor
        uint32_t maxStorageImagesPerDescriptor
        uint32_t maxSampledImagesPerDescriptor
        uint32_t maxPipelineLayouts
    ctypedef struct VkObjectTableEntryNVX:
        VkObjectEntryTypeNVX type
        VkObjectEntryUsageFlagsNVX flags
    ctypedef struct VkObjectTablePipelineEntryNVX:
        VkObjectEntryTypeNVX type
        VkObjectEntryUsageFlagsNVX flags
        VkPipeline pipeline
    ctypedef struct VkObjectTableDescriptorSetEntryNVX:
        VkObjectEntryTypeNVX type
        VkObjectEntryUsageFlagsNVX flags
        VkPipelineLayout pipelineLayout
        VkDescriptorSet descriptorSet
    ctypedef struct VkObjectTableVertexBufferEntryNVX:
        VkObjectEntryTypeNVX type
        VkObjectEntryUsageFlagsNVX flags
        VkBuffer buffer
    ctypedef struct VkObjectTableIndexBufferEntryNVX:
        VkObjectEntryTypeNVX type
        VkObjectEntryUsageFlagsNVX flags
        VkBuffer buffer
        VkIndexType indexType
    ctypedef struct VkObjectTablePushConstantEntryNVX:
        VkObjectEntryTypeNVX type
        VkObjectEntryUsageFlagsNVX flags
        VkPipelineLayout pipelineLayout
        VkShaderStageFlags stageFlags
    ctypedef void ( *PFN_vkCmdProcessCommandsNVX)(VkCommandBuffer commandBuffer,  VkCmdProcessCommandsInfoNVX* pProcessCommandsInfo);
    ctypedef void ( *PFN_vkCmdReserveSpaceForCommandsNVX)(VkCommandBuffer commandBuffer,  VkCmdReserveSpaceForCommandsInfoNVX* pReserveSpaceInfo);
    ctypedef VkResult ( *PFN_vkCreateIndirectCommandsLayoutNVX)(VkDevice device,  VkIndirectCommandsLayoutCreateInfoNVX* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkIndirectCommandsLayoutNVX* pIndirectCommandsLayout);
    ctypedef void ( *PFN_vkDestroyIndirectCommandsLayoutNVX)(VkDevice device, VkIndirectCommandsLayoutNVX indirectCommandsLayout,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkCreateObjectTableNVX)(VkDevice device,  VkObjectTableCreateInfoNVX* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkObjectTableNVX* pObjectTable);
    ctypedef void ( *PFN_vkDestroyObjectTableNVX)(VkDevice device, VkObjectTableNVX objectTable,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkRegisterObjectsNVX)(VkDevice device, VkObjectTableNVX objectTable, uint32_t objectCount,  VkObjectTableEntryNVX* * ppObjectTableEntries,  uint32_t* pObjectIndices);
    ctypedef VkResult ( *PFN_vkUnregisterObjectsNVX)(VkDevice device, VkObjectTableNVX objectTable, uint32_t objectCount,  VkObjectEntryTypeNVX* pObjectEntryTypes,  uint32_t* pObjectIndices);
    ctypedef void ( *PFN_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX)(VkPhysicalDevice physicalDevice, VkDeviceGeneratedCommandsFeaturesNVX* pFeatures, VkDeviceGeneratedCommandsLimitsNVX* pLimits);
    cdef void vkCmdProcessCommandsNVX(
        VkCommandBuffer commandBuffer,
        VkCmdProcessCommandsInfoNVX* pProcessCommandsInfo);
    cdef void vkCmdReserveSpaceForCommandsNVX(
        VkCommandBuffer commandBuffer,
        VkCmdReserveSpaceForCommandsInfoNVX* pReserveSpaceInfo);
    cdef VkResult vkCreateIndirectCommandsLayoutNVX(
        VkDevice device,
        VkIndirectCommandsLayoutCreateInfoNVX* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkIndirectCommandsLayoutNVX* pIndirectCommandsLayout);
    cdef void vkDestroyIndirectCommandsLayoutNVX(
        VkDevice device,
        VkIndirectCommandsLayoutNVX indirectCommandsLayout,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkCreateObjectTableNVX(
        VkDevice device,
        VkObjectTableCreateInfoNVX* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkObjectTableNVX* pObjectTable);
    cdef void vkDestroyObjectTableNVX(
        VkDevice device,
        VkObjectTableNVX objectTable,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkRegisterObjectsNVX(
        VkDevice device,
        VkObjectTableNVX objectTable,
        uint32_t objectCount,
        VkObjectTableEntryNVX* * ppObjectTableEntries,
        uint32_t* pObjectIndices);
    cdef VkResult vkUnregisterObjectsNVX(
        VkDevice device,
        VkObjectTableNVX objectTable,
        uint32_t objectCount,
        VkObjectEntryTypeNVX* pObjectEntryTypes,
        uint32_t* pObjectIndices);
    cdef void vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(
        VkPhysicalDevice physicalDevice,
        VkDeviceGeneratedCommandsFeaturesNVX* pFeatures,
        VkDeviceGeneratedCommandsLimitsNVX* pLimits);
    ctypedef struct VkViewportWScalingNV:
        float xcoeff
        float ycoeff
    ctypedef struct VkPipelineViewportWScalingStateCreateInfoNV:
        VkStructureType sType
        void* pNext
        VkBool32 viewportWScalingEnable
        uint32_t viewportCount
        VkViewportWScalingNV* pViewportWScalings
    ctypedef void ( *PFN_vkCmdSetViewportWScalingNV)(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount,  VkViewportWScalingNV* pViewportWScalings);
    cdef void vkCmdSetViewportWScalingNV(
        VkCommandBuffer commandBuffer,
        uint32_t firstViewport,
        uint32_t viewportCount,
        VkViewportWScalingNV* pViewportWScalings);
    ctypedef VkResult ( *PFN_vkReleaseDisplayEXT)(VkPhysicalDevice physicalDevice, VkDisplayKHR display);
    cdef VkResult vkReleaseDisplayEXT(
        VkPhysicalDevice physicalDevice,
        VkDisplayKHR display);
    cdef enum VkSurfaceCounterFlagBitsEXT:
        VK_SURFACE_COUNTER_VBLANK_EXT = 0x00000001
        VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
    ctypedef VkFlags VkSurfaceCounterFlagsEXT;
    ctypedef struct VkSurfaceCapabilities2EXT:
        VkStructureType sType
        void* pNext
        uint32_t minImageCount
        uint32_t maxImageCount
        VkExtent2D currentExtent
        VkExtent2D minImageExtent
        VkExtent2D maxImageExtent
        uint32_t maxImageArrayLayers
        VkSurfaceTransformFlagsKHR supportedTransforms
        VkSurfaceTransformFlagBitsKHR currentTransform
        VkCompositeAlphaFlagsKHR supportedCompositeAlpha
        VkImageUsageFlags supportedUsageFlags
        VkSurfaceCounterFlagsEXT supportedSurfaceCounters
    ctypedef VkResult ( *PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT* pSurfaceCapabilities);
    cdef VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(
        VkPhysicalDevice physicalDevice,
        VkSurfaceKHR surface,
        VkSurfaceCapabilities2EXT* pSurfaceCapabilities);
    cdef enum VkDisplayPowerStateEXT:
        VK_DISPLAY_POWER_STATE_OFF_EXT = 0
        VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1
        VK_DISPLAY_POWER_STATE_ON_EXT = 2
        VK_DISPLAY_POWER_STATE_BEGIN_RANGE_EXT = VK_DISPLAY_POWER_STATE_OFF_EXT
        VK_DISPLAY_POWER_STATE_END_RANGE_EXT = VK_DISPLAY_POWER_STATE_ON_EXT
        VK_DISPLAY_POWER_STATE_RANGE_SIZE_EXT = (VK_DISPLAY_POWER_STATE_ON_EXT - VK_DISPLAY_POWER_STATE_OFF_EXT + 1)
        VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = 0x7FFFFFFF
    cdef enum VkDeviceEventTypeEXT:
        VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0
        VK_DEVICE_EVENT_TYPE_BEGIN_RANGE_EXT = VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT
        VK_DEVICE_EVENT_TYPE_END_RANGE_EXT = VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT
        VK_DEVICE_EVENT_TYPE_RANGE_SIZE_EXT = (VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT - VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT + 1)
        VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
    cdef enum VkDisplayEventTypeEXT:
        VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0
        VK_DISPLAY_EVENT_TYPE_BEGIN_RANGE_EXT = VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT
        VK_DISPLAY_EVENT_TYPE_END_RANGE_EXT = VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT
        VK_DISPLAY_EVENT_TYPE_RANGE_SIZE_EXT = (VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT - VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT + 1)
        VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
    ctypedef struct VkDisplayPowerInfoEXT:
        VkStructureType sType
        void* pNext
        VkDisplayPowerStateEXT powerState
    ctypedef struct VkDeviceEventInfoEXT:
        VkStructureType sType
        void* pNext
        VkDeviceEventTypeEXT deviceEvent
    ctypedef struct VkDisplayEventInfoEXT:
        VkStructureType sType
        void* pNext
        VkDisplayEventTypeEXT displayEvent
    ctypedef struct VkSwapchainCounterCreateInfoEXT:
        VkStructureType sType
        void* pNext
        VkSurfaceCounterFlagsEXT surfaceCounters
    ctypedef VkResult ( *PFN_vkDisplayPowerControlEXT)(VkDevice device, VkDisplayKHR display,  VkDisplayPowerInfoEXT* pDisplayPowerInfo);
    ctypedef VkResult ( *PFN_vkRegisterDeviceEventEXT)(VkDevice device,  VkDeviceEventInfoEXT* pDeviceEventInfo,  VkAllocationCallbacks* pAllocator, VkFence* pFence);
    ctypedef VkResult ( *PFN_vkRegisterDisplayEventEXT)(VkDevice device, VkDisplayKHR display,  VkDisplayEventInfoEXT* pDisplayEventInfo,  VkAllocationCallbacks* pAllocator, VkFence* pFence);
    ctypedef VkResult ( *PFN_vkGetSwapchainCounterEXT)(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, uint64_t* pCounterValue);
    cdef VkResult vkDisplayPowerControlEXT(
        VkDevice device,
        VkDisplayKHR display,
        VkDisplayPowerInfoEXT* pDisplayPowerInfo);
    cdef VkResult vkRegisterDeviceEventEXT(
        VkDevice device,
        VkDeviceEventInfoEXT* pDeviceEventInfo,
        VkAllocationCallbacks* pAllocator,
        VkFence* pFence);
    cdef VkResult vkRegisterDisplayEventEXT(
        VkDevice device,
        VkDisplayKHR display,
        VkDisplayEventInfoEXT* pDisplayEventInfo,
        VkAllocationCallbacks* pAllocator,
        VkFence* pFence);
    cdef VkResult vkGetSwapchainCounterEXT(
        VkDevice device,
        VkSwapchainKHR swapchain,
        VkSurfaceCounterFlagBitsEXT counter,
        uint64_t* pCounterValue);
    ctypedef struct VkRefreshCycleDurationGOOGLE:
        uint64_t refreshDuration
    ctypedef struct VkPastPresentationTimingGOOGLE:
        uint32_t presentID
        uint64_t desiredPresentTime
        uint64_t actualPresentTime
        uint64_t earliestPresentTime
        uint64_t presentMargin
    ctypedef struct VkPresentTimeGOOGLE:
        uint32_t presentID
        uint64_t desiredPresentTime
    ctypedef struct VkPresentTimesInfoGOOGLE:
        VkStructureType sType
        void* pNext
        uint32_t swapchainCount
        VkPresentTimeGOOGLE* pTimes
    ctypedef VkResult ( *PFN_vkGetRefreshCycleDurationGOOGLE)(VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties);
    ctypedef VkResult ( *PFN_vkGetPastPresentationTimingGOOGLE)(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings);
    cdef VkResult vkGetRefreshCycleDurationGOOGLE(
        VkDevice device,
        VkSwapchainKHR swapchain,
        VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties);
    cdef VkResult vkGetPastPresentationTimingGOOGLE(
        VkDevice device,
        VkSwapchainKHR swapchain,
        uint32_t* pPresentationTimingCount,
        VkPastPresentationTimingGOOGLE* pPresentationTimings);
    ctypedef struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX:
        VkStructureType sType
        void* pNext
        VkBool32 perViewPositionAllComponents
    cdef enum VkViewportCoordinateSwizzleNV:
        VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0
        VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1
        VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2
        VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3
        VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4
        VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5
        VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6
        VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7
        VK_VIEWPORT_COORDINATE_SWIZZLE_BEGIN_RANGE_NV = VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV
        VK_VIEWPORT_COORDINATE_SWIZZLE_END_RANGE_NV = VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV
        VK_VIEWPORT_COORDINATE_SWIZZLE_RANGE_SIZE_NV = (VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV - VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV + 1)
        VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 0x7FFFFFFF
    ctypedef VkFlags VkPipelineViewportSwizzleStateCreateFlagsNV;
    ctypedef struct VkViewportSwizzleNV:
        VkViewportCoordinateSwizzleNV x
        VkViewportCoordinateSwizzleNV y
        VkViewportCoordinateSwizzleNV z
        VkViewportCoordinateSwizzleNV w
    ctypedef struct VkPipelineViewportSwizzleStateCreateInfoNV:
        VkStructureType sType
        void* pNext
        VkPipelineViewportSwizzleStateCreateFlagsNV flags
        uint32_t viewportCount
        VkViewportSwizzleNV* pViewportSwizzles
    cdef enum VkDiscardRectangleModeEXT:
        VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0
        VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1
        VK_DISCARD_RECTANGLE_MODE_BEGIN_RANGE_EXT = VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT
        VK_DISCARD_RECTANGLE_MODE_END_RANGE_EXT = VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT
        VK_DISCARD_RECTANGLE_MODE_RANGE_SIZE_EXT = (VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT - VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT + 1)
        VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
    ctypedef VkFlags VkPipelineDiscardRectangleStateCreateFlagsEXT;
    ctypedef struct VkPhysicalDeviceDiscardRectanglePropertiesEXT:
        VkStructureType sType
        void* pNext
        uint32_t maxDiscardRectangles
    ctypedef struct VkPipelineDiscardRectangleStateCreateInfoEXT:
        VkStructureType sType
        void* pNext
        VkPipelineDiscardRectangleStateCreateFlagsEXT flags
        VkDiscardRectangleModeEXT discardRectangleMode
        uint32_t discardRectangleCount
        VkRect2D* pDiscardRectangles
    ctypedef void ( *PFN_vkCmdSetDiscardRectangleEXT)(VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount,  VkRect2D* pDiscardRectangles);
    cdef void vkCmdSetDiscardRectangleEXT(
        VkCommandBuffer commandBuffer,
        uint32_t firstDiscardRectangle,
        uint32_t discardRectangleCount,
        VkRect2D* pDiscardRectangles);
    cdef enum VkConservativeRasterizationModeEXT:
        VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0
        VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1
        VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2
        VK_CONSERVATIVE_RASTERIZATION_MODE_BEGIN_RANGE_EXT = VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT
        VK_CONSERVATIVE_RASTERIZATION_MODE_END_RANGE_EXT = VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT
        VK_CONSERVATIVE_RASTERIZATION_MODE_RANGE_SIZE_EXT = (VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT - VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT + 1)
        VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
    ctypedef VkFlags VkPipelineRasterizationConservativeStateCreateFlagsEXT;
    ctypedef struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT:
        VkStructureType sType
        void* pNext
        float primitiveOverestimationSize
        float maxExtraPrimitiveOverestimationSize
        float extraPrimitiveOverestimationSizeGranularity
        VkBool32 primitiveUnderestimation
        VkBool32 conservativePointAndLineRasterization
        VkBool32 degenerateTrianglesRasterized
        VkBool32 degenerateLinesRasterized
        VkBool32 fullyCoveredFragmentShaderInputVariable
        VkBool32 conservativeRasterizationPostDepthCoverage
    ctypedef struct VkPipelineRasterizationConservativeStateCreateInfoEXT:
        VkStructureType sType
        void* pNext
        VkPipelineRasterizationConservativeStateCreateFlagsEXT flags
        VkConservativeRasterizationModeEXT conservativeRasterizationMode
        float extraPrimitiveOverestimationSize
    ctypedef struct VkXYColorEXT:
        float x
        float y
    ctypedef struct VkHdrMetadataEXT:
        VkStructureType sType
        void* pNext
        VkXYColorEXT displayPrimaryRed
        VkXYColorEXT displayPrimaryGreen
        VkXYColorEXT displayPrimaryBlue
        VkXYColorEXT whitePoint
        float maxLuminance
        float minLuminance
        float maxContentLightLevel
        float maxFrameAverageLightLevel
    ctypedef void ( *PFN_vkSetHdrMetadataEXT)(VkDevice device, uint32_t swapchainCount,  VkSwapchainKHR* pSwapchains,  VkHdrMetadataEXT* pMetadata);
    cdef void vkSetHdrMetadataEXT(
        VkDevice device,
        uint32_t swapchainCount,
        VkSwapchainKHR* pSwapchains,
        VkHdrMetadataEXT* pMetadata);
    ctypedef struct VkDebugUtilsMessengerEXT:
        pass
    ctypedef VkFlags VkDebugUtilsMessengerCallbackDataFlagsEXT;
    ctypedef VkFlags VkDebugUtilsMessengerCreateFlagsEXT;
    cdef enum VkDebugUtilsMessageSeverityFlagBitsEXT:
        VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 0x00000001
        VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 0x00000010
        VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 0x00000100
        VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 0x00001000
        VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
    ctypedef VkFlags VkDebugUtilsMessageSeverityFlagsEXT;
    cdef enum VkDebugUtilsMessageTypeFlagBitsEXT:
        VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 0x00000001
        VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 0x00000002
        VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 0x00000004
        VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
    ctypedef VkFlags VkDebugUtilsMessageTypeFlagsEXT;
    ctypedef struct VkDebugUtilsObjectNameInfoEXT:
        VkStructureType sType
        void* pNext
        VkObjectType objectType
        uint64_t objectHandle
        char* pObjectName
    ctypedef struct VkDebugUtilsObjectTagInfoEXT:
        VkStructureType sType
        void* pNext
        VkObjectType objectType
        uint64_t objectHandle
        uint64_t tagName
        size_t tagSize
        void* pTag
    ctypedef struct VkDebugUtilsLabelEXT:
        VkStructureType sType
        void* pNext
        char* pLabelName
        float color[4]
    ctypedef struct VkDebugUtilsMessengerCallbackDataEXT:
        VkStructureType sType
        void* pNext
        VkDebugUtilsMessengerCallbackDataFlagsEXT flags
        char* pMessageIdName
        int32_t messageIdNumber
        char* pMessage
        uint32_t queueLabelCount
        VkDebugUtilsLabelEXT* pQueueLabels
        uint32_t cmdBufLabelCount
        VkDebugUtilsLabelEXT* pCmdBufLabels
        uint32_t objectCount
        VkDebugUtilsObjectNameInfoEXT* pObjects
    ctypedef VkBool32 ( *PFN_vkDebugUtilsMessengerCallbackEXT)(
        VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
        VkDebugUtilsMessageTypeFlagsEXT messageTypes,
        VkDebugUtilsMessengerCallbackDataEXT* pCallbackData,
        void* pUserData);
    ctypedef struct VkDebugUtilsMessengerCreateInfoEXT:
        VkStructureType sType
        void* pNext
        VkDebugUtilsMessengerCreateFlagsEXT flags
        VkDebugUtilsMessageSeverityFlagsEXT messageSeverity
        VkDebugUtilsMessageTypeFlagsEXT messageType
        PFN_vkDebugUtilsMessengerCallbackEXT pfnUserCallback
        void* pUserData
    ctypedef VkResult ( *PFN_vkSetDebugUtilsObjectNameEXT)(VkDevice device,  VkDebugUtilsObjectNameInfoEXT* pNameInfo);
    ctypedef VkResult ( *PFN_vkSetDebugUtilsObjectTagEXT)(VkDevice device,  VkDebugUtilsObjectTagInfoEXT* pTagInfo);
    ctypedef void ( *PFN_vkQueueBeginDebugUtilsLabelEXT)(VkQueue queue,  VkDebugUtilsLabelEXT* pLabelInfo);
    ctypedef void ( *PFN_vkQueueEndDebugUtilsLabelEXT)(VkQueue queue);
    ctypedef void ( *PFN_vkQueueInsertDebugUtilsLabelEXT)(VkQueue queue,  VkDebugUtilsLabelEXT* pLabelInfo);
    ctypedef void ( *PFN_vkCmdBeginDebugUtilsLabelEXT)(VkCommandBuffer commandBuffer,  VkDebugUtilsLabelEXT* pLabelInfo);
    ctypedef void ( *PFN_vkCmdEndDebugUtilsLabelEXT)(VkCommandBuffer commandBuffer);
    ctypedef void ( *PFN_vkCmdInsertDebugUtilsLabelEXT)(VkCommandBuffer commandBuffer,  VkDebugUtilsLabelEXT* pLabelInfo);
    ctypedef VkResult ( *PFN_vkCreateDebugUtilsMessengerEXT)(VkInstance instance,  VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkDebugUtilsMessengerEXT* pMessenger);
    ctypedef void ( *PFN_vkDestroyDebugUtilsMessengerEXT)(VkInstance instance, VkDebugUtilsMessengerEXT messenger,  VkAllocationCallbacks* pAllocator);
    ctypedef void ( *PFN_vkSubmitDebugUtilsMessageEXT)(VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes,  VkDebugUtilsMessengerCallbackDataEXT* pCallbackData);
    cdef VkResult vkSetDebugUtilsObjectNameEXT(
        VkDevice device,
        VkDebugUtilsObjectNameInfoEXT* pNameInfo);
    cdef VkResult vkSetDebugUtilsObjectTagEXT(
        VkDevice device,
        VkDebugUtilsObjectTagInfoEXT* pTagInfo);
    cdef void vkQueueBeginDebugUtilsLabelEXT(
        VkQueue queue,
        VkDebugUtilsLabelEXT* pLabelInfo);
    cdef void vkQueueEndDebugUtilsLabelEXT(
        VkQueue queue);
    cdef void vkQueueInsertDebugUtilsLabelEXT(
        VkQueue queue,
        VkDebugUtilsLabelEXT* pLabelInfo);
    cdef void vkCmdBeginDebugUtilsLabelEXT(
        VkCommandBuffer commandBuffer,
        VkDebugUtilsLabelEXT* pLabelInfo);
    cdef void vkCmdEndDebugUtilsLabelEXT(
        VkCommandBuffer commandBuffer);
    cdef void vkCmdInsertDebugUtilsLabelEXT(
        VkCommandBuffer commandBuffer,
        VkDebugUtilsLabelEXT* pLabelInfo);
    cdef VkResult vkCreateDebugUtilsMessengerEXT(
        VkInstance instance,
        VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkDebugUtilsMessengerEXT* pMessenger);
    cdef void vkDestroyDebugUtilsMessengerEXT(
        VkInstance instance,
        VkDebugUtilsMessengerEXT messenger,
        VkAllocationCallbacks* pAllocator);
    cdef void vkSubmitDebugUtilsMessageEXT(
        VkInstance instance,
        VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
        VkDebugUtilsMessageTypeFlagsEXT messageTypes,
        VkDebugUtilsMessengerCallbackDataEXT* pCallbackData);
    cdef enum VkSamplerReductionModeEXT:
        VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = 0
        VK_SAMPLER_REDUCTION_MODE_MIN_EXT = 1
        VK_SAMPLER_REDUCTION_MODE_MAX_EXT = 2
        VK_SAMPLER_REDUCTION_MODE_BEGIN_RANGE_EXT = VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT
        VK_SAMPLER_REDUCTION_MODE_END_RANGE_EXT = VK_SAMPLER_REDUCTION_MODE_MAX_EXT
        VK_SAMPLER_REDUCTION_MODE_RANGE_SIZE_EXT = (VK_SAMPLER_REDUCTION_MODE_MAX_EXT - VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT + 1)
        VK_SAMPLER_REDUCTION_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
    ctypedef struct VkSamplerReductionModeCreateInfoEXT:
        VkStructureType sType
        void* pNext
        VkSamplerReductionModeEXT reductionMode
    ctypedef struct VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT:
        VkStructureType sType
        void* pNext
        VkBool32 filterMinmaxSingleComponentFormats
        VkBool32 filterMinmaxImageComponentMapping
    ctypedef struct VkPhysicalDeviceInlineUniformBlockFeaturesEXT:
        VkStructureType sType
        void* pNext
        VkBool32 inlineUniformBlock
        VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind
    ctypedef struct VkPhysicalDeviceInlineUniformBlockPropertiesEXT:
        VkStructureType sType
        void* pNext
        uint32_t maxInlineUniformBlockSize
        uint32_t maxPerStageDescriptorInlineUniformBlocks
        uint32_t maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks
        uint32_t maxDescriptorSetInlineUniformBlocks
        uint32_t maxDescriptorSetUpdateAfterBindInlineUniformBlocks
    ctypedef struct VkWriteDescriptorSetInlineUniformBlockEXT:
        VkStructureType sType
        void* pNext
        uint32_t dataSize
        void* pData
    ctypedef struct VkDescriptorPoolInlineUniformBlockCreateInfoEXT:
        VkStructureType sType
        void* pNext
        uint32_t maxInlineUniformBlockBindings
    ctypedef struct VkSampleLocationEXT:
        float x
        float y
    ctypedef struct VkSampleLocationsInfoEXT:
        VkStructureType sType
        void* pNext
        VkSampleCountFlagBits sampleLocationsPerPixel
        VkExtent2D sampleLocationGridSize
        uint32_t sampleLocationsCount
        VkSampleLocationEXT* pSampleLocations
    ctypedef struct VkAttachmentSampleLocationsEXT:
        uint32_t attachmentIndex
        VkSampleLocationsInfoEXT sampleLocationsInfo
    ctypedef struct VkSubpassSampleLocationsEXT:
        uint32_t subpassIndex
        VkSampleLocationsInfoEXT sampleLocationsInfo
    ctypedef struct VkRenderPassSampleLocationsBeginInfoEXT:
        VkStructureType sType
        void* pNext
        uint32_t attachmentInitialSampleLocationsCount
        VkAttachmentSampleLocationsEXT* pAttachmentInitialSampleLocations
        uint32_t postSubpassSampleLocationsCount
        VkSubpassSampleLocationsEXT* pPostSubpassSampleLocations
    ctypedef struct VkPipelineSampleLocationsStateCreateInfoEXT:
        VkStructureType sType
        void* pNext
        VkBool32 sampleLocationsEnable
        VkSampleLocationsInfoEXT sampleLocationsInfo
    ctypedef struct VkPhysicalDeviceSampleLocationsPropertiesEXT:
        VkStructureType sType
        void* pNext
        VkSampleCountFlags sampleLocationSampleCounts
        VkExtent2D maxSampleLocationGridSize
        float sampleLocationCoordinateRange[2]
        uint32_t sampleLocationSubPixelBits
        VkBool32 variableSampleLocations
    ctypedef struct VkMultisamplePropertiesEXT:
        VkStructureType sType
        void* pNext
        VkExtent2D maxSampleLocationGridSize
    ctypedef void ( *PFN_vkCmdSetSampleLocationsEXT)(VkCommandBuffer commandBuffer,  VkSampleLocationsInfoEXT* pSampleLocationsInfo);
    ctypedef void ( *PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT)(VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT* pMultisampleProperties);
    cdef void vkCmdSetSampleLocationsEXT(
        VkCommandBuffer commandBuffer,
        VkSampleLocationsInfoEXT* pSampleLocationsInfo);
    cdef void vkGetPhysicalDeviceMultisamplePropertiesEXT(
        VkPhysicalDevice physicalDevice,
        VkSampleCountFlagBits samples,
        VkMultisamplePropertiesEXT* pMultisampleProperties);
    cdef enum VkBlendOverlapEXT:
        VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0
        VK_BLEND_OVERLAP_DISJOINT_EXT = 1
        VK_BLEND_OVERLAP_CONJOINT_EXT = 2
        VK_BLEND_OVERLAP_BEGIN_RANGE_EXT = VK_BLEND_OVERLAP_UNCORRELATED_EXT
        VK_BLEND_OVERLAP_END_RANGE_EXT = VK_BLEND_OVERLAP_CONJOINT_EXT
        VK_BLEND_OVERLAP_RANGE_SIZE_EXT = (VK_BLEND_OVERLAP_CONJOINT_EXT - VK_BLEND_OVERLAP_UNCORRELATED_EXT + 1)
        VK_BLEND_OVERLAP_MAX_ENUM_EXT = 0x7FFFFFFF
    ctypedef struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT:
        VkStructureType sType
        void* pNext
        VkBool32 advancedBlendCoherentOperations
    ctypedef struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT:
        VkStructureType sType
        void* pNext
        uint32_t advancedBlendMaxColorAttachments
        VkBool32 advancedBlendIndependentBlend
        VkBool32 advancedBlendNonPremultipliedSrcColor
        VkBool32 advancedBlendNonPremultipliedDstColor
        VkBool32 advancedBlendCorrelatedOverlap
        VkBool32 advancedBlendAllOperations
    ctypedef struct VkPipelineColorBlendAdvancedStateCreateInfoEXT:
        VkStructureType sType
        void* pNext
        VkBool32 srcPremultiplied
        VkBool32 dstPremultiplied
        VkBlendOverlapEXT blendOverlap
    ctypedef VkFlags VkPipelineCoverageToColorStateCreateFlagsNV;
    ctypedef struct VkPipelineCoverageToColorStateCreateInfoNV:
        VkStructureType sType
        void* pNext
        VkPipelineCoverageToColorStateCreateFlagsNV flags
        VkBool32 coverageToColorEnable
        uint32_t coverageToColorLocation
    cdef enum VkCoverageModulationModeNV:
        VK_COVERAGE_MODULATION_MODE_NONE_NV = 0
        VK_COVERAGE_MODULATION_MODE_RGB_NV = 1
        VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2
        VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3
        VK_COVERAGE_MODULATION_MODE_BEGIN_RANGE_NV = VK_COVERAGE_MODULATION_MODE_NONE_NV
        VK_COVERAGE_MODULATION_MODE_END_RANGE_NV = VK_COVERAGE_MODULATION_MODE_RGBA_NV
        VK_COVERAGE_MODULATION_MODE_RANGE_SIZE_NV = (VK_COVERAGE_MODULATION_MODE_RGBA_NV - VK_COVERAGE_MODULATION_MODE_NONE_NV + 1)
        VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 0x7FFFFFFF
    ctypedef VkFlags VkPipelineCoverageModulationStateCreateFlagsNV;
    ctypedef struct VkPipelineCoverageModulationStateCreateInfoNV:
        VkStructureType sType
        void* pNext
        VkPipelineCoverageModulationStateCreateFlagsNV flags
        VkCoverageModulationModeNV coverageModulationMode
        VkBool32 coverageModulationTableEnable
        uint32_t coverageModulationTableCount
        float* pCoverageModulationTable
    ctypedef struct VkDrmFormatModifierPropertiesEXT:
        uint64_t drmFormatModifier
        uint32_t drmFormatModifierPlaneCount
        VkFormatFeatureFlags drmFormatModifierTilingFeatures
    ctypedef struct VkDrmFormatModifierPropertiesListEXT:
        VkStructureType sType
        void* pNext
        uint32_t drmFormatModifierCount
        VkDrmFormatModifierPropertiesEXT* pDrmFormatModifierProperties
    ctypedef struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT:
        VkStructureType sType
        void* pNext
        uint64_t drmFormatModifier
        VkSharingMode sharingMode
        uint32_t queueFamilyIndexCount
        uint32_t* pQueueFamilyIndices
    ctypedef struct VkImageDrmFormatModifierListCreateInfoEXT:
        VkStructureType sType
        void* pNext
        uint32_t drmFormatModifierCount
        uint64_t* pDrmFormatModifiers
    ctypedef struct VkImageDrmFormatModifierExplicitCreateInfoEXT:
        VkStructureType sType
        void* pNext
        uint64_t drmFormatModifier
        uint32_t drmFormatModifierPlaneCount
        VkSubresourceLayout* pPlaneLayouts
    ctypedef struct VkImageDrmFormatModifierPropertiesEXT:
        VkStructureType sType
        void* pNext
        uint64_t drmFormatModifier
    ctypedef VkResult ( *PFN_vkGetImageDrmFormatModifierPropertiesEXT)(VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT* pProperties);
    cdef VkResult vkGetImageDrmFormatModifierPropertiesEXT(
        VkDevice device,
        VkImage image,
        VkImageDrmFormatModifierPropertiesEXT* pProperties);
    ctypedef struct VkValidationCacheEXT:
        pass
    cdef enum VkValidationCacheHeaderVersionEXT:
        VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1
        VK_VALIDATION_CACHE_HEADER_VERSION_BEGIN_RANGE_EXT = VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT
        VK_VALIDATION_CACHE_HEADER_VERSION_END_RANGE_EXT = VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT
        VK_VALIDATION_CACHE_HEADER_VERSION_RANGE_SIZE_EXT = (VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT - VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT + 1)
        VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 0x7FFFFFFF
    ctypedef VkFlags VkValidationCacheCreateFlagsEXT;
    ctypedef struct VkValidationCacheCreateInfoEXT:
        VkStructureType sType
        void* pNext
        VkValidationCacheCreateFlagsEXT flags
        size_t initialDataSize
        void* pInitialData
    ctypedef struct VkShaderModuleValidationCacheCreateInfoEXT:
        VkStructureType sType
        void* pNext
        VkValidationCacheEXT validationCache
    ctypedef VkResult ( *PFN_vkCreateValidationCacheEXT)(VkDevice device,  VkValidationCacheCreateInfoEXT* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkValidationCacheEXT* pValidationCache);
    ctypedef void ( *PFN_vkDestroyValidationCacheEXT)(VkDevice device, VkValidationCacheEXT validationCache,  VkAllocationCallbacks* pAllocator);
    ctypedef VkResult ( *PFN_vkMergeValidationCachesEXT)(VkDevice device, VkValidationCacheEXT dstCache, uint32_t srcCacheCount,  VkValidationCacheEXT* pSrcCaches);
    ctypedef VkResult ( *PFN_vkGetValidationCacheDataEXT)(VkDevice device, VkValidationCacheEXT validationCache, size_t* pDataSize, void* pData);
    cdef VkResult vkCreateValidationCacheEXT(
        VkDevice device,
        VkValidationCacheCreateInfoEXT* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkValidationCacheEXT* pValidationCache);
    cdef void vkDestroyValidationCacheEXT(
        VkDevice device,
        VkValidationCacheEXT validationCache,
        VkAllocationCallbacks* pAllocator);
    cdef VkResult vkMergeValidationCachesEXT(
        VkDevice device,
        VkValidationCacheEXT dstCache,
        uint32_t srcCacheCount,
        VkValidationCacheEXT* pSrcCaches);
    cdef VkResult vkGetValidationCacheDataEXT(
        VkDevice device,
        VkValidationCacheEXT validationCache,
        size_t* pDataSize,
        void* pData);
    cdef enum VkDescriptorBindingFlagBitsEXT:
        VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = 0x00000001
        VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = 0x00000002
        VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = 0x00000004
        VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = 0x00000008
        VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
    ctypedef VkFlags VkDescriptorBindingFlagsEXT;
    ctypedef struct VkDescriptorSetLayoutBindingFlagsCreateInfoEXT:
        VkStructureType sType
        void* pNext
        uint32_t bindingCount
        VkDescriptorBindingFlagsEXT* pBindingFlags
    ctypedef struct VkPhysicalDeviceDescriptorIndexingFeaturesEXT:
        VkStructureType sType
        void* pNext
        VkBool32 shaderInputAttachmentArrayDynamicIndexing
        VkBool32 shaderUniformTexelBufferArrayDynamicIndexing
        VkBool32 shaderStorageTexelBufferArrayDynamicIndexing
        VkBool32 shaderUniformBufferArrayNonUniformIndexing
        VkBool32 shaderSampledImageArrayNonUniformIndexing
        VkBool32 shaderStorageBufferArrayNonUniformIndexing
        VkBool32 shaderStorageImageArrayNonUniformIndexing
        VkBool32 shaderInputAttachmentArrayNonUniformIndexing
        VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing
        VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing
        VkBool32 descriptorBindingUniformBufferUpdateAfterBind
        VkBool32 descriptorBindingSampledImageUpdateAfterBind
        VkBool32 descriptorBindingStorageImageUpdateAfterBind
        VkBool32 descriptorBindingStorageBufferUpdateAfterBind
        VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind
        VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind
        VkBool32 descriptorBindingUpdateUnusedWhilePending
        VkBool32 descriptorBindingPartiallyBound
        VkBool32 descriptorBindingVariableDescriptorCount
        VkBool32 runtimeDescriptorArray
    ctypedef struct VkPhysicalDeviceDescriptorIndexingPropertiesEXT:
        VkStructureType sType
        void* pNext
        uint32_t maxUpdateAfterBindDescriptorsInAllPools
        VkBool32 shaderUniformBufferArrayNonUniformIndexingNative
        VkBool32 shaderSampledImageArrayNonUniformIndexingNative
        VkBool32 shaderStorageBufferArrayNonUniformIndexingNative
        VkBool32 shaderStorageImageArrayNonUniformIndexingNative
        VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative
        VkBool32 robustBufferAccessUpdateAfterBind
        VkBool32 quadDivergentImplicitLod
        uint32_t maxPerStageDescriptorUpdateAfterBindSamplers
        uint32_t maxPerStageDescriptorUpdateAfterBindUniformBuffers
        uint32_t maxPerStageDescriptorUpdateAfterBindStorageBuffers
        uint32_t maxPerStageDescriptorUpdateAfterBindSampledImages
        uint32_t maxPerStageDescriptorUpdateAfterBindStorageImages
        uint32_t maxPerStageDescriptorUpdateAfterBindInputAttachments
        uint32_t maxPerStageUpdateAfterBindResources
        uint32_t maxDescriptorSetUpdateAfterBindSamplers
        uint32_t maxDescriptorSetUpdateAfterBindUniformBuffers
        uint32_t maxDescriptorSetUpdateAfterBindUniformBuffersDynamic
        uint32_t maxDescriptorSetUpdateAfterBindStorageBuffers
        uint32_t maxDescriptorSetUpdateAfterBindStorageBuffersDynamic
        uint32_t maxDescriptorSetUpdateAfterBindSampledImages
        uint32_t maxDescriptorSetUpdateAfterBindStorageImages
        uint32_t maxDescriptorSetUpdateAfterBindInputAttachments
    ctypedef struct VkDescriptorSetVariableDescriptorCountAllocateInfoEXT:
        VkStructureType sType
        void* pNext
        uint32_t descriptorSetCount
        uint32_t* pDescriptorCounts
    ctypedef struct VkDescriptorSetVariableDescriptorCountLayoutSupportEXT:
        VkStructureType sType
        void* pNext
        uint32_t maxVariableDescriptorCount
    cdef enum VkShadingRatePaletteEntryNV:
        VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0
        VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1
        VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2
        VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3
        VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4
        VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5
        VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6
        VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7
        VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8
        VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9
        VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10
        VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11
        VK_SHADING_RATE_PALETTE_ENTRY_BEGIN_RANGE_NV = VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV
        VK_SHADING_RATE_PALETTE_ENTRY_END_RANGE_NV = VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV
        VK_SHADING_RATE_PALETTE_ENTRY_RANGE_SIZE_NV = (VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV - VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV + 1)
        VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = 0x7FFFFFFF
    cdef enum VkCoarseSampleOrderTypeNV:
        VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0
        VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1
        VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2
        VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3
        VK_COARSE_SAMPLE_ORDER_TYPE_BEGIN_RANGE_NV = VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV
        VK_COARSE_SAMPLE_ORDER_TYPE_END_RANGE_NV = VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV
        VK_COARSE_SAMPLE_ORDER_TYPE_RANGE_SIZE_NV = (VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV - VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV + 1)
        VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
    ctypedef struct VkShadingRatePaletteNV:
        uint32_t shadingRatePaletteEntryCount
        VkShadingRatePaletteEntryNV* pShadingRatePaletteEntries
    ctypedef struct VkPipelineViewportShadingRateImageStateCreateInfoNV:
        VkStructureType sType
        void* pNext
        VkBool32 shadingRateImageEnable
        uint32_t viewportCount
        VkShadingRatePaletteNV* pShadingRatePalettes
    ctypedef struct VkPhysicalDeviceShadingRateImageFeaturesNV:
        VkStructureType sType
        void* pNext
        VkBool32 shadingRateImage
        VkBool32 shadingRateCoarseSampleOrder
    ctypedef struct VkPhysicalDeviceShadingRateImagePropertiesNV:
        VkStructureType sType
        void* pNext
        VkExtent2D shadingRateTexelSize
        uint32_t shadingRatePaletteSize
        uint32_t shadingRateMaxCoarseSamples
    ctypedef struct VkCoarseSampleLocationNV:
        uint32_t pixelX
        uint32_t pixelY
        uint32_t sample
    ctypedef struct VkCoarseSampleOrderCustomNV:
        VkShadingRatePaletteEntryNV shadingRate
        uint32_t sampleCount
        uint32_t sampleLocationCount
        VkCoarseSampleLocationNV* pSampleLocations
    ctypedef struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV:
        VkStructureType sType
        void* pNext
        VkCoarseSampleOrderTypeNV sampleOrderType
        uint32_t customSampleOrderCount
        VkCoarseSampleOrderCustomNV* pCustomSampleOrders
    ctypedef void ( *PFN_vkCmdBindShadingRateImageNV)(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout);
    ctypedef void ( *PFN_vkCmdSetViewportShadingRatePaletteNV)(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount,  VkShadingRatePaletteNV* pShadingRatePalettes);
    ctypedef void ( *PFN_vkCmdSetCoarseSampleOrderNV)(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount,  VkCoarseSampleOrderCustomNV* pCustomSampleOrders);
    cdef void vkCmdBindShadingRateImageNV(
        VkCommandBuffer commandBuffer,
        VkImageView imageView,
        VkImageLayout imageLayout);
    cdef void vkCmdSetViewportShadingRatePaletteNV(
        VkCommandBuffer commandBuffer,
        uint32_t firstViewport,
        uint32_t viewportCount,
        VkShadingRatePaletteNV* pShadingRatePalettes);
    cdef void vkCmdSetCoarseSampleOrderNV(
        VkCommandBuffer commandBuffer,
        VkCoarseSampleOrderTypeNV sampleOrderType,
        uint32_t customSampleOrderCount,
        VkCoarseSampleOrderCustomNV* pCustomSampleOrders);
    ctypedef struct VkAccelerationStructureNV:
        pass
    cdef enum VkRayTracingShaderGroupTypeNV:
        VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = 0
        VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = 1
        VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = 2
        VK_RAY_TRACING_SHADER_GROUP_TYPE_BEGIN_RANGE_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV
        VK_RAY_TRACING_SHADER_GROUP_TYPE_END_RANGE_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV
        VK_RAY_TRACING_SHADER_GROUP_TYPE_RANGE_SIZE_NV = (VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV - VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV + 1)
        VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
    cdef enum VkGeometryTypeNV:
        VK_GEOMETRY_TYPE_TRIANGLES_NV = 0
        VK_GEOMETRY_TYPE_AABBS_NV = 1
        VK_GEOMETRY_TYPE_BEGIN_RANGE_NV = VK_GEOMETRY_TYPE_TRIANGLES_NV
        VK_GEOMETRY_TYPE_END_RANGE_NV = VK_GEOMETRY_TYPE_AABBS_NV
        VK_GEOMETRY_TYPE_RANGE_SIZE_NV = (VK_GEOMETRY_TYPE_AABBS_NV - VK_GEOMETRY_TYPE_TRIANGLES_NV + 1)
        VK_GEOMETRY_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
    cdef enum VkAccelerationStructureTypeNV:
        VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = 0
        VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = 1
        VK_ACCELERATION_STRUCTURE_TYPE_BEGIN_RANGE_NV = VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV
        VK_ACCELERATION_STRUCTURE_TYPE_END_RANGE_NV = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV
        VK_ACCELERATION_STRUCTURE_TYPE_RANGE_SIZE_NV = (VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV - VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV + 1)
        VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
    cdef enum VkCopyAccelerationStructureModeNV:
        VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = 0
        VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = 1
        VK_COPY_ACCELERATION_STRUCTURE_MODE_BEGIN_RANGE_NV = VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV
        VK_COPY_ACCELERATION_STRUCTURE_MODE_END_RANGE_NV = VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV
        VK_COPY_ACCELERATION_STRUCTURE_MODE_RANGE_SIZE_NV = (VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV - VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV + 1)
        VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_NV = 0x7FFFFFFF
    cdef enum VkAccelerationStructureMemoryRequirementsTypeNV:
        VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0
        VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1
        VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2
        VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BEGIN_RANGE_NV = VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV
        VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_END_RANGE_NV = VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV
        VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_RANGE_SIZE_NV = (VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV - VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV + 1)
        VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
    cdef enum VkGeometryFlagBitsNV:
        VK_GEOMETRY_OPAQUE_BIT_NV = 0x00000001
        VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = 0x00000002
        VK_GEOMETRY_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
    ctypedef VkFlags VkGeometryFlagsNV;
    cdef enum VkGeometryInstanceFlagBitsNV:
        VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = 0x00000001
        VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = 0x00000002
        VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = 0x00000004
        VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = 0x00000008
        VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
    ctypedef VkFlags VkGeometryInstanceFlagsNV;
    cdef enum VkBuildAccelerationStructureFlagBitsNV:
        VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = 0x00000001
        VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = 0x00000002
        VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = 0x00000004
        VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = 0x00000008
        VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = 0x00000010
        VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
    ctypedef VkFlags VkBuildAccelerationStructureFlagsNV;
    ctypedef struct VkRayTracingShaderGroupCreateInfoNV:
        VkStructureType sType
        void* pNext
        VkRayTracingShaderGroupTypeNV type
        uint32_t generalShader
        uint32_t closestHitShader
        uint32_t anyHitShader
        uint32_t intersectionShader
    ctypedef struct VkRayTracingPipelineCreateInfoNV:
        VkStructureType sType
        void* pNext
        VkPipelineCreateFlags flags
        uint32_t stageCount
        VkPipelineShaderStageCreateInfo* pStages
        uint32_t groupCount
        VkRayTracingShaderGroupCreateInfoNV* pGroups
        uint32_t maxRecursionDepth
        VkPipelineLayout layout
        VkPipeline basePipelineHandle
        int32_t basePipelineIndex
    ctypedef struct VkGeometryTrianglesNV:
        VkStructureType sType
        void* pNext
        VkBuffer vertexData
        VkDeviceSize vertexOffset
        uint32_t vertexCount
        VkDeviceSize vertexStride
        VkFormat vertexFormat
        VkBuffer indexData
        VkDeviceSize indexOffset
        uint32_t indexCount
        VkIndexType indexType
        VkBuffer transformData
        VkDeviceSize transformOffset
    ctypedef struct VkGeometryAABBNV:
        VkStructureType sType
        void* pNext
        VkBuffer aabbData
        uint32_t numAABBs
        uint32_t stride
        VkDeviceSize offset
    ctypedef struct VkGeometryDataNV:
        VkGeometryTrianglesNV triangles
        VkGeometryAABBNV aabbs
    ctypedef struct VkGeometryNV:
        VkStructureType sType
        void* pNext
        VkGeometryTypeNV geometryType
        VkGeometryDataNV geometry
        VkGeometryFlagsNV flags
    ctypedef struct VkAccelerationStructureInfoNV:
        VkStructureType sType
        void* pNext
        VkAccelerationStructureTypeNV type
        VkBuildAccelerationStructureFlagsNV flags
        uint32_t instanceCount
        uint32_t geometryCount
        VkGeometryNV* pGeometries
    ctypedef struct VkAccelerationStructureCreateInfoNV:
        VkStructureType sType
        void* pNext
        VkDeviceSize compactedSize
        VkAccelerationStructureInfoNV info
    ctypedef struct VkBindAccelerationStructureMemoryInfoNV:
        VkStructureType sType
        void* pNext
        VkAccelerationStructureNV accelerationStructure
        VkDeviceMemory memory
        VkDeviceSize memoryOffset
        uint32_t deviceIndexCount
        uint32_t* pDeviceIndices
    ctypedef struct VkWriteDescriptorSetAccelerationStructureNV:
        VkStructureType sType
        void* pNext
        uint32_t accelerationStructureCount
        VkAccelerationStructureNV* pAccelerationStructures
    ctypedef struct VkAccelerationStructureMemoryRequirementsInfoNV:
        VkStructureType sType
        void* pNext
        VkAccelerationStructureMemoryRequirementsTypeNV type
        VkAccelerationStructureNV accelerationStructure
    ctypedef struct VkPhysicalDeviceRayTracingPropertiesNV:
        VkStructureType sType
        void* pNext
        uint32_t shaderGroupHandleSize
        uint32_t maxRecursionDepth
        uint32_t maxShaderGroupStride
        uint32_t shaderGroupBaseAlignment
        uint64_t maxGeometryCount
        uint64_t maxInstanceCount
        uint64_t maxTriangleCount
        uint32_t maxDescriptorSetAccelerationStructures
    ctypedef VkResult ( *PFN_vkCreateAccelerationStructureNV)(VkDevice device,  VkAccelerationStructureCreateInfoNV* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkAccelerationStructureNV* pAccelerationStructure);
    ctypedef void ( *PFN_vkDestroyAccelerationStructureNV)(VkDevice device, VkAccelerationStructureNV accelerationStructure,  VkAllocationCallbacks* pAllocator);
    ctypedef void ( *PFN_vkGetAccelerationStructureMemoryRequirementsNV)(VkDevice device,  VkAccelerationStructureMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements);
    ctypedef VkResult ( *PFN_vkBindAccelerationStructureMemoryNV)(VkDevice device, uint32_t bindInfoCount,  VkBindAccelerationStructureMemoryInfoNV* pBindInfos);
    ctypedef void ( *PFN_vkCmdBuildAccelerationStructureNV)(VkCommandBuffer commandBuffer,  VkAccelerationStructureInfoNV* pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset);
    ctypedef void ( *PFN_vkCmdCopyAccelerationStructureNV)(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeNV mode);
    ctypedef void ( *PFN_vkCmdTraceRaysNV)(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth);
    ctypedef VkResult ( *PFN_vkCreateRayTracingPipelinesNV)(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount,  VkRayTracingPipelineCreateInfoNV* pCreateInfos,  VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines);
    ctypedef VkResult ( *PFN_vkGetRayTracingShaderGroupHandlesNV)(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData);
    ctypedef VkResult ( *PFN_vkGetAccelerationStructureHandleNV)(VkDevice device, VkAccelerationStructureNV accelerationStructure, size_t dataSize, void* pData);
    ctypedef void ( *PFN_vkCmdWriteAccelerationStructuresPropertiesNV)(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount,  VkAccelerationStructureNV* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery);
    ctypedef VkResult ( *PFN_vkCompileDeferredNV)(VkDevice device, VkPipeline pipeline, uint32_t shader);
    cdef VkResult vkCreateAccelerationStructureNV(
        VkDevice device,
        VkAccelerationStructureCreateInfoNV* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkAccelerationStructureNV* pAccelerationStructure);
    cdef void vkDestroyAccelerationStructureNV(
        VkDevice device,
        VkAccelerationStructureNV accelerationStructure,
        VkAllocationCallbacks* pAllocator);
    cdef void vkGetAccelerationStructureMemoryRequirementsNV(
        VkDevice device,
        VkAccelerationStructureMemoryRequirementsInfoNV* pInfo,
        VkMemoryRequirements2KHR* pMemoryRequirements);
    cdef VkResult vkBindAccelerationStructureMemoryNV(
        VkDevice device,
        uint32_t bindInfoCount,
        VkBindAccelerationStructureMemoryInfoNV* pBindInfos);
    cdef void vkCmdBuildAccelerationStructureNV(
        VkCommandBuffer commandBuffer,
        VkAccelerationStructureInfoNV* pInfo,
        VkBuffer instanceData,
        VkDeviceSize instanceOffset,
        VkBool32 update,
        VkAccelerationStructureNV dst,
        VkAccelerationStructureNV src,
        VkBuffer scratch,
        VkDeviceSize scratchOffset);
    cdef void vkCmdCopyAccelerationStructureNV(
        VkCommandBuffer commandBuffer,
        VkAccelerationStructureNV dst,
        VkAccelerationStructureNV src,
        VkCopyAccelerationStructureModeNV mode);
    cdef void vkCmdTraceRaysNV(
        VkCommandBuffer commandBuffer,
        VkBuffer raygenShaderBindingTableBuffer,
        VkDeviceSize raygenShaderBindingOffset,
        VkBuffer missShaderBindingTableBuffer,
        VkDeviceSize missShaderBindingOffset,
        VkDeviceSize missShaderBindingStride,
        VkBuffer hitShaderBindingTableBuffer,
        VkDeviceSize hitShaderBindingOffset,
        VkDeviceSize hitShaderBindingStride,
        VkBuffer callableShaderBindingTableBuffer,
        VkDeviceSize callableShaderBindingOffset,
        VkDeviceSize callableShaderBindingStride,
        uint32_t width,
        uint32_t height,
        uint32_t depth);
    cdef VkResult vkCreateRayTracingPipelinesNV(
        VkDevice device,
        VkPipelineCache pipelineCache,
        uint32_t createInfoCount,
        VkRayTracingPipelineCreateInfoNV* pCreateInfos,
        VkAllocationCallbacks* pAllocator,
        VkPipeline* pPipelines);
    cdef VkResult vkGetRayTracingShaderGroupHandlesNV(
        VkDevice device,
        VkPipeline pipeline,
        uint32_t firstGroup,
        uint32_t groupCount,
        size_t dataSize,
        void* pData);
    cdef VkResult vkGetAccelerationStructureHandleNV(
        VkDevice device,
        VkAccelerationStructureNV accelerationStructure,
        size_t dataSize,
        void* pData);
    cdef void vkCmdWriteAccelerationStructuresPropertiesNV(
        VkCommandBuffer commandBuffer,
        uint32_t accelerationStructureCount,
        VkAccelerationStructureNV* pAccelerationStructures,
        VkQueryType queryType,
        VkQueryPool queryPool,
        uint32_t firstQuery);
    cdef VkResult vkCompileDeferredNV(
        VkDevice device,
        VkPipeline pipeline,
        uint32_t shader);
    ctypedef struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV:
        VkStructureType sType
        void* pNext
        VkBool32 representativeFragmentTest
    ctypedef struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV:
        VkStructureType sType
        void* pNext
        VkBool32 representativeFragmentTestEnable
    ctypedef struct VkPhysicalDeviceImageViewImageFormatInfoEXT:
        VkStructureType sType
        void* pNext
        VkImageViewType imageViewType
    ctypedef struct VkFilterCubicImageViewImageFormatPropertiesEXT:
        VkStructureType sType
        void* pNext
        VkBool32 filterCubic
        VkBool32 filterCubicMinmax 
    cdef enum VkQueueGlobalPriorityEXT:
        VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128
        VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256
        VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512
        VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024
        VK_QUEUE_GLOBAL_PRIORITY_BEGIN_RANGE_EXT = VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT
        VK_QUEUE_GLOBAL_PRIORITY_END_RANGE_EXT = VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT
        VK_QUEUE_GLOBAL_PRIORITY_RANGE_SIZE_EXT = (VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT - VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT + 1)
        VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT = 0x7FFFFFFF
    ctypedef struct VkDeviceQueueGlobalPriorityCreateInfoEXT:
        VkStructureType sType
        void* pNext
        VkQueueGlobalPriorityEXT globalPriority
    ctypedef struct VkImportMemoryHostPointerInfoEXT:
        VkStructureType sType
        void* pNext
        VkExternalMemoryHandleTypeFlagBits handleType
        void* pHostPointer
    ctypedef struct VkMemoryHostPointerPropertiesEXT:
        VkStructureType sType
        void* pNext
        uint32_t memoryTypeBits
    ctypedef struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT:
        VkStructureType sType
        void* pNext
        VkDeviceSize minImportedHostPointerAlignment
    ctypedef VkResult ( *PFN_vkGetMemoryHostPointerPropertiesEXT)(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType,  void* pHostPointer, VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties);
    cdef VkResult vkGetMemoryHostPointerPropertiesEXT(
        VkDevice device,
        VkExternalMemoryHandleTypeFlagBits handleType,
        void* pHostPointer,
        VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties);
    ctypedef void ( *PFN_vkCmdWriteBufferMarkerAMD)(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker);
    cdef void vkCmdWriteBufferMarkerAMD(
        VkCommandBuffer commandBuffer,
        VkPipelineStageFlagBits pipelineStage,
        VkBuffer dstBuffer,
        VkDeviceSize dstOffset,
        uint32_t marker);
    cdef enum VkTimeDomainEXT:
        VK_TIME_DOMAIN_DEVICE_EXT = 0
        VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1
        VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2
        VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3
        VK_TIME_DOMAIN_BEGIN_RANGE_EXT = VK_TIME_DOMAIN_DEVICE_EXT
        VK_TIME_DOMAIN_END_RANGE_EXT = VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT
        VK_TIME_DOMAIN_RANGE_SIZE_EXT = (VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT - VK_TIME_DOMAIN_DEVICE_EXT + 1)
        VK_TIME_DOMAIN_MAX_ENUM_EXT = 0x7FFFFFFF
    ctypedef struct VkCalibratedTimestampInfoEXT:
        VkStructureType sType
        void* pNext
        VkTimeDomainEXT timeDomain
    ctypedef VkResult ( *PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT)(VkPhysicalDevice physicalDevice, uint32_t* pTimeDomainCount, VkTimeDomainEXT* pTimeDomains);
    ctypedef VkResult ( *PFN_vkGetCalibratedTimestampsEXT)(VkDevice device, uint32_t timestampCount,  VkCalibratedTimestampInfoEXT* pTimestampInfos, uint64_t* pTimestamps, uint64_t* pMaxDeviation);
    cdef VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(
        VkPhysicalDevice physicalDevice,
        uint32_t* pTimeDomainCount,
        VkTimeDomainEXT* pTimeDomains);
    cdef VkResult vkGetCalibratedTimestampsEXT(
        VkDevice device,
        uint32_t timestampCount,
        VkCalibratedTimestampInfoEXT* pTimestampInfos,
        uint64_t* pTimestamps,
        uint64_t* pMaxDeviation);
    ctypedef struct VkPhysicalDeviceShaderCorePropertiesAMD:
        VkStructureType sType
        void* pNext
        uint32_t shaderEngineCount
        uint32_t shaderArraysPerEngineCount
        uint32_t computeUnitsPerShaderArray
        uint32_t simdPerComputeUnit
        uint32_t wavefrontsPerSimd
        uint32_t wavefrontSize
        uint32_t sgprsPerSimd
        uint32_t minSgprAllocation
        uint32_t maxSgprAllocation
        uint32_t sgprAllocationGranularity
        uint32_t vgprsPerSimd
        uint32_t minVgprAllocation
        uint32_t maxVgprAllocation
        uint32_t vgprAllocationGranularity
    cdef enum VkMemoryOverallocationBehaviorAMD:
        VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0
        VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1
        VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2
        VK_MEMORY_OVERALLOCATION_BEHAVIOR_BEGIN_RANGE_AMD = VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD
        VK_MEMORY_OVERALLOCATION_BEHAVIOR_END_RANGE_AMD = VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD
        VK_MEMORY_OVERALLOCATION_BEHAVIOR_RANGE_SIZE_AMD = (VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD - VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD + 1)
        VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = 0x7FFFFFFF
    ctypedef struct VkDeviceMemoryOverallocationCreateInfoAMD:
        VkStructureType sType
        void* pNext
        VkMemoryOverallocationBehaviorAMD overallocationBehavior
    ctypedef struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT:
        VkStructureType sType
        void* pNext
        uint32_t maxVertexAttribDivisor
    ctypedef struct VkVertexInputBindingDivisorDescriptionEXT:
        uint32_t binding
        uint32_t divisor
    ctypedef struct VkPipelineVertexInputDivisorStateCreateInfoEXT:
        VkStructureType sType
        void* pNext
        uint32_t vertexBindingDivisorCount
        VkVertexInputBindingDivisorDescriptionEXT* pVertexBindingDivisors
    ctypedef struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT:
        VkStructureType sType
        void* pNext
        VkBool32 vertexAttributeInstanceRateDivisor
        VkBool32 vertexAttributeInstanceRateZeroDivisor
    ctypedef struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV:
        VkStructureType sType
        void* pNext
        VkBool32 computeDerivativeGroupQuads
        VkBool32 computeDerivativeGroupLinear
    ctypedef struct VkPhysicalDeviceMeshShaderFeaturesNV:
        VkStructureType sType
        void* pNext
        VkBool32 taskShader
        VkBool32 meshShader
    ctypedef struct VkPhysicalDeviceMeshShaderPropertiesNV:
        VkStructureType sType
        void* pNext
        uint32_t maxDrawMeshTasksCount
        uint32_t maxTaskWorkGroupInvocations
        uint32_t maxTaskWorkGroupSize[3]
        uint32_t maxTaskTotalMemorySize
        uint32_t maxTaskOutputCount
        uint32_t maxMeshWorkGroupInvocations
        uint32_t maxMeshWorkGroupSize[3]
        uint32_t maxMeshTotalMemorySize
        uint32_t maxMeshOutputVertices
        uint32_t maxMeshOutputPrimitives
        uint32_t maxMeshMultiviewViewCount
        uint32_t meshOutputPerVertexGranularity
        uint32_t meshOutputPerPrimitiveGranularity
    ctypedef struct VkDrawMeshTasksIndirectCommandNV:
        uint32_t taskCount
        uint32_t firstTask
    ctypedef void ( *PFN_vkCmdDrawMeshTasksNV)(VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask);
    ctypedef void ( *PFN_vkCmdDrawMeshTasksIndirectNV)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
    ctypedef void ( *PFN_vkCmdDrawMeshTasksIndirectCountNV)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
    cdef void vkCmdDrawMeshTasksNV(
        VkCommandBuffer commandBuffer,
        uint32_t taskCount,
        uint32_t firstTask);
    cdef void vkCmdDrawMeshTasksIndirectNV(
        VkCommandBuffer commandBuffer,
        VkBuffer buffer,
        VkDeviceSize offset,
        uint32_t drawCount,
        uint32_t stride);
    cdef void vkCmdDrawMeshTasksIndirectCountNV(
        VkCommandBuffer commandBuffer,
        VkBuffer buffer,
        VkDeviceSize offset,
        VkBuffer countBuffer,
        VkDeviceSize countBufferOffset,
        uint32_t maxDrawCount,
        uint32_t stride);
    ctypedef struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV:
        VkStructureType sType
        void* pNext
        VkBool32 fragmentShaderBarycentric
    ctypedef struct VkPhysicalDeviceShaderImageFootprintFeaturesNV:
        VkStructureType sType
        void* pNext
        VkBool32 imageFootprint
    ctypedef struct VkPipelineViewportExclusiveScissorStateCreateInfoNV:
        VkStructureType sType
        void* pNext
        uint32_t exclusiveScissorCount
        VkRect2D* pExclusiveScissors
    ctypedef struct VkPhysicalDeviceExclusiveScissorFeaturesNV:
        VkStructureType sType
        void* pNext
        VkBool32 exclusiveScissor
    ctypedef void ( *PFN_vkCmdSetExclusiveScissorNV)(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount,  VkRect2D* pExclusiveScissors);
    cdef void vkCmdSetExclusiveScissorNV(
        VkCommandBuffer commandBuffer,
        uint32_t firstExclusiveScissor,
        uint32_t exclusiveScissorCount,
        VkRect2D* pExclusiveScissors);
    ctypedef struct VkQueueFamilyCheckpointPropertiesNV:
        VkStructureType sType
        void* pNext
        VkPipelineStageFlags checkpointExecutionStageMask
    ctypedef struct VkCheckpointDataNV:
        VkStructureType sType
        void* pNext
        VkPipelineStageFlagBits stage
        void* pCheckpointMarker
    ctypedef void ( *PFN_vkCmdSetCheckpointNV)(VkCommandBuffer commandBuffer,  void* pCheckpointMarker);
    ctypedef void ( *PFN_vkGetQueueCheckpointDataNV)(VkQueue queue, uint32_t* pCheckpointDataCount, VkCheckpointDataNV* pCheckpointData);
    cdef void vkCmdSetCheckpointNV(
        VkCommandBuffer commandBuffer,
        void* pCheckpointMarker);
    cdef void vkGetQueueCheckpointDataNV(
        VkQueue queue,
        uint32_t* pCheckpointDataCount,
        VkCheckpointDataNV* pCheckpointData);
    ctypedef struct VkPhysicalDevicePCIBusInfoPropertiesEXT:
        VkStructureType sType
        void* pNext
        uint32_t pciDomain
        uint32_t pciBus
        uint32_t pciDevice
        uint32_t pciFunction
    ctypedef struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT:
        VkStructureType sType
        void* pNext
        VkBool32 fragmentDensityMap
        VkBool32 fragmentDensityMapDynamic
        VkBool32 fragmentDensityMapNonSubsampledImages
    ctypedef struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT:
        VkStructureType sType
        void* pNext
        VkExtent2D minFragmentDensityTexelSize
        VkExtent2D maxFragmentDensityTexelSize
        VkBool32 fragmentDensityInvocations
    ctypedef struct VkRenderPassFragmentDensityMapCreateInfoEXT:
        VkStructureType sType
        void* pNext
        VkAttachmentReference fragmentDensityMapAttachment
    ctypedef struct VkPhysicalDeviceScalarBlockLayoutFeaturesEXT:
        VkStructureType sType
        void* pNext
        VkBool32 scalarBlockLayout
    ctypedef struct VkPhysicalDeviceMemoryBudgetPropertiesEXT:
        VkStructureType sType
        void* pNext
        VkDeviceSize heapBudget[16]
        VkDeviceSize heapUsage[16]
    ctypedef struct VkPhysicalDeviceMemoryPriorityFeaturesEXT:
        VkStructureType sType
        void* pNext
        VkBool32 memoryPriority
    ctypedef struct VkMemoryPriorityAllocateInfoEXT:
        VkStructureType sType
        void* pNext
        float priority
    ctypedef struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV:
        VkStructureType sType
        void* pNext
        VkBool32 dedicatedAllocationImageAliasing
    ctypedef uint64_t VkDeviceAddress;
    ctypedef struct VkPhysicalDeviceBufferAddressFeaturesEXT:
        VkStructureType sType
        void* pNext
        VkBool32 bufferDeviceAddress
        VkBool32 bufferDeviceAddressCaptureReplay
        VkBool32 bufferDeviceAddressMultiDevice
    ctypedef struct VkBufferDeviceAddressInfoEXT:
        VkStructureType sType
        void* pNext
        VkBuffer buffer
    ctypedef struct VkBufferDeviceAddressCreateInfoEXT:
        VkStructureType sType
        void* pNext
        VkDeviceSize deviceAddress
    ctypedef VkDeviceAddress ( *PFN_vkGetBufferDeviceAddressEXT)(VkDevice device,  VkBufferDeviceAddressInfoEXT* pInfo);
    cdef VkDeviceAddress vkGetBufferDeviceAddressEXT(
        VkDevice device,
        VkBufferDeviceAddressInfoEXT* pInfo);
    ctypedef struct VkImageStencilUsageCreateInfoEXT:
        VkStructureType sType
        void* pNext
        VkImageUsageFlags stencilUsage
    cdef enum VkValidationFeatureEnableEXT:
        VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0
        VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1
        VK_VALIDATION_FEATURE_ENABLE_BEGIN_RANGE_EXT = VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT
        VK_VALIDATION_FEATURE_ENABLE_END_RANGE_EXT = VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT
        VK_VALIDATION_FEATURE_ENABLE_RANGE_SIZE_EXT = (VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT - VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT + 1)
        VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = 0x7FFFFFFF
    cdef enum VkValidationFeatureDisableEXT:
        VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0
        VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1
        VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2
        VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3
        VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4
        VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5
        VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6
        VK_VALIDATION_FEATURE_DISABLE_BEGIN_RANGE_EXT = VK_VALIDATION_FEATURE_DISABLE_ALL_EXT
        VK_VALIDATION_FEATURE_DISABLE_END_RANGE_EXT = VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT
        VK_VALIDATION_FEATURE_DISABLE_RANGE_SIZE_EXT = (VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT - VK_VALIDATION_FEATURE_DISABLE_ALL_EXT + 1)
        VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = 0x7FFFFFFF
    ctypedef struct VkValidationFeaturesEXT:
        VkStructureType sType
        void* pNext
        uint32_t enabledValidationFeatureCount
        VkValidationFeatureEnableEXT* pEnabledValidationFeatures
        uint32_t disabledValidationFeatureCount
        VkValidationFeatureDisableEXT* pDisabledValidationFeatures
    ctypedef VkFlags VkAndroidSurfaceCreateFlagsKHR;
    ctypedef struct VkAndroidSurfaceCreateInfoKHR:
        VkStructureType sType
        void* pNext
        VkAndroidSurfaceCreateFlagsKHR flags
        ANativeWindow* window
    ctypedef VkResult ( *PFN_vkCreateAndroidSurfaceKHR)(VkInstance instance,  VkAndroidSurfaceCreateInfoKHR* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);
    cdef VkResult vkCreateAndroidSurfaceKHR(
        VkInstance instance,
        VkAndroidSurfaceCreateInfoKHR* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkSurfaceKHR* pSurface);
    ctypedef struct VkAndroidHardwareBufferUsageANDROID:
        VkStructureType sType
        void* pNext
        uint64_t androidHardwareBufferUsage
    ctypedef struct VkAndroidHardwareBufferPropertiesANDROID:
        VkStructureType sType
        void* pNext
        VkDeviceSize allocationSize
        uint32_t memoryTypeBits
    ctypedef struct VkAndroidHardwareBufferFormatPropertiesANDROID:
        VkStructureType sType
        void* pNext
        VkFormat format
        uint64_t externalFormat
        VkFormatFeatureFlags formatFeatures
        VkComponentMapping samplerYcbcrConversionComponents
        VkSamplerYcbcrModelConversion suggestedYcbcrModel
        VkSamplerYcbcrRange suggestedYcbcrRange
        VkChromaLocation suggestedXChromaOffset
        VkChromaLocation suggestedYChromaOffset
    ctypedef struct VkImportAndroidHardwareBufferInfoANDROID:
        VkStructureType sType
        void* pNext
        AHardwareBuffer* buffer
    ctypedef struct VkMemoryGetAndroidHardwareBufferInfoANDROID:
        VkStructureType sType
        void* pNext
        VkDeviceMemory memory
    ctypedef struct VkExternalFormatANDROID:
        VkStructureType sType
        void* pNext
        uint64_t externalFormat
    ctypedef VkResult ( *PFN_vkGetAndroidHardwareBufferPropertiesANDROID)(VkDevice device,  AHardwareBuffer* buffer, VkAndroidHardwareBufferPropertiesANDROID* pProperties);
    ctypedef VkResult ( *PFN_vkGetMemoryAndroidHardwareBufferANDROID)(VkDevice device,  VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo, AHardwareBuffer** pBuffer);
    cdef VkResult vkGetAndroidHardwareBufferPropertiesANDROID(
        VkDevice device,
        AHardwareBuffer* buffer,
        VkAndroidHardwareBufferPropertiesANDROID* pProperties);
    cdef VkResult vkGetMemoryAndroidHardwareBufferANDROID(
        VkDevice device,
        VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo,
        AHardwareBuffer** pBuffer);
    ctypedef VkFlags VkWaylandSurfaceCreateFlagsKHR;
    ctypedef struct VkWaylandSurfaceCreateInfoKHR:
        VkStructureType sType
        void* pNext
        VkWaylandSurfaceCreateFlagsKHR flags
        wl_display* display
        wl_surface* surface
    ctypedef VkResult ( *PFN_vkCreateWaylandSurfaceKHR)(VkInstance instance,  VkWaylandSurfaceCreateInfoKHR* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);
    ctypedef VkBool32 ( *PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, wl_display* display);
    cdef VkResult vkCreateWaylandSurfaceKHR(
        VkInstance instance,
        VkWaylandSurfaceCreateInfoKHR* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkSurfaceKHR* pSurface);
    cdef VkBool32 vkGetPhysicalDeviceWaylandPresentationSupportKHR(
        VkPhysicalDevice physicalDevice,
        uint32_t queueFamilyIndex,
        wl_display* display);
    ctypedef VkFlags VkWin32SurfaceCreateFlagsKHR;
    ctypedef struct VkWin32SurfaceCreateInfoKHR:
        VkStructureType sType
        void* pNext
        VkWin32SurfaceCreateFlagsKHR flags
        HINSTANCE hinstance
        HWND hwnd
    ctypedef VkResult ( *PFN_vkCreateWin32SurfaceKHR)(VkInstance instance,  VkWin32SurfaceCreateInfoKHR* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);
    ctypedef VkBool32 ( *PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex);
    cdef VkResult vkCreateWin32SurfaceKHR(
        VkInstance instance,
        VkWin32SurfaceCreateInfoKHR* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkSurfaceKHR* pSurface);
    cdef VkBool32 vkGetPhysicalDeviceWin32PresentationSupportKHR(
        VkPhysicalDevice physicalDevice,
        uint32_t queueFamilyIndex);
    ctypedef struct VkImportMemoryWin32HandleInfoKHR:
        VkStructureType sType
        void* pNext
        VkExternalMemoryHandleTypeFlagBits handleType
        HANDLE handle
        LPCWSTR name
    ctypedef struct VkExportMemoryWin32HandleInfoKHR:
        VkStructureType sType
        void* pNext
        SECURITY_ATTRIBUTES* pAttributes
        DWORD dwAccess
        LPCWSTR name
    ctypedef struct VkMemoryWin32HandlePropertiesKHR:
        VkStructureType sType
        void* pNext
        uint32_t memoryTypeBits
    ctypedef struct VkMemoryGetWin32HandleInfoKHR:
        VkStructureType sType
        void* pNext
        VkDeviceMemory memory
        VkExternalMemoryHandleTypeFlagBits handleType
    ctypedef VkResult ( *PFN_vkGetMemoryWin32HandleKHR)(VkDevice device,  VkMemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle);
    ctypedef VkResult ( *PFN_vkGetMemoryWin32HandlePropertiesKHR)(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, HANDLE handle, VkMemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties);
    cdef VkResult vkGetMemoryWin32HandleKHR(
        VkDevice device,
        VkMemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo,
        HANDLE* pHandle);
    cdef VkResult vkGetMemoryWin32HandlePropertiesKHR(
        VkDevice device,
        VkExternalMemoryHandleTypeFlagBits handleType,
        HANDLE handle,
        VkMemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties);
    ctypedef struct VkWin32KeyedMutexAcquireReleaseInfoKHR:
        VkStructureType sType
        void* pNext
        uint32_t acquireCount
        VkDeviceMemory* pAcquireSyncs
        uint64_t* pAcquireKeys
        uint32_t* pAcquireTimeouts
        uint32_t releaseCount
        VkDeviceMemory* pReleaseSyncs
        uint64_t* pReleaseKeys
    ctypedef struct VkImportSemaphoreWin32HandleInfoKHR:
        VkStructureType sType
        void* pNext
        VkSemaphore semaphore
        VkSemaphoreImportFlags flags
        VkExternalSemaphoreHandleTypeFlagBits handleType
        HANDLE handle
        LPCWSTR name
    ctypedef struct VkExportSemaphoreWin32HandleInfoKHR:
        VkStructureType sType
        void* pNext
        SECURITY_ATTRIBUTES* pAttributes
        DWORD dwAccess
        LPCWSTR name
    ctypedef struct VkD3D12FenceSubmitInfoKHR:
        VkStructureType sType
        void* pNext
        uint32_t waitSemaphoreValuesCount
        uint64_t* pWaitSemaphoreValues
        uint32_t signalSemaphoreValuesCount
        uint64_t* pSignalSemaphoreValues
    ctypedef struct VkSemaphoreGetWin32HandleInfoKHR:
        VkStructureType sType
        void* pNext
        VkSemaphore semaphore
        VkExternalSemaphoreHandleTypeFlagBits handleType
    ctypedef VkResult ( *PFN_vkImportSemaphoreWin32HandleKHR)(VkDevice device,  VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo);
    ctypedef VkResult ( *PFN_vkGetSemaphoreWin32HandleKHR)(VkDevice device,  VkSemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle);
    cdef VkResult vkImportSemaphoreWin32HandleKHR(
        VkDevice device,
        VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo);
    cdef VkResult vkGetSemaphoreWin32HandleKHR(
        VkDevice device,
        VkSemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo,
        HANDLE* pHandle);
    ctypedef struct VkImportFenceWin32HandleInfoKHR:
        VkStructureType sType
        void* pNext
        VkFence fence
        VkFenceImportFlags flags
        VkExternalFenceHandleTypeFlagBits handleType
        HANDLE handle
        LPCWSTR name
    ctypedef struct VkExportFenceWin32HandleInfoKHR:
        VkStructureType sType
        void* pNext
        SECURITY_ATTRIBUTES* pAttributes
        DWORD dwAccess
        LPCWSTR name
    ctypedef struct VkFenceGetWin32HandleInfoKHR:
        VkStructureType sType
        void* pNext
        VkFence fence
        VkExternalFenceHandleTypeFlagBits handleType
    ctypedef VkResult ( *PFN_vkImportFenceWin32HandleKHR)(VkDevice device,  VkImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo);
    ctypedef VkResult ( *PFN_vkGetFenceWin32HandleKHR)(VkDevice device,  VkFenceGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle);
    cdef VkResult vkImportFenceWin32HandleKHR(
        VkDevice device,
        VkImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo);
    cdef VkResult vkGetFenceWin32HandleKHR(
        VkDevice device,
        VkFenceGetWin32HandleInfoKHR* pGetWin32HandleInfo,
        HANDLE* pHandle);
    ctypedef struct VkImportMemoryWin32HandleInfoNV:
        VkStructureType sType
        void* pNext
        VkExternalMemoryHandleTypeFlagsNV handleType
        HANDLE handle
    ctypedef struct VkExportMemoryWin32HandleInfoNV:
        VkStructureType sType
        void* pNext
        SECURITY_ATTRIBUTES* pAttributes
        DWORD dwAccess
    ctypedef VkResult ( *PFN_vkGetMemoryWin32HandleNV)(VkDevice device, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlagsNV handleType, HANDLE* pHandle);
    cdef VkResult vkGetMemoryWin32HandleNV(
        VkDevice device,
        VkDeviceMemory memory,
        VkExternalMemoryHandleTypeFlagsNV handleType,
        HANDLE* pHandle);
    ctypedef struct VkWin32KeyedMutexAcquireReleaseInfoNV:
        VkStructureType sType
        void* pNext
        uint32_t acquireCount
        VkDeviceMemory* pAcquireSyncs
        uint64_t* pAcquireKeys
        uint32_t* pAcquireTimeoutMilliseconds
        uint32_t releaseCount
        VkDeviceMemory* pReleaseSyncs
        uint64_t* pReleaseKeys
    ctypedef VkFlags VkXcbSurfaceCreateFlagsKHR;
    ctypedef struct VkXcbSurfaceCreateInfoKHR:
        VkStructureType sType
        void* pNext
        VkXcbSurfaceCreateFlagsKHR flags
        xcb_connection_t* connection
        xcb_window_t window
    ctypedef VkResult ( *PFN_vkCreateXcbSurfaceKHR)(VkInstance instance,  VkXcbSurfaceCreateInfoKHR* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);
    ctypedef VkBool32 ( *PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, xcb_connection_t* connection, xcb_visualid_t visual_id);
    cdef VkResult vkCreateXcbSurfaceKHR(
        VkInstance instance,
        VkXcbSurfaceCreateInfoKHR* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkSurfaceKHR* pSurface);
    cdef VkBool32 vkGetPhysicalDeviceXcbPresentationSupportKHR(
        VkPhysicalDevice physicalDevice,
        uint32_t queueFamilyIndex,
        xcb_connection_t* connection,
        xcb_visualid_t visual_id);
    ctypedef VkFlags VkXlibSurfaceCreateFlagsKHR;
    ctypedef struct VkXlibSurfaceCreateInfoKHR:
        VkStructureType sType
        void* pNext
        VkXlibSurfaceCreateFlagsKHR flags
        Display* dpy
        Window window
    ctypedef VkResult ( *PFN_vkCreateXlibSurfaceKHR)(VkInstance instance,  VkXlibSurfaceCreateInfoKHR* pCreateInfo,  VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);
    ctypedef VkBool32 ( *PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, Display* dpy, VisualID visualID);
    cdef VkResult vkCreateXlibSurfaceKHR(
        VkInstance instance,
        VkXlibSurfaceCreateInfoKHR* pCreateInfo,
        VkAllocationCallbacks* pAllocator,
        VkSurfaceKHR* pSurface);
    cdef VkBool32 vkGetPhysicalDeviceXlibPresentationSupportKHR(
        VkPhysicalDevice physicalDevice,
        uint32_t queueFamilyIndex,
        Display* dpy,
        VisualID visualID);
